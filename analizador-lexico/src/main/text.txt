 @Pruebas funciones
function int hola () {
    break |
    test() |
    return tom |
    return 29 |
    return false |
}

@ERROR
hola

function boolean test (){
    @Prueba de operaciones logicas
    @variables or boolean expresion and/or ... (no se permite el uso de parentesis, solo para expresiones aritmeticas)
    @cada operacion booleana debe estar entre {}
    
    @ERROR
    3+2
    local int test1 <=  {3 < 4} |
    local int test1 <=  {4 => 18.5} |
    local int test1 <= {8 != var # 2 == 4} |
    local int test1 <= {var # var1 != 4} |
    local int test1 <= {test2 # 28 > 6} |
    local int test1 <= {test2 ^ 3 < 4}  |
    local int test1 <= { 3 > 4 # test1} |
    local int test1 <= {test # (3 + (i**2 - 8)) > 8 ^ !test2 } # {var == 3} ^ !{var5 != (3**3 * 8)} |
    local int test1 <= {(8 + funcionArit()) < 80 ^ false} # {funcionBool() # true}|
    local int test1 <= {true # true ^ false # {false # true} ^ false # true # !{8 < z # {true} # (8+z**2) > t}} |
    @Prueba combinacion artmetica unaria y binaria, y logica
    local int test1 <= { 1 == (test +  ++prueba) ^ tomato < 4 # 25 != 4} |
}

function int sum (int num1, int num2) {
    @Prueba de aritmetica
    @NOTA: Siempre entre parentesis ( )
    @TODO: toma el 8+9 como float
    local int test1 <= (4 + 2 + 9 - - 3 / 5) |
    local int test2 <= (6) |
    local int test1 <= ((7 + 8 - 4)) |
    local int test1 <= (4 - (8 + 5.26 * 3)) |
    local int test1 <= (3 + 8 - 9.5 + (4 + 8) + 8 - (9 * 10)) |
    local int test1 <= (((4 / 3 + 19)) + 8 - 9**8 + (8 / 9) - 3) |

    local int test1 <= ((num2 + 1) - 3 / num2 * (num1 + num2)) |
    local int test1 <= (89**9 + funcionArit() * 89) |
}

function int prueba (boolean var1) {
    @Pruebas Arreglos
    trineo1[2] |
    trineo2 [2] <= 'c' |
    trineo2 [2] <= 6 |
    local char trineo3 [6] |
    local int trineo1[2]|
    trineo2  <= [6, 3] |
    local char dave <= 'l' |
    trineo2  <= ['h','i'] |
    
    @Pruebas variables
    local int var5 |
    local string var6 <= "hola"|
    
    break |
    hola(var1, var2) |

    @Prueba print y read
    read (var7) |
    print ("hola") |
}

function int holaa (int var2, boolean var3, int var4) {
    return var2 |
    
    @Prueba condicionales

    if ({3 < 4} ){
        hola(var1, var2) |
    } else {
        hola(var1, var2) |
    }  | 

    if ({3 < 4} ){
        hola(var1, var2) |
    }elif({3 < 4} ){
        hola(var1, var2) |
    }elif({3 < 4} ){
        hola(var1, var2) |
    } 
    else {
        hola(var1, var2) |
    } |


    do {hola(var1, var2)| } until ({3 < 4} ) |
    do {hola(var1, var2)| } until ({3 < 4} ) |

    for (local int i <= 0 , {i < 10} , ++ i ) {
        hola(var1, var2) | } |

    @Pruebas operaciones unicas
    ++ hola |
    -- 5 |
    - 4.03 |
    
}


function main() {
    if ({3 < 4}){
        hola(var1, var2) |
    } else {
        hola(var1, var2) |
    } |
}


@ boolean hola + 4
 
 @string test "Hola, esto es una prueba de funcionamiento"|

 @int funcion(int hola, int adios){}| hola 

 @ hola kksd k3 4.5 .

 /_ hola _/ 