
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.p1;

import java_cup.runtime.*;
import java.lang.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\211\000\002\002\004\000\002\072\002\000\002\004" +
    "\004\000\002\005\003\000\002\005\004\000\002\007\006" +
    "\000\002\006\006\000\002\011\005\000\002\012\010\000" +
    "\002\012\011\000\002\010\003\000\002\010\004\000\002" +
    "\014\004\000\002\013\003\000\002\013\005\000\002\066" +
    "\003\000\002\066\003\000\002\066\003\000\002\066\003" +
    "\000\002\066\003\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\004\000\002\066\004\000\002" +
    "\016\004\000\002\016\003\000\002\015\003\000\002\015" +
    "\004\000\002\022\003\000\002\021\006\000\002\021\005" +
    "\000\002\017\003\000\002\017\003\000\002\020\003\000" +
    "\002\020\005\000\002\023\003\000\002\023\005\000\002" +
    "\024\006\000\002\025\005\000\002\026\007\000\002\030" +
    "\010\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\033\005\000\002\032\003\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\034\003\000\002\034\003\000\002\035\012\000\002\036" +
    "\012\000\002\037\007\000\002\040\013\000\002\041\016" +
    "\000\002\043\006\000\002\044\006\000\002\047\003\000" +
    "\002\047\003\000\002\050\004\000\002\051\003\000\002" +
    "\051\003\000\002\052\004\000\002\053\004\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\003" +
    "\000\002\054\005\000\002\054\005\000\002\054\005\000" +
    "\002\070\005\000\002\070\005\000\002\070\005\000\002" +
    "\070\003\000\002\071\005\000\002\071\003\000\002\071" +
    "\003\000\002\055\005\000\002\061\005\000\002\061\005" +
    "\000\002\061\005\000\002\061\005\000\002\062\003\000" +
    "\002\062\004\000\002\062\003\000\002\062\004\000\002" +
    "\062\003\000\002\062\004\000\002\062\003\000\002\062" +
    "\004\000\002\062\003\000\002\063\003\000\002\063\005" +
    "\000\002\064\005\000\002\064\006\000\002\065\003\000" +
    "\002\065\005\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\027" +
    "\003\000\002\027\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\046\003\000" +
    "\002\046\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\060\003\000\002\060\003\000\002\067\003" +
    "\000\002\067\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\004\051\000\001\002\000\004\051\015\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\002\ufffe\001\002\000\004\051\ufff7\001\002\000" +
    "\004\045\371\001\002\000\004\002\uffff\001\002\000\004" +
    "\041\032\001\002\000\004\051\015\001\002\000\016\026" +
    "\017\027\020\030\023\031\024\032\021\047\022\001\002" +
    "\000\004\025\027\001\002\000\004\025\uff99\001\002\000" +
    "\004\025\uff98\001\002\000\004\025\uff95\001\002\000\004" +
    "\041\025\001\002\000\004\025\uff97\001\002\000\004\025" +
    "\uff96\001\002\000\004\042\026\001\002\000\004\045\ufffc" +
    "\001\002\000\004\041\ufffa\001\002\000\004\051\ufff6\001" +
    "\002\000\004\002\ufffd\001\002\000\016\026\017\027\020" +
    "\030\023\031\024\032\021\042\035\001\002\000\006\042" +
    "\363\063\364\001\002\000\004\025\362\001\002\000\004" +
    "\045\037\001\002\000\006\042\ufff4\063\ufff4\001\002\000" +
    "\032\005\060\012\102\013\061\025\040\050\076\052\075" +
    "\055\056\056\055\060\070\061\062\064\052\065\064\001" +
    "\002\000\010\041\uffe4\043\351\062\350\001\002\000\004" +
    "\066\uffc4\001\002\000\004\066\uffec\001\002\000\004\066" +
    "\uffd6\001\002\000\004\066\ufff1\001\002\000\004\066\ufff2" +
    "\001\002\000\006\062\344\066\uffd5\001\002\000\004\066" +
    "\uffed\001\002\000\004\041\333\001\002\000\004\066\uffc5" +
    "\001\002\000\004\041\324\001\002\000\004\066\uffef\001" +
    "\002\000\034\005\uff9b\012\uff9b\013\uff9b\025\uff9b\046\uff9b" +
    "\050\uff9b\052\uff9b\055\uff9b\056\uff9b\060\uff9b\061\uff9b\064" +
    "\uff9b\065\uff9b\001\002\000\004\045\314\001\002\000\004" +
    "\041\275\001\002\000\010\062\271\063\uffd2\066\uffd2\001" +
    "\002\000\006\035\uffc1\036\270\001\002\000\006\025\uff83" +
    "\035\uff83\001\002\000\004\066\uffeb\001\002\000\004\066" +
    "\uffee\001\002\000\004\041\265\001\002\000\004\066\uffd4" +
    "\001\002\000\006\025\264\035\uffc2\001\002\000\034\005" +
    "\uff9c\012\uff9c\013\uff9c\025\uff9c\046\uff9c\050\uff9c\052\uff9c" +
    "\055\uff9c\056\uff9c\060\uff9c\061\uff9c\064\uff9c\065\uff9c\001" +
    "\002\000\020\025\254\033\257\034\255\035\256\036\261" +
    "\037\260\040\262\001\002\000\004\035\253\001\002\000" +
    "\004\066\252\001\002\000\034\005\uff9a\012\uff9a\013\uff9a" +
    "\025\uff9a\046\uff9a\050\uff9a\052\uff9a\055\uff9a\056\uff9a\060" +
    "\uff9a\061\uff9a\064\uff9a\065\uff9a\001\002\000\034\005\uffe7" +
    "\012\uffe7\013\uffe7\025\uffe7\046\uffe7\050\uffe7\052\uffe7\055" +
    "\uffe7\056\uffe7\060\uffe7\061\uffe7\064\uffe7\065\uffe7\001\002" +
    "\000\004\041\113\001\002\000\014\026\017\027\020\030" +
    "\023\031\024\032\021\001\002\000\004\066\ufff0\001\002" +
    "\000\004\066\uffd7\001\002\000\034\005\060\012\102\013" +
    "\061\025\040\046\104\050\076\052\075\055\056\056\055" +
    "\060\070\061\062\064\052\065\064\001\002\000\006\025" +
    "\uff84\035\uff84\001\002\000\034\005\uffe6\012\uffe6\013\uffe6" +
    "\025\uffe6\046\uffe6\050\uffe6\052\uffe6\055\uffe6\056\uffe6\060" +
    "\uffe6\061\uffe6\064\uffe6\065\uffe6\001\002\000\004\051\ufff9" +
    "\001\002\000\034\005\uffe5\012\uffe5\013\uffe5\025\uffe5\046" +
    "\uffe5\050\uffe5\052\uffe5\055\uffe5\056\uffe5\060\uffe5\061\uffe5" +
    "\064\uffe5\065\uffe5\001\002\000\004\025\107\001\002\000" +
    "\010\043\110\062\uffd3\066\uffd3\001\002\000\004\035\111" +
    "\001\002\000\004\044\112\001\002\000\004\066\uffd8\001" +
    "\002\000\006\024\115\045\117\001\002\000\004\042\226" +
    "\001\002\000\004\045\162\001\002\000\014\022\140\023" +
    "\141\042\uff9e\063\uff9e\066\uff9e\001\002\000\022\024\134" +
    "\025\121\033\132\034\130\035\126\036\125\041\127\045" +
    "\117\001\002\000\010\022\uffa7\023\uffa7\046\uffa7\001\002" +
    "\000\026\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021" +
    "\uff8c\022\uffa9\023\uffa9\041\uffe4\046\uffa9\001\002\000\010" +
    "\022\uffab\023\uffab\046\uffab\001\002\000\024\014\uff8b\015" +
    "\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uffa5\023\uffa5" +
    "\046\uffa5\001\002\000\004\046\223\001\002\000\042\004" +
    "\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\014\uff8d" +
    "\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023" +
    "\uff8d\042\uff8d\046\uff8d\001\002\000\042\004\uff8e\005\uff8e" +
    "\006\uff8e\007\uff8e\010\uff8e\011\uff8e\014\uff8e\015\uff8e\016" +
    "\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\042\uff8e" +
    "\046\uff8e\001\002\000\012\025\152\035\126\036\125\041" +
    "\127\001\002\000\010\022\uff79\023\uff79\046\uff79\001\002" +
    "\000\016\014\150\015\145\016\147\017\143\020\146\021" +
    "\151\001\002\000\010\022\uff7a\023\uff7a\046\uff7a\001\002" +
    "\000\010\022\uffa3\023\uffa3\046\uffa3\001\002\000\020\025" +
    "\157\033\132\034\130\035\126\036\125\041\127\045\162" +
    "\001\002\000\016\014\150\015\145\016\147\017\143\020" +
    "\146\021\151\001\002\000\010\022\140\023\141\046\uffa2" +
    "\001\002\000\022\024\134\025\121\033\132\034\130\035" +
    "\126\036\125\041\127\045\117\001\002\000\022\024\uff7c" +
    "\025\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\041\uff7c\045" +
    "\uff7c\001\002\000\022\024\uff7b\025\uff7b\033\uff7b\034\uff7b" +
    "\035\uff7b\036\uff7b\041\uff7b\045\uff7b\001\002\000\004\046" +
    "\uffa1\001\002\000\012\025\uff82\035\uff82\036\uff82\041\uff82" +
    "\001\002\000\012\025\152\035\126\036\125\041\127\001" +
    "\002\000\012\025\uff7f\035\uff7f\036\uff7f\041\uff7f\001\002" +
    "\000\012\025\uff7d\035\uff7d\036\uff7d\041\uff7d\001\002\000" +
    "\012\025\uff7e\035\uff7e\036\uff7e\041\uff7e\001\002\000\012" +
    "\025\uff81\035\uff81\036\uff81\041\uff81\001\002\000\012\025" +
    "\uff80\035\uff80\036\uff80\041\uff80\001\002\000\030\004\uff8c" +
    "\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\022\uff8c\023" +
    "\uff8c\041\uffe4\042\uff8c\046\uff8c\001\002\000\010\022\uffac" +
    "\023\uffac\046\uffac\001\002\000\026\004\uff8b\005\uff8b\006" +
    "\uff8b\007\uff8b\010\uff8b\011\uff8b\022\uff8b\023\uff8b\042\uff8b" +
    "\046\uff8b\001\002\000\010\022\uffae\023\uffae\046\uffae\001" +
    "\002\000\010\022\uffa6\023\uffa6\046\uffa6\001\002\000\026" +
    "\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022" +
    "\uffa8\023\uffa8\041\uffe4\046\uffa8\001\002\000\010\022\uffaa" +
    "\023\uffaa\046\uffaa\001\002\000\024\014\uff8b\015\uff8b\016" +
    "\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uffa4\023\uffa4\046\uffa4" +
    "\001\002\000\022\024\134\025\121\033\132\034\130\035" +
    "\126\036\125\041\127\045\117\001\002\000\004\046\164" +
    "\001\002\000\016\022\uff9f\023\uff9f\042\uff9f\046\uff9f\063" +
    "\uff9f\066\uff9f\001\002\000\012\025\152\035\126\036\125" +
    "\041\127\001\002\000\010\022\uffad\023\uffad\046\uffad\001" +
    "\002\000\010\022\uffaf\023\uffaf\046\uffaf\001\002\000\010" +
    "\004\200\005\201\042\222\001\002\000\020\004\uffb2\005" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\042\uffb2\001\002" +
    "\000\020\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011" +
    "\220\042\uffb4\001\002\000\016\004\206\005\207\006\205" +
    "\007\210\010\211\042\uffbb\001\002\000\020\004\175\005" +
    "\176\006\uffb1\007\uffb1\010\uffb1\011\uffb1\042\uffb1\001\002" +
    "\000\012\025\152\035\126\036\125\041\127\001\002\000" +
    "\012\025\152\035\126\036\125\041\127\001\002\000\010" +
    "\004\uffb8\005\uffb8\042\uffb8\001\002\000\012\025\152\035" +
    "\126\036\125\041\127\001\002\000\012\025\152\035\126" +
    "\036\125\041\127\001\002\000\010\004\uffba\005\uffba\042" +
    "\uffba\001\002\000\010\004\uffbe\005\uffbe\042\uffbe\001\002" +
    "\000\010\004\uffbc\005\uffbc\042\uffbc\001\002\000\012\025" +
    "\152\035\126\036\125\041\127\001\002\000\012\025\152" +
    "\035\126\036\125\041\127\001\002\000\012\025\152\035" +
    "\126\036\125\041\127\001\002\000\012\025\152\035\126" +
    "\036\125\041\127\001\002\000\012\025\152\035\126\036" +
    "\125\041\127\001\002\000\016\004\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\010\uffb5\042\uffb5\001\002\000\020\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\042\uffb1\001\002" +
    "\000\016\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\042" +
    "\uffb6\001\002\000\016\004\uffb9\005\uffb9\006\205\007\210" +
    "\010\211\042\uffb9\001\002\000\016\004\uffbd\005\uffbd\006" +
    "\205\007\210\010\211\042\uffbd\001\002\000\016\004\uffb7" +
    "\005\uffb7\006\uffb7\007\uffb7\010\uffb7\042\uffb7\001\002\000" +
    "\012\025\152\035\126\036\125\041\127\001\002\000\020" +
    "\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\042" +
    "\uffb3\001\002\000\046\004\uffb0\005\uffb0\006\uffb0\007\uffb0" +
    "\010\uffb0\011\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020" +
    "\uffb0\021\uffb0\022\uffb0\023\uffb0\042\uffb0\046\uffb0\063\uffb0" +
    "\066\uffb0\001\002\000\016\022\uffa0\023\uffa0\042\uffa0\046" +
    "\uffa0\063\uffa0\066\uffa0\001\002\000\006\024\115\045\117" +
    "\001\002\000\010\042\uff9d\063\uff9d\066\uff9d\001\002\000" +
    "\004\045\227\001\002\000\032\005\060\012\102\013\061" +
    "\025\040\050\076\052\075\055\056\056\055\060\070\061" +
    "\062\064\052\065\064\001\002\000\034\005\060\012\102" +
    "\013\061\025\040\046\231\050\076\052\075\055\056\056" +
    "\055\060\070\061\062\064\052\065\064\001\002\000\006" +
    "\053\233\054\232\001\002\000\004\045\246\001\002\000" +
    "\004\041\237\001\002\000\034\005\uffcc\012\uffcc\013\uffcc" +
    "\025\uffcc\046\uffcc\050\uffcc\052\uffcc\055\uffcc\056\uffcc\060" +
    "\uffcc\061\uffcc\064\uffcc\065\uffcc\001\002\000\034\005\uffcd" +
    "\012\uffcd\013\uffcd\025\uffcd\046\uffcd\050\uffcd\052\uffcd\055" +
    "\uffcd\056\uffcd\060\uffcd\061\uffcd\064\uffcd\065\uffcd\001\002" +
    "\000\034\005\uffce\012\uffce\013\uffce\025\uffce\046\uffce\050" +
    "\uffce\052\uffce\055\uffce\056\uffce\060\uffce\061\uffce\064\uffce" +
    "\065\uffce\001\002\000\006\024\115\045\117\001\002\000" +
    "\004\042\241\001\002\000\004\045\242\001\002\000\032" +
    "\005\060\012\102\013\061\025\040\050\076\052\075\055" +
    "\056\056\055\060\070\061\062\064\052\065\064\001\002" +
    "\000\034\005\060\012\102\013\061\025\040\046\244\050" +
    "\076\052\075\055\056\056\055\060\070\061\062\064\052" +
    "\065\064\001\002\000\006\053\233\054\232\001\002\000" +
    "\034\005\uffcb\012\uffcb\013\uffcb\025\uffcb\046\uffcb\050\uffcb" +
    "\052\uffcb\055\uffcb\056\uffcb\060\uffcb\061\uffcb\064\uffcb\065" +
    "\uffcb\001\002\000\032\005\060\012\102\013\061\025\040" +
    "\050\076\052\075\055\056\056\055\060\070\061\062\064" +
    "\052\065\064\001\002\000\034\005\060\012\102\013\061" +
    "\025\040\046\250\050\076\052\075\055\056\056\055\060" +
    "\070\061\062\064\052\065\064\001\002\000\004\066\251" +
    "\001\002\000\034\005\uffca\012\uffca\013\uffca\025\uffca\046" +
    "\uffca\050\uffca\052\uffca\055\uffca\056\uffca\060\uffca\061\uffca" +
    "\064\uffca\065\uffca\001\002\000\034\005\uffe8\012\uffe8\013" +
    "\uffe8\025\uffe8\046\uffe8\050\uffe8\052\uffe8\055\uffe8\056\uffe8" +
    "\060\uffe8\061\uffe8\064\uffe8\065\uffe8\001\002\000\004\066" +
    "\uffc0\001\002\000\004\066\uffea\001\002\000\010\042\uff91" +
    "\063\uff91\066\uff91\001\002\000\010\042\uff94\063\uff94\066" +
    "\uff94\001\002\000\010\042\uff90\063\uff90\066\uff90\001\002" +
    "\000\010\042\uff8f\063\uff8f\066\uff8f\001\002\000\010\042" +
    "\uff93\063\uff93\066\uff93\001\002\000\010\042\uff92\063\uff92" +
    "\066\uff92\001\002\000\004\066\uffe9\001\002\000\006\042" +
    "\uffc3\066\uffc3\001\002\000\004\025\266\001\002\000\004" +
    "\042\267\001\002\000\004\066\uffc7\001\002\000\004\066" +
    "\uffbf\001\002\000\024\024\115\033\257\034\255\035\256" +
    "\036\261\037\260\040\262\041\127\045\117\001\002\000" +
    "\006\063\uffd1\066\uffd1\001\002\000\006\063\uffcf\066\uffcf" +
    "\001\002\000\006\063\uffd0\066\uffd0\001\002\000\004\050" +
    "\277\001\002\000\004\063\302\001\002\000\014\026\017" +
    "\027\020\030\023\031\024\032\021\001\002\000\004\025" +
    "\301\001\002\000\006\062\uffd3\063\uffd3\001\002\000\006" +
    "\024\115\045\117\001\002\000\004\063\304\001\002\000" +
    "\006\012\102\013\061\001\002\000\004\042\307\001\002" +
    "\000\004\025\264\001\002\000\004\045\310\001\002\000" +
    "\032\005\060\012\102\013\061\025\040\050\076\052\075" +
    "\055\056\056\055\060\070\061\062\064\052\065\064\001" +
    "\002\000\034\005\060\012\102\013\061\025\040\046\312" +
    "\050\076\052\075\055\056\056\055\060\070\061\062\064" +
    "\052\065\064\001\002\000\004\066\313\001\002\000\034" +
    "\005\uffc8\012\uffc8\013\uffc8\025\uffc8\046\uffc8\050\uffc8\052" +
    "\uffc8\055\uffc8\056\uffc8\060\uffc8\061\uffc8\064\uffc8\065\uffc8" +
    "\001\002\000\032\005\060\012\102\013\061\025\040\050" +
    "\076\052\075\055\056\056\055\060\070\061\062\064\052" +
    "\065\064\001\002\000\034\005\060\012\102\013\061\025" +
    "\040\046\316\050\076\052\075\055\056\056\055\060\070" +
    "\061\062\064\052\065\064\001\002\000\004\057\317\001" +
    "\002\000\004\041\320\001\002\000\006\024\115\045\117" +
    "\001\002\000\004\042\322\001\002\000\004\066\323\001" +
    "\002\000\034\005\uffc9\012\uffc9\013\uffc9\025\uffc9\046\uffc9" +
    "\050\uffc9\052\uffc9\055\uffc9\056\uffc9\060\uffc9\061\uffc9\064" +
    "\uffc9\065\uffc9\001\002\000\012\025\325\035\326\036\331" +
    "\037\330\001\002\000\004\042\uff85\001\002\000\004\042" +
    "\uff88\001\002\000\004\042\332\001\002\000\004\042\uff86" +
    "\001\002\000\004\042\uff87\001\002\000\004\066\uffc6\001" +
    "\002\000\022\025\335\033\257\034\255\035\256\036\261" +
    "\037\260\040\262\042\340\001\002\000\006\042\uffe0\063" +
    "\uffe0\001\002\000\006\042\uffe1\063\uffe1\001\002\000\006" +
    "\042\341\063\342\001\002\000\006\042\uffdf\063\uffdf\001" +
    "\002\000\044\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\042\uffe2\046\uffe2\066\uffe2\001\002" +
    "\000\044\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\042\uffe3\046\uffe3\066\uffe3\001\002\000" +
    "\020\025\335\033\257\034\255\035\256\036\261\037\260" +
    "\040\262\001\002\000\006\042\uffde\063\uffde\001\002\000" +
    "\006\035\345\040\347\001\002\000\010\044\uff8a\063\uff8a" +
    "\066\uff8a\001\002\000\004\066\uffda\001\002\000\010\044" +
    "\uff89\063\uff89\066\uff89\001\002\000\004\043\354\001\002" +
    "\000\004\035\352\001\002\000\004\044\353\001\002\000" +
    "\006\062\uffdb\066\uffdb\001\002\000\006\035\345\040\347" +
    "\001\002\000\006\044\uffdd\063\360\001\002\000\004\044" +
    "\357\001\002\000\004\066\uffd9\001\002\000\006\035\345" +
    "\040\347\001\002\000\004\044\uffdc\001\002\000\006\042" +
    "\ufff5\063\ufff5\001\002\000\004\045\366\001\002\000\014" +
    "\026\017\027\020\030\023\031\024\032\021\001\002\000" +
    "\006\042\ufff3\063\ufff3\001\002\000\032\005\060\012\102" +
    "\013\061\025\040\050\076\052\075\055\056\056\055\060" +
    "\070\061\062\064\052\065\064\001\002\000\034\005\060" +
    "\012\102\013\061\025\040\046\370\050\076\052\075\055" +
    "\056\056\055\060\070\061\062\064\052\065\064\001\002" +
    "\000\004\051\ufff8\001\002\000\032\005\060\012\102\013" +
    "\061\025\040\050\076\052\075\055\056\056\055\060\070" +
    "\061\062\064\052\065\064\001\002\000\034\005\060\012" +
    "\102\013\061\025\040\046\373\050\076\052\075\055\056" +
    "\056\055\060\070\061\062\064\052\065\064\001\002\000" +
    "\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\006\004\004\072\003\001\001\000\016\005" +
    "\011\006\006\007\010\010\013\011\012\012\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\030\007\010\011\012\012\027\001" +
    "\001\000\004\002\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\033\013\032\014\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\015\100\016\102\021\044\022\047" +
    "\024\045\025\042\026\064\030\077\031\043\032\076\033" +
    "\056\035\066\040\053\041\072\042\073\043\052\044\062" +
    "\046\065\047\041\050\040\051\070\052\046\053\050\066" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\016\104" +
    "\021\044\022\047\024\045\025\042\026\064\030\077\031" +
    "\043\032\076\033\056\035\066\040\053\041\072\042\073" +
    "\043\052\044\062\046\065\047\041\050\040\051\070\052" +
    "\046\053\050\066\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\064\115\065\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\223\001\001" +
    "\000\024\021\122\022\047\055\134\056\130\061\121\062" +
    "\135\063\123\064\132\067\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\021\153\022\047\054\167\055\173\056\170\070\172\071" +
    "\171\001\001\000\002\001\001\000\004\057\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\021\160\022" +
    "\047\055\134\056\130\061\157\067\155\001\001\000\004" +
    "\057\143\001\001\000\004\060\136\001\001\000\024\021" +
    "\122\022\047\055\134\056\130\061\121\062\135\063\141" +
    "\064\132\067\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\153" +
    "\022\047\055\152\056\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\021\122\022" +
    "\047\055\134\056\130\061\121\062\135\063\162\064\132" +
    "\067\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\021\153\022\047\055\165\056\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\021\153\022\047\054\203\055\173\056\170\070" +
    "\172\071\171\001\001\000\020\021\153\022\047\054\176" +
    "\055\173\056\170\070\172\071\171\001\001\000\002\001" +
    "\001\000\020\021\153\022\047\054\202\055\173\056\170" +
    "\070\172\071\171\001\001\000\020\021\153\022\047\054" +
    "\201\055\173\056\170\070\172\071\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\021" +
    "\153\022\047\055\212\056\170\070\216\071\171\001\001" +
    "\000\016\021\153\022\047\055\212\056\170\070\215\071" +
    "\171\001\001\000\016\021\153\022\047\055\212\056\170" +
    "\070\214\071\171\001\001\000\016\021\153\022\047\055" +
    "\212\056\170\070\213\071\171\001\001\000\016\021\153" +
    "\022\047\055\212\056\170\070\211\071\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\021" +
    "\153\022\047\055\212\056\170\071\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\064" +
    "\115\065\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\015\227\016\102\021\044\022\047\024\045\025" +
    "\042\026\064\030\077\031\043\032\076\033\056\035\066" +
    "\040\053\041\072\042\073\043\052\044\062\046\065\047" +
    "\041\050\040\051\070\052\046\053\050\066\071\001\001" +
    "\000\060\016\104\021\044\022\047\024\045\025\042\026" +
    "\064\030\077\031\043\032\076\033\056\035\066\040\053" +
    "\041\072\042\073\043\052\044\062\046\065\047\041\050" +
    "\040\051\070\052\046\053\050\066\071\001\001\000\010" +
    "\034\233\036\235\037\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\064\115\065\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\015\242\016\102\021\044" +
    "\022\047\024\045\025\042\026\064\030\077\031\043\032" +
    "\076\033\056\035\066\040\053\041\072\042\073\043\052" +
    "\044\062\046\065\047\041\050\040\051\070\052\046\053" +
    "\050\066\071\001\001\000\060\016\104\021\044\022\047" +
    "\024\045\025\042\026\064\030\077\031\043\032\076\033" +
    "\056\035\066\040\053\041\072\042\073\043\052\044\062" +
    "\046\065\047\041\050\040\051\070\052\046\053\050\066" +
    "\071\001\001\000\010\034\244\036\235\037\234\001\001" +
    "\000\002\001\001\000\062\015\246\016\102\021\044\022" +
    "\047\024\045\025\042\026\064\030\077\031\043\032\076" +
    "\033\056\035\066\040\053\041\072\042\073\043\052\044" +
    "\062\046\065\047\041\050\040\051\070\052\046\053\050" +
    "\066\071\001\001\000\060\016\104\021\044\022\047\024" +
    "\045\025\042\026\064\030\077\031\043\032\076\033\056" +
    "\035\066\040\053\041\072\042\073\043\052\044\062\046" +
    "\065\047\041\050\040\051\070\052\046\053\050\066\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\271\055\273\064\115" +
    "\065\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\275\033\056\001\001\000\002" +
    "\001\001\000\004\002\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\064\115\065\302\001\001\000\002" +
    "\001\001\000\006\046\305\050\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\015\310" +
    "\016\102\021\044\022\047\024\045\025\042\026\064\030" +
    "\077\031\043\032\076\033\056\035\066\040\053\041\072" +
    "\042\073\043\052\044\062\046\065\047\041\050\040\051" +
    "\070\052\046\053\050\066\071\001\001\000\060\016\104" +
    "\021\044\022\047\024\045\025\042\026\064\030\077\031" +
    "\043\032\076\033\056\035\066\040\053\041\072\042\073" +
    "\043\052\044\062\046\065\047\041\050\040\051\070\052" +
    "\046\053\050\066\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\015\314\016\102\021\044\022\047\024" +
    "\045\025\042\026\064\030\077\031\043\032\076\033\056" +
    "\035\066\040\053\041\072\042\073\043\052\044\062\046" +
    "\065\047\041\050\040\051\070\052\046\053\050\066\071" +
    "\001\001\000\060\016\104\021\044\022\047\024\045\025" +
    "\042\026\064\030\077\031\043\032\076\033\056\035\066" +
    "\040\053\041\072\042\073\043\052\044\062\046\065\047" +
    "\041\050\040\051\070\052\046\053\050\066\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\064\115\065" +
    "\320\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\326\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\333\017\336\020" +
    "\335\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\333\017\342\001\001\000\002\001\001" +
    "\000\004\027\345\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\355\027" +
    "\354\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\360\027\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\033" +
    "\014\364\001\001\000\002\001\001\000\062\015\366\016" +
    "\102\021\044\022\047\024\045\025\042\026\064\030\077" +
    "\031\043\032\076\033\056\035\066\040\053\041\072\042" +
    "\073\043\052\044\062\046\065\047\041\050\040\051\070" +
    "\052\046\053\050\066\071\001\001\000\060\016\104\021" +
    "\044\022\047\024\045\025\042\026\064\030\077\031\043" +
    "\032\076\033\056\035\066\040\053\041\072\042\073\043" +
    "\052\044\062\046\065\047\041\050\040\051\070\052\046" +
    "\053\050\066\071\001\001\000\002\001\001\000\062\015" +
    "\371\016\102\021\044\022\047\024\045\025\042\026\064" +
    "\030\077\031\043\032\076\033\056\035\066\040\053\041" +
    "\072\042\073\043\052\044\062\046\065\047\041\050\040" +
    "\051\070\052\046\053\050\066\071\001\001\000\060\016" +
    "\104\021\044\022\047\024\045\025\042\026\064\030\077" +
    "\031\043\032\076\033\056\035\066\040\053\041\072\042" +
    "\073\043\052\044\062\046\065\047\041\050\040\051\070" +
    "\052\046\053\050\066\071\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    Lexer lex;

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex=lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //Nombre y lista de identificadores de la funcion
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<String, ArrayList<String>>();
    //Funcion actual
    String currentHash;

    //Funcion para imprimir tabla de simbolos
    public void imprimirTablaSimbolos(){
        for (String key: listaTablasSimbolos.keySet()){
            System.out.println("Tabla de simbolo : " + key);
            System.out.println("Valores : ");
            for (String item : listaTablasSimbolos.get(key)){
                System.out.println(item);
            }
            System.out.println("");
        }

    }

    public void hola(){
        System.out.println("Hola");
    }
    public void adios(){
        System.out.println("Adios");
    }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

        System.out.println("Inicio de parseo");
        System.out.println(" ");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // navidad ::= NT$0 navidadAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.out.println("*********** Cargando Tabla de Simbolos ************");
        System.out.println(" ");
        imprimirTablaSimbolos();
        System.out.println("Fin de parseo");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // navidadAux ::= mainNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidadAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // navidadAux ::= bolsanavidena mainNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidadAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mainNavidadAux ::= FUNCTION MAIN ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		
                //System.out.println("NuevaFuncion");
                String tipoTabla = "tipo:main";
                ArrayList<String> funcionMain = new ArrayList<String>();
                currentHash = "main";
                funcionMain.add(tipoTabla);
                listaTablasSimbolos.put(currentHash, funcionMain);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainNavidadAux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mainNavidad ::= mainNavidadAux ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainNavidad",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bolsaAux ::= FUNCTION tsantaclaus PERSONA 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //System.out.println("NuevaFuncion");
                String tipoTabla = "";
                tipoTabla = "tipo:funcion:"+tsc.toString();
                ArrayList<String> funcionMain = new ArrayList<String>();
                currentHash = per.toString();
                funcionMain.add(tipoTabla);
                listaTablasSimbolos.put(currentHash, funcionMain);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsaAux",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bolsanavidenaAux ::= bolsaAux ABRECUENTO CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenaAux",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bolsanavidenaAux ::= bolsaAux ABRECUENTO listaDeRegalos CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenaAux",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bolsanavidena ::= bolsanavidenaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidena",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bolsanavidena ::= bolsanavidena bolsanavidenaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidena",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listaDeRegalosAux ::= tsantaclaus PERSONA 
            {
              Object RESULT =null;
		int tsanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsanright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tsan = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                listaTablasSimbolos.get(currentHash).add("tipo:Param:"+per.toString()+":"+tsan.toString());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalosAux",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listaDeRegalos ::= listaDeRegalosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listaDeRegalos ::= listaDeRegalos BASTON listaDeRegalosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // adornoAux ::= llamadaASanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // adornoAux ::= infoTrineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // adornoAux ::= decorarGalleta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // adornoAux ::= leerCarta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // adornoAux ::= escribirCarta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // adornoAux ::= decoracionI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // adornoAux ::= decoracionesF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // adornoAux ::= CORTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // adornoAux ::= ENVIA PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // adornoAux ::= ENVIA tlsantaclaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // adorno ::= adornoAux FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // adorno ::= luces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // villancicos ::= adorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("villancicos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // villancicos ::= villancicos adorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("villancicos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // llamadaASantaAux ::= PERSONA 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaASantaAux",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // llamadaASanta ::= llamadaASantaAux ABRECUENTO listaDeTamales CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaASanta",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // llamadaASanta ::= llamadaASantaAux ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaASanta",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listaDeTamalesAux ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamalesAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listaDeTamalesAux ::= tlsantaclaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamalesAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listaDeTamales ::= listaDeTamalesAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamales",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listaDeTamales ::= listaDeTamales BASTON listaDeTamalesAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamales",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listaAmigos ::= SantaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaAmigos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listaAmigos ::= SantaArreglo BASTON listaAmigos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaAmigos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // acceso_trineo ::= PERSONA ABREEMPAQUE l_SANTA_CLAUS CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_trineo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // llenar_trineo ::= acceso_trineo ENTREGA SantaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llenar_trineo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // colocar_trineo ::= PERSONA ENTREGA ABREEMPAQUE listaAmigos CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("colocar_trineo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // trineo ::= LOCAL tsantaclaus PERSONA ABREEMPAQUE l_SANTA_CLAUS CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tsanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tsanright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tsan = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                listaTablasSimbolos.get(currentHash).add("tipo:LocalArray:"+per.toString()+":"+tsan.toString());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trineo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // infoTrineo ::= trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // infoTrineo ::= llenar_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // infoTrineo ::= acceso_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // infoTrineo ::= colocar_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ayudanteDeGalleta ::= LOCAL tsantaclaus PERSONA 
            {
              Object RESULT =null;
		int tsanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsanright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tsan = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                listaTablasSimbolos.get(currentHash).add("tipo:Local:"+per.toString()+":"+tsan.toString());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudanteDeGalleta",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // decorarGalleta ::= ayudanteDeGalleta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // decorarGalleta ::= ayudanteDeGalleta ENTREGA tlsantaclaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // decorarGalleta ::= ayudanteDeGalleta ENTREGA whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // decorarGalleta ::= ayudanteDeGalleta ENTREGA gingerBread 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ponerLuces ::= elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ponerLuces",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ponerLuces ::= else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ponerLuces",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // if ::= ELFO ABRECUENTO gingerBread CIERRACUENTO ABREREGALO villancicos CIERRAREGALO ponerLuces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // elif ::= HADA ABRECUENTO gingerBread CIERRACUENTO ABREREGALO villancicos CIERRAREGALO ponerLuces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // else ::= DUENDE ABREREGALO villancicos CIERRAREGALO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // do_until ::= HACE ABREREGALO villancicos CIERRAREGALO REVISA ABRECUENTO gingerBread CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_until",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // for ::= ENVUELVE ABRECUENTO decorarGalleta BASTON gingerBread BASTON decoracion CIERRACUENTO ABREREGALO villancicos CIERRAREGALO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // leerCarta ::= ESCUCHA ABRECUENTO PERSONA CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leerCarta",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // escribirCarta ::= NARRA ABRECUENTO mensaje CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribirCarta",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // decoracionesF ::= decoracionF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesF",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // decoracionesF ::= decoracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesF",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // decoracion ::= ornamentosUnicos PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // decoracionIAux ::= ornamentosUnicos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionIAux",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // decoracionIAux ::= TURENO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionIAux",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // decoracionI ::= decoracionIAux l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionI",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // decoracionF ::= TURENO l_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionF",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CindyLuWho ::= CindyLuWho RODOLFO CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CindyLuWho ::= CindyLuWhoS RODOLFO CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CindyLuWho ::= whoVille RODOLFO CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CindyLuWho ::= CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CindyLuWho ::= CindyLuWho TURENO CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CindyLuWho ::= CindyLuWhoS TURENO CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CindyLuWho ::= whoVille TURENO CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CindyLuWhoS ::= CindyLuWhoS COMETA CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CindyLuWhoS ::= CindyLuWhoS DASHER CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CindyLuWhoS ::= CindyLuWhoS DANCER CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CindyLuWhoS ::= CindyLuWhoT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CindyLuWhoT ::= CindyLuWhoT PRANCER CindyLuWhoT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoT",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CindyLuWhoT ::= SantaMate 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoT",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CindyLuWhoT ::= whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoT",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // whoVille ::= ABRECUENTO CindyLuWho CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whoVille",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sugar ::= SantaMate workshop SantaMate 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sugar ::= whoVille workshop SantaMate 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sugar ::= SantaMate workshop whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sugar ::= whoVille workshop whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // candy ::= sugar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // candy ::= BALTAZAR sugar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // candy ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // candy ::= BALTAZAR PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // candy ::= naughtyOrNice 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // candy ::= BALTAZAR naughtyOrNice 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // candy ::= llamadaASanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // candy ::= BALTAZAR llamadaASanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // candy ::= candyBox 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // candyCane ::= candy 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyCane",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // candyCane ::= candy yellowSnow candyCane 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyCane",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // candyBox ::= ABREREGALO candyCane CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyBox",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // candyBox ::= BALTAZAR ABREREGALO candyCane CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyBox",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // gingerBread ::= candyBox 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gingerBread",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // gingerBread ::= candyBox yellowSnow gingerBread 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gingerBread",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // luces ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // luces ::= do_until 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // luces ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tsantaclaus ::= FATHER_CHRISTMAS 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tsantaclaus ::= SANTA_CLAUS 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tsantaclaus ::= PAPA_NOEL 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tsantaclaus ::= SAN_NICOLAS 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tsantaclaus ::= SANTA 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tlsantaclaus ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tlsantaclaus ::= l_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tlsantaclaus ::= l_SANTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tlsantaclaus ::= l_TFATHER_CHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tlsantaclaus ::= l_FFATHER_CHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tlsantaclaus ::= l_SAN_NICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SantaMate ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SantaMate ::= l_PAPA_NOEL 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SantaMate ::= PERSONA 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SantaMate ::= llamadaASanta 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SantaArreglo ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaArreglo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SantaArreglo ::= l_SANTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaArreglo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // mensaje ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // mensaje ::= l_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // mensaje ::= l_SAN_NICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // mensaje ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ornamentosUnicos ::= QUIEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentosUnicos",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ornamentosUnicos ::= GRINCH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentosUnicos",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // workshop ::= SUGARPLUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // workshop ::= SNOWBALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // workshop ::= WUNORSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // workshop ::= BUSHY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // workshop ::= PEPPER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // workshop ::= SHINNY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // yellowSnow ::= MELCHOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yellowSnow",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // yellowSnow ::= GASPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yellowSnow",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // naughtyOrNice ::= l_FFATHER_CHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("naughtyOrNice",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // naughtyOrNice ::= l_TFATHER_CHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("naughtyOrNice",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
