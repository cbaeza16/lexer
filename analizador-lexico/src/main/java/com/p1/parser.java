
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.p1;

import java_cup.runtime.*;
import java.lang.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\002\004\000\002\070\002\000\002\004" +
    "\004\000\002\005\003\000\002\005\004\000\002\006\011" +
    "\000\002\010\005\000\002\011\010\000\002\011\011\000" +
    "\002\007\003\000\002\007\004\000\002\013\004\000\002" +
    "\012\003\000\002\012\005\000\002\064\003\000\002\064" +
    "\003\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\004\000\002\064\004\000\002\015\004\000\002" +
    "\015\003\000\002\014\003\000\002\014\004\000\002\021" +
    "\003\000\002\020\006\000\002\020\005\000\002\016\003" +
    "\000\002\016\003\000\002\017\003\000\002\017\005\000" +
    "\002\022\003\000\002\022\005\000\002\023\006\000\002" +
    "\024\005\000\002\025\007\000\002\027\007\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\031\004\000\002\031\006\000" +
    "\002\031\006\000\002\031\006\000\002\031\004\000\002" +
    "\032\003\000\002\032\003\000\002\033\012\000\002\034" +
    "\012\000\002\035\007\000\002\036\013\000\002\037\016" +
    "\000\002\041\006\000\002\042\006\000\002\045\003\000" +
    "\002\045\003\000\002\046\004\000\002\047\003\000\002" +
    "\047\003\000\002\050\004\000\002\051\004\000\002\071" +
    "\002\000\002\052\006\000\002\052\005\000\002\052\005" +
    "\000\002\052\003\000\002\052\005\000\002\052\005\000" +
    "\002\052\005\000\002\066\005\000\002\066\005\000\002" +
    "\066\005\000\002\066\003\000\002\067\005\000\002\067" +
    "\003\000\002\067\003\000\002\053\005\000\002\057\005" +
    "\000\002\057\005\000\002\057\005\000\002\057\005\000" +
    "\002\060\003\000\002\060\004\000\002\060\003\000\002" +
    "\060\004\000\002\060\003\000\002\060\004\000\002\060" +
    "\003\000\002\060\004\000\002\060\003\000\002\061\003" +
    "\000\002\061\005\000\002\062\005\000\002\062\006\000" +
    "\002\063\003\000\002\063\005\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\026\003\000\002\026\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\044\003\000\002\044\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\056\003\000\002\056\003" +
    "\000\002\065\003\000\002\065\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\004\051\000\001\002\000\004\051\014\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\002\ufffe\001\002\000\004\051\ufff8\001\002\000" +
    "\004\002\uffff\001\002\000\004\041\356\001\002\000\004" +
    "\051\014\001\002\000\016\026\015\027\017\030\023\031" +
    "\022\032\020\047\021\001\002\000\004\025\uff98\001\002" +
    "\000\004\025\353\001\002\000\004\025\uff97\001\002\000" +
    "\004\025\uff94\001\002\000\004\041\024\001\002\000\004" +
    "\025\uff95\001\002\000\004\025\uff96\001\002\000\004\042" +
    "\025\001\002\000\004\045\026\001\002\000\050\005\051" +
    "\012\075\013\052\025\030\026\015\027\017\030\023\031" +
    "\022\032\020\035\040\040\027\050\071\052\067\055\050" +
    "\056\046\060\061\061\053\064\043\065\055\001\002\000" +
    "\010\044\uff88\063\uff88\066\uff88\001\002\000\010\041\uffe5" +
    "\043\345\062\344\001\002\000\004\066\uffc4\001\002\000" +
    "\004\066\uffed\001\002\000\004\066\uffd7\001\002\000\004" +
    "\066\ufff2\001\002\000\004\066\ufff3\001\002\000\006\062" +
    "\342\066\uffd6\001\002\000\004\066\uffee\001\002\000\010" +
    "\044\uff89\063\uff89\066\uff89\001\002\000\004\041\331\001" +
    "\002\000\004\066\uffc5\001\002\000\004\041\322\001\002" +
    "\000\004\066\ufff0\001\002\000\052\005\uff9a\012\uff9a\013" +
    "\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a" +
    "\035\uff9a\040\uff9a\046\uff9a\050\uff9a\052\uff9a\055\uff9a\056" +
    "\uff9a\060\uff9a\061\uff9a\064\uff9a\065\uff9a\001\002\000\004" +
    "\045\312\001\002\000\004\025\311\001\002\000\004\041" +
    "\275\001\002\000\006\035\uffc1\036\274\001\002\000\006" +
    "\025\uff82\035\uff82\001\002\000\004\066\uffec\001\002\000" +
    "\004\066\uffef\001\002\000\004\041\271\001\002\000\004" +
    "\066\uffd5\001\002\000\006\025\270\035\uffc2\001\002\000" +
    "\052\005\uff9b\012\uff9b\013\uff9b\025\uff9b\026\uff9b\027\uff9b" +
    "\030\uff9b\031\uff9b\032\uff9b\035\uff9b\040\uff9b\046\uff9b\050" +
    "\uff9b\052\uff9b\055\uff9b\056\uff9b\060\uff9b\061\uff9b\064\uff9b" +
    "\065\uff9b\001\002\000\020\025\266\033\121\034\120\035" +
    "\113\036\114\037\112\040\115\001\002\000\004\035\265" +
    "\001\002\000\004\066\uffd4\001\002\000\004\066\264\001" +
    "\002\000\052\005\uff99\012\uff99\013\uff99\025\uff99\026\uff99" +
    "\027\uff99\030\uff99\031\uff99\032\uff99\035\uff99\040\uff99\046" +
    "\uff99\050\uff99\052\uff99\055\uff99\056\uff99\060\uff99\061\uff99" +
    "\064\uff99\065\uff99\001\002\000\052\005\uffe8\012\uffe8\013" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\035\uffe8\040\uffe8\046\uffe8\050\uffe8\052\uffe8\055\uffe8\056" +
    "\uffe8\060\uffe8\061\uffe8\064\uffe8\065\uffe8\001\002\000\004" +
    "\041\236\001\002\000\010\044\uffde\063\234\066\uffde\001" +
    "\002\000\014\026\015\027\017\030\023\031\022\032\020" +
    "\001\002\000\004\066\ufff1\001\002\000\004\066\uffd8\001" +
    "\002\000\052\005\051\012\075\013\052\025\030\026\015" +
    "\027\017\030\023\031\022\032\020\035\040\040\027\046" +
    "\077\050\071\052\067\055\050\056\046\060\061\061\053" +
    "\064\043\065\055\001\002\000\006\025\uff83\035\uff83\001" +
    "\002\000\052\005\uffe7\012\uffe7\013\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\035\uffe7\040\uffe7\046" +
    "\uffe7\050\uffe7\052\uffe7\055\uffe7\056\uffe7\060\uffe7\061\uffe7" +
    "\064\uffe7\065\uffe7\001\002\000\004\002\ufffc\001\002\000" +
    "\052\005\uffe6\012\uffe6\013\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\032\uffe6\035\uffe6\040\uffe6\046\uffe6\050" +
    "\uffe6\052\uffe6\055\uffe6\056\uffe6\060\uffe6\061\uffe6\064\uffe6" +
    "\065\uffe6\001\002\000\010\062\110\063\uffd3\066\uffd3\001" +
    "\002\000\004\025\104\001\002\000\006\063\uffcf\066\uffcf" +
    "\001\002\000\012\043\105\062\ufff6\063\ufff6\066\ufff6\001" +
    "\002\000\004\035\106\001\002\000\004\044\107\001\002" +
    "\000\006\063\uffd9\066\uffd9\001\002\000\024\024\124\033" +
    "\121\034\120\035\113\036\114\037\112\040\115\041\116" +
    "\045\123\001\002\000\006\063\uffd2\066\uffd2\001\002\000" +
    "\010\042\uff8e\063\uff8e\066\uff8e\001\002\000\010\042\uff93" +
    "\063\uff93\066\uff93\001\002\000\010\042\uff92\063\uff92\066" +
    "\uff92\001\002\000\010\042\uff91\063\uff91\066\uff91\001\002" +
    "\000\012\025\160\035\134\036\135\041\116\001\002\000" +
    "\006\063\uffd0\066\uffd0\001\002\000\010\042\uff90\063\uff90" +
    "\066\uff90\001\002\000\010\042\uff8f\063\uff8f\066\uff8f\001" +
    "\002\000\014\022\146\023\147\042\uff9d\063\uff9d\066\uff9d" +
    "\001\002\000\022\024\142\025\130\033\140\034\136\035" +
    "\134\036\135\041\116\045\123\001\002\000\004\045\126" +
    "\001\002\000\006\063\uffd1\066\uffd1\001\002\000\022\024" +
    "\142\025\130\033\140\034\136\035\134\036\135\041\116" +
    "\045\123\001\002\000\010\022\uffa6\023\uffa6\046\uffa6\001" +
    "\002\000\026\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b" +
    "\021\uff8b\022\uffa8\023\uffa8\041\uffe5\046\uffa8\001\002\000" +
    "\010\022\uffaa\023\uffaa\046\uffaa\001\002\000\004\046\173" +
    "\001\002\000\024\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020" +
    "\uff8a\021\uff8a\022\uffa4\023\uffa4\046\uffa4\001\002\000\042" +
    "\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\014" +
    "\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d" +
    "\023\uff8d\042\uff8d\046\uff8d\001\002\000\042\004\uff8c\005" +
    "\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\014\uff8c\015\uff8c" +
    "\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\042" +
    "\uff8c\046\uff8c\001\002\000\010\022\uff78\023\uff78\046\uff78" +
    "\001\002\000\016\014\157\015\153\016\154\017\151\020" +
    "\155\021\156\001\002\000\010\022\uff79\023\uff79\046\uff79" +
    "\001\002\000\010\022\uffa2\023\uffa2\046\uffa2\001\002\000" +
    "\020\025\165\033\140\034\136\035\134\036\135\041\116" +
    "\045\126\001\002\000\016\014\157\015\153\016\154\017" +
    "\151\020\155\021\156\001\002\000\010\022\146\023\147" +
    "\046\uffa1\001\002\000\022\024\142\025\130\033\140\034" +
    "\136\035\134\036\135\041\116\045\123\001\002\000\022" +
    "\024\uff7b\025\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\041" +
    "\uff7b\045\uff7b\001\002\000\022\024\uff7a\025\uff7a\033\uff7a" +
    "\034\uff7a\035\uff7a\036\uff7a\041\uff7a\045\uff7a\001\002\000" +
    "\004\046\uffa0\001\002\000\012\025\uff81\035\uff81\036\uff81" +
    "\041\uff81\001\002\000\012\025\160\035\134\036\135\041" +
    "\116\001\002\000\012\025\uff7e\035\uff7e\036\uff7e\041\uff7e" +
    "\001\002\000\012\025\uff7d\035\uff7d\036\uff7d\041\uff7d\001" +
    "\002\000\012\025\uff7c\035\uff7c\036\uff7c\041\uff7c\001\002" +
    "\000\012\025\uff7f\035\uff7f\036\uff7f\041\uff7f\001\002\000" +
    "\012\025\uff80\035\uff80\036\uff80\041\uff80\001\002\000\030" +
    "\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\022" +
    "\uff8b\023\uff8b\041\uffe5\042\uff8b\046\uff8b\001\002\000\010" +
    "\022\uffab\023\uffab\046\uffab\001\002\000\026\004\uff8a\005" +
    "\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\022\uff8a\023\uff8a" +
    "\042\uff8a\046\uff8a\001\002\000\010\022\uffad\023\uffad\046" +
    "\uffad\001\002\000\010\022\uffa5\023\uffa5\046\uffa5\001\002" +
    "\000\026\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021" +
    "\uff8b\022\uffa7\023\uffa7\041\uffe5\046\uffa7\001\002\000\010" +
    "\022\uffa9\023\uffa9\046\uffa9\001\002\000\024\014\uff8a\015" +
    "\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uffa3\023\uffa3" +
    "\046\uffa3\001\002\000\012\025\160\035\134\036\135\041" +
    "\116\001\002\000\010\022\uffac\023\uffac\046\uffac\001\002" +
    "\000\010\022\uffae\023\uffae\046\uffae\001\002\000\016\022" +
    "\uff9e\023\uff9e\042\uff9e\046\uff9e\063\uff9e\066\uff9e\001\002" +
    "\000\004\046\175\001\002\000\016\022\uff9f\023\uff9f\042" +
    "\uff9f\046\uff9f\063\uff9f\066\uff9f\001\002\000\006\024\124" +
    "\045\123\001\002\000\010\042\uff9c\063\uff9c\066\uff9c\001" +
    "\002\000\010\004\210\005\211\042\233\001\002\000\020" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\042" +
    "\uffb1\001\002\000\020\004\uffb3\005\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\011\231\042\uffb3\001\002\000\016\004\217\005" +
    "\220\006\216\007\221\010\222\042\uffba\001\002\000\020" +
    "\004\205\005\206\006\uffb0\007\uffb0\010\uffb0\011\uffb0\042" +
    "\uffb0\001\002\000\012\025\160\035\134\036\135\041\116" +
    "\001\002\000\012\025\160\035\134\036\135\041\116\001" +
    "\002\000\010\004\uffb7\005\uffb7\042\uffb7\001\002\000\012" +
    "\025\uffbe\035\uffbe\036\uffbe\041\uffbe\001\002\000\012\025" +
    "\160\035\134\036\135\041\116\001\002\000\010\004\uffb9" +
    "\005\uffb9\042\uffb9\001\002\000\012\025\160\035\134\036" +
    "\135\041\116\001\002\000\010\004\uffbd\005\uffbd\042\uffbd" +
    "\001\002\000\010\004\uffbb\005\uffbb\042\uffbb\001\002\000" +
    "\012\025\160\035\134\036\135\041\116\001\002\000\012" +
    "\025\160\035\134\036\135\041\116\001\002\000\012\025" +
    "\160\035\134\036\135\041\116\001\002\000\012\025\160" +
    "\035\134\036\135\041\116\001\002\000\012\025\160\035" +
    "\134\036\135\041\116\001\002\000\016\004\uffb4\005\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\042\uffb4\001\002\000\020\004" +
    "\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\042\uffb0" +
    "\001\002\000\016\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010" +
    "\uffb5\042\uffb5\001\002\000\016\004\uffb8\005\uffb8\006\216" +
    "\007\221\010\222\042\uffb8\001\002\000\016\004\uffbc\005" +
    "\uffbc\006\216\007\221\010\222\042\uffbc\001\002\000\016" +
    "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\042\uffb6\001" +
    "\002\000\012\025\160\035\134\036\135\041\116\001\002" +
    "\000\020\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011" +
    "\uffb2\042\uffb2\001\002\000\046\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\014\uffaf\015\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\042\uffaf\046\uffaf" +
    "\063\uffaf\066\uffaf\001\002\000\006\035\040\040\027\001" +
    "\002\000\006\044\uffdd\066\uffdd\001\002\000\006\024\124" +
    "\045\123\001\002\000\004\042\240\001\002\000\004\045" +
    "\241\001\002\000\050\005\051\012\075\013\052\025\030" +
    "\026\015\027\017\030\023\031\022\032\020\035\040\040" +
    "\027\050\071\052\067\055\050\056\046\060\061\061\053" +
    "\064\043\065\055\001\002\000\052\005\051\012\075\013" +
    "\052\025\030\026\015\027\017\030\023\031\022\032\020" +
    "\035\040\040\027\046\243\050\071\052\067\055\050\056" +
    "\046\060\061\061\053\064\043\065\055\001\002\000\006" +
    "\053\245\054\244\001\002\000\004\045\260\001\002\000" +
    "\004\041\251\001\002\000\052\005\uffcc\012\uffcc\013\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\035" +
    "\uffcc\040\uffcc\046\uffcc\050\uffcc\052\uffcc\055\uffcc\056\uffcc" +
    "\060\uffcc\061\uffcc\064\uffcc\065\uffcc\001\002\000\052\005" +
    "\uffcd\012\uffcd\013\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\035\uffcd\040\uffcd\046\uffcd\050\uffcd\052" +
    "\uffcd\055\uffcd\056\uffcd\060\uffcd\061\uffcd\064\uffcd\065\uffcd" +
    "\001\002\000\052\005\uffce\012\uffce\013\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\035\uffce\040\uffce" +
    "\046\uffce\050\uffce\052\uffce\055\uffce\056\uffce\060\uffce\061" +
    "\uffce\064\uffce\065\uffce\001\002\000\006\024\124\045\123" +
    "\001\002\000\004\042\253\001\002\000\004\045\254\001" +
    "\002\000\050\005\051\012\075\013\052\025\030\026\015" +
    "\027\017\030\023\031\022\032\020\035\040\040\027\050" +
    "\071\052\067\055\050\056\046\060\061\061\053\064\043" +
    "\065\055\001\002\000\052\005\051\012\075\013\052\025" +
    "\030\026\015\027\017\030\023\031\022\032\020\035\040" +
    "\040\027\046\256\050\071\052\067\055\050\056\046\060" +
    "\061\061\053\064\043\065\055\001\002\000\006\053\245" +
    "\054\244\001\002\000\052\005\uffcb\012\uffcb\013\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\035\uffcb" +
    "\040\uffcb\046\uffcb\050\uffcb\052\uffcb\055\uffcb\056\uffcb\060" +
    "\uffcb\061\uffcb\064\uffcb\065\uffcb\001\002\000\050\005\051" +
    "\012\075\013\052\025\030\026\015\027\017\030\023\031" +
    "\022\032\020\035\040\040\027\050\071\052\067\055\050" +
    "\056\046\060\061\061\053\064\043\065\055\001\002\000" +
    "\052\005\051\012\075\013\052\025\030\026\015\027\017" +
    "\030\023\031\022\032\020\035\040\040\027\046\262\050" +
    "\071\052\067\055\050\056\046\060\061\061\053\064\043" +
    "\065\055\001\002\000\004\066\263\001\002\000\052\005" +
    "\uffca\012\uffca\013\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\035\uffca\040\uffca\046\uffca\050\uffca\052" +
    "\uffca\055\uffca\056\uffca\060\uffca\061\uffca\064\uffca\065\uffca" +
    "\001\002\000\052\005\uffe9\012\uffe9\013\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\035\uffe9\040\uffe9" +
    "\046\uffe9\050\uffe9\052\uffe9\055\uffe9\056\uffe9\060\uffe9\061" +
    "\uffe9\064\uffe9\065\uffe9\001\002\000\004\066\uffc0\001\002" +
    "\000\004\066\uffeb\001\002\000\004\066\uffea\001\002\000" +
    "\006\042\uffc3\066\uffc3\001\002\000\004\025\272\001\002" +
    "\000\004\042\273\001\002\000\004\066\uffc7\001\002\000" +
    "\004\066\uffbf\001\002\000\004\050\071\001\002\000\004" +
    "\063\277\001\002\000\006\024\124\045\123\001\002\000" +
    "\004\063\301\001\002\000\006\012\075\013\052\001\002" +
    "\000\004\042\304\001\002\000\004\025\270\001\002\000" +
    "\004\045\305\001\002\000\050\005\051\012\075\013\052" +
    "\025\030\026\015\027\017\030\023\031\022\032\020\035" +
    "\040\040\027\050\071\052\067\055\050\056\046\060\061" +
    "\061\053\064\043\065\055\001\002\000\052\005\051\012" +
    "\075\013\052\025\030\026\015\027\017\030\023\031\022" +
    "\032\020\035\040\040\027\046\307\050\071\052\067\055" +
    "\050\056\046\060\061\061\053\064\043\065\055\001\002" +
    "\000\004\066\310\001\002\000\052\005\uffc8\012\uffc8\013" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\035\uffc8\040\uffc8\046\uffc8\050\uffc8\052\uffc8\055\uffc8\056" +
    "\uffc8\060\uffc8\061\uffc8\064\uffc8\065\uffc8\001\002\000\004" +
    "\043\105\001\002\000\050\005\051\012\075\013\052\025" +
    "\030\026\015\027\017\030\023\031\022\032\020\035\040" +
    "\040\027\050\071\052\067\055\050\056\046\060\061\061" +
    "\053\064\043\065\055\001\002\000\052\005\051\012\075" +
    "\013\052\025\030\026\015\027\017\030\023\031\022\032" +
    "\020\035\040\040\027\046\314\050\071\052\067\055\050" +
    "\056\046\060\061\061\053\064\043\065\055\001\002\000" +
    "\004\057\315\001\002\000\004\041\316\001\002\000\006" +
    "\024\124\045\123\001\002\000\004\042\320\001\002\000" +
    "\004\066\321\001\002\000\052\005\uffc9\012\uffc9\013\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\035" +
    "\uffc9\040\uffc9\046\uffc9\050\uffc9\052\uffc9\055\uffc9\056\uffc9" +
    "\060\uffc9\061\uffc9\064\uffc9\065\uffc9\001\002\000\012\025" +
    "\323\035\324\036\327\037\326\001\002\000\004\042\uff84" +
    "\001\002\000\004\042\uff87\001\002\000\004\042\330\001" +
    "\002\000\004\042\uff85\001\002\000\004\042\uff86\001\002" +
    "\000\004\066\uffc6\001\002\000\022\025\333\033\121\034" +
    "\120\035\113\036\114\037\112\040\115\042\336\001\002" +
    "\000\006\042\uffe1\063\uffe1\001\002\000\006\042\uffe2\063" +
    "\uffe2\001\002\000\006\042\337\063\340\001\002\000\006" +
    "\042\uffe0\063\uffe0\001\002\000\044\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\042\uffe3\046" +
    "\uffe3\066\uffe3\001\002\000\044\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\042\uffe4\046\uffe4" +
    "\066\uffe4\001\002\000\020\025\333\033\121\034\120\035" +
    "\113\036\114\037\112\040\115\001\002\000\006\042\uffdf" +
    "\063\uffdf\001\002\000\006\035\040\040\027\001\002\000" +
    "\004\066\uffdb\001\002\000\004\043\350\001\002\000\004" +
    "\035\346\001\002\000\004\044\347\001\002\000\006\062" +
    "\uffdc\066\uffdc\001\002\000\006\035\040\040\027\001\002" +
    "\000\004\044\352\001\002\000\004\066\uffda\001\002\000" +
    "\004\041\ufffb\001\002\000\004\002\ufffd\001\002\000\004" +
    "\051\ufff7\001\002\000\016\026\015\027\017\030\023\031" +
    "\022\032\020\042\362\001\002\000\006\042\367\063\370" +
    "\001\002\000\004\025\366\001\002\000\006\042\ufff5\063" +
    "\ufff5\001\002\000\004\045\363\001\002\000\050\005\051" +
    "\012\075\013\052\025\030\026\015\027\017\030\023\031" +
    "\022\032\020\035\040\040\027\050\071\052\067\055\050" +
    "\056\046\060\061\061\053\064\043\065\055\001\002\000" +
    "\052\005\051\012\075\013\052\025\030\026\015\027\017" +
    "\030\023\031\022\032\020\035\040\040\027\046\365\050" +
    "\071\052\067\055\050\056\046\060\061\061\053\064\043" +
    "\065\055\001\002\000\004\051\ufffa\001\002\000\006\042" +
    "\ufff6\063\ufff6\001\002\000\004\045\372\001\002\000\014" +
    "\026\015\027\017\030\023\031\022\032\020\001\002\000" +
    "\006\042\ufff4\063\ufff4\001\002\000\050\005\051\012\075" +
    "\013\052\025\030\026\015\027\017\030\023\031\022\032" +
    "\020\035\040\040\027\050\071\052\067\055\050\056\046" +
    "\060\061\061\053\064\043\065\055\001\002\000\052\005" +
    "\051\012\075\013\052\025\030\026\015\027\017\030\023" +
    "\031\022\032\020\035\040\040\027\046\374\050\071\052" +
    "\067\055\050\056\046\060\061\061\053\064\043\065\055" +
    "\001\002\000\004\051\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\372\000\006\004\004\070\003\001\001\000\014\005" +
    "\010\006\006\007\012\010\011\011\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\353" +
    "\010\011\011\354\001\001\000\004\002\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\002\046" +
    "\014\073\015\075\020\034\021\040\022\062\023\035\024" +
    "\032\025\055\026\067\027\072\030\033\031\071\033\057" +
    "\036\044\037\064\040\065\041\043\042\053\044\056\045" +
    "\031\046\030\047\061\050\036\051\041\064\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\101\013" +
    "\100\027\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\002\046\015\077\020\034\021\040\022\062\023" +
    "\035\024\032\025\055\026\067\027\072\030\033\031\071" +
    "\033\057\036\044\037\064\040\065\041\043\042\053\044" +
    "\056\045\031\046\030\047\061\050\036\051\041\064\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\110\053\124" +
    "\062\121\063\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\020\161\021\040\052\177\053\203\054\200\066" +
    "\202\067\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\175\001\001\000\024\020" +
    "\132\021\040\053\142\054\136\057\130\060\143\061\173" +
    "\062\140\065\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\020\132\021\040\053\142\054\136\057\130" +
    "\060\143\061\131\062\140\065\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\020\166\021\040\053\142\054" +
    "\136\057\165\065\163\001\001\000\004\055\151\001\001" +
    "\000\004\056\144\001\001\000\024\020\132\021\040\053" +
    "\142\054\136\057\130\060\143\061\147\062\140\065\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\161\021\040\053\160" +
    "\054\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\161\021\040\053\170\054" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\062" +
    "\121\063\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\020\161\021\040\052\214\053\203" +
    "\054\200\066\202\067\201\001\001\000\020\020\161\021" +
    "\040\052\206\053\203\054\200\066\202\067\201\001\001" +
    "\000\002\001\001\000\004\071\212\001\001\000\020\020" +
    "\161\021\040\052\211\053\203\054\200\066\202\067\201" +
    "\001\001\000\002\001\001\000\020\020\161\021\040\052" +
    "\213\053\203\054\200\066\202\067\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\020\161\021\040\053" +
    "\223\054\200\066\227\067\201\001\001\000\016\020\161" +
    "\021\040\053\223\054\200\066\226\067\201\001\001\000" +
    "\016\020\161\021\040\053\223\054\200\066\225\067\201" +
    "\001\001\000\016\020\161\021\040\053\223\054\200\066" +
    "\224\067\201\001\001\000\016\020\161\021\040\053\223" +
    "\054\200\066\222\067\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\161\021\040\053" +
    "\223\054\200\067\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\234\026\067\001\001\000\002\001" +
    "\001\000\006\062\121\063\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\002\046\014\241\015\075\020" +
    "\034\021\040\022\062\023\035\024\032\025\055\026\067" +
    "\027\072\030\033\031\071\033\057\036\044\037\064\040" +
    "\065\041\043\042\053\044\056\045\031\046\030\047\061" +
    "\050\036\051\041\064\063\001\001\000\064\002\046\015" +
    "\077\020\034\021\040\022\062\023\035\024\032\025\055" +
    "\026\067\027\072\030\033\031\071\033\057\036\044\037" +
    "\064\040\065\041\043\042\053\044\056\045\031\046\030" +
    "\047\061\050\036\051\041\064\063\001\001\000\010\032" +
    "\245\034\247\035\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\062\121\063\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\002\046\014\254\015\075\020" +
    "\034\021\040\022\062\023\035\024\032\025\055\026\067" +
    "\027\072\030\033\031\071\033\057\036\044\037\064\040" +
    "\065\041\043\042\053\044\056\045\031\046\030\047\061" +
    "\050\036\051\041\064\063\001\001\000\064\002\046\015" +
    "\077\020\034\021\040\022\062\023\035\024\032\025\055" +
    "\026\067\027\072\030\033\031\071\033\057\036\044\037" +
    "\064\040\065\041\043\042\053\044\056\045\031\046\030" +
    "\047\061\050\036\051\041\064\063\001\001\000\010\032" +
    "\256\034\247\035\246\001\001\000\002\001\001\000\066" +
    "\002\046\014\260\015\075\020\034\021\040\022\062\023" +
    "\035\024\032\025\055\026\067\027\072\030\033\031\071" +
    "\033\057\036\044\037\064\040\065\041\043\042\053\044" +
    "\056\045\031\046\030\047\061\050\036\051\041\064\063" +
    "\001\001\000\064\002\046\015\077\020\034\021\040\022" +
    "\062\023\035\024\032\025\055\026\067\027\072\030\033" +
    "\031\071\033\057\036\044\037\064\040\065\041\043\042" +
    "\053\044\056\045\031\046\030\047\061\050\036\051\041" +
    "\064\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\275" +
    "\001\001\000\002\001\001\000\006\062\121\063\277\001" +
    "\001\000\002\001\001\000\006\044\302\046\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\002\046\014\305\015\075\020\034\021\040\022\062" +
    "\023\035\024\032\025\055\026\067\027\072\030\033\031" +
    "\071\033\057\036\044\037\064\040\065\041\043\042\053" +
    "\044\056\045\031\046\030\047\061\050\036\051\041\064" +
    "\063\001\001\000\064\002\046\015\077\020\034\021\040" +
    "\022\062\023\035\024\032\025\055\026\067\027\072\030" +
    "\033\031\071\033\057\036\044\037\064\040\065\041\043" +
    "\042\053\044\056\045\031\046\030\047\061\050\036\051" +
    "\041\064\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\002\046\014\312\015\075\020" +
    "\034\021\040\022\062\023\035\024\032\025\055\026\067" +
    "\027\072\030\033\031\071\033\057\036\044\037\064\040" +
    "\065\041\043\042\053\044\056\045\031\046\030\047\061" +
    "\050\036\051\041\064\063\001\001\000\064\002\046\015" +
    "\077\020\034\021\040\022\062\023\035\024\032\025\055" +
    "\026\067\027\072\030\033\031\071\033\057\036\044\037" +
    "\064\040\065\041\043\042\053\044\056\045\031\046\030" +
    "\047\061\050\036\051\041\064\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\062\121\063\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\324\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\331\016\334\017\333\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\331\016\340\001\001\000\002\001\001\000\004\026" +
    "\342\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\350\026\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\357\012\356\013\360\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\002\046\014\363\015\075\020\034\021\040\022\062" +
    "\023\035\024\032\025\055\026\067\027\072\030\033\031" +
    "\071\033\057\036\044\037\064\040\065\041\043\042\053" +
    "\044\056\045\031\046\030\047\061\050\036\051\041\064" +
    "\063\001\001\000\064\002\046\015\077\020\034\021\040" +
    "\022\062\023\035\024\032\025\055\026\067\027\072\030" +
    "\033\031\071\033\057\036\044\037\064\040\065\041\043" +
    "\042\053\044\056\045\031\046\030\047\061\050\036\051" +
    "\041\064\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\357\013\370\001\001\000" +
    "\002\001\001\000\066\002\046\014\372\015\075\020\034" +
    "\021\040\022\062\023\035\024\032\025\055\026\067\027" +
    "\072\030\033\031\071\033\057\036\044\037\064\040\065" +
    "\041\043\042\053\044\056\045\031\046\030\047\061\050" +
    "\036\051\041\064\063\001\001\000\064\002\046\015\077" +
    "\020\034\021\040\022\062\023\035\024\032\025\055\026" +
    "\067\027\072\030\033\031\071\033\057\036\044\037\064" +
    "\040\065\041\043\042\053\044\056\045\031\046\030\047" +
    "\061\050\036\051\041\064\063\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    Lexer lex;

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex=lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //Nombre y lista de identificadores de la funcion
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<String, ArrayList<String>>();
    //Funcion actual
    String currentHash;

    //Funcion para imprimir tabla de simbolos
    public void imprimirTablaSimbolos(){
        for (String key: listaTablasSimbolos.keySet()){
            System.out.println("Tabla de simbolo : " + key);
            System.out.println("Valores : ");
            for (String item : listaTablasSimbolos.get(key)){
                System.out.println(item);
            }
            System.out.println("");
        }

    }
    

    public void hola(){
        System.out.println("Hola");
    }
    public void adios(){
            System.out.println("Adios");
        }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

        System.out.println("Inicio de parseo");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // navidad ::= NT$0 navidadAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        //imprimirTablaSimbolos();
        System.out.println("Fin de parseo");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // navidadAux ::= mainNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidadAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // navidadAux ::= bolsanavidena mainNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidadAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mainNavidad ::= FUNCTION MAIN ABRECUENTO CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainNavidad",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bolsaAux ::= FUNCTION tsantaclaus PERSONA 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsaAux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bolsanavidenaAux ::= bolsaAux ABRECUENTO CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenaAux",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bolsanavidenaAux ::= bolsaAux ABRECUENTO listaDeRegalos CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenaAux",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bolsanavidena ::= bolsanavidenaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidena",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bolsanavidena ::= bolsanavidena bolsanavidenaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidena",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listaDeRegalosAux ::= tsantaclaus PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalosAux",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listaDeRegalos ::= listaDeRegalosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listaDeRegalos ::= listaDeRegalos BASTON listaDeRegalosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // adornoAux ::= llamadaASanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // adornoAux ::= infoTrineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // adornoAux ::= decorarGalleta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // adornoAux ::= leerCarta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // adornoAux ::= escribirCarta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // adornoAux ::= decoracionI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // adornoAux ::= decoracionesF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // adornoAux ::= CORTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // adornoAux ::= ENVIA PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // adornoAux ::= ENVIA tlsantaclaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // adorno ::= adornoAux FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // adorno ::= luces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // villancicos ::= adorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("villancicos",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // villancicos ::= villancicos adorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("villancicos",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // llamadaASantaAux ::= PERSONA 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaASantaAux",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // llamadaASanta ::= llamadaASantaAux ABRECUENTO listaDeTamales CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaASanta",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // llamadaASanta ::= llamadaASantaAux ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaASanta",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listaDeTamalesAux ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamalesAux",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listaDeTamalesAux ::= tlsantaclaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamalesAux",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listaDeTamales ::= listaDeTamalesAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamales",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listaDeTamales ::= listaDeTamales BASTON listaDeTamalesAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamales",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listaAmigos ::= SantaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaAmigos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listaAmigos ::= SantaArreglo BASTON listaAmigos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaAmigos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // acceso_trineo ::= PERSONA ABREEMPAQUE l_SANTA_CLAUS CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_trineo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // llenar_trineo ::= acceso_trineo ENTREGA SantaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llenar_trineo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // colocar_trineo ::= PERSONA ENTREGA ABREEMPAQUE listaAmigos CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("colocar_trineo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // trineo ::= tsantaclaus PERSONA ABREEMPAQUE l_SANTA_CLAUS CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("trineo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // infoTrineo ::= trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // infoTrineo ::= llenar_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // infoTrineo ::= acceso_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // infoTrineo ::= colocar_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // infoTrineo ::= listaAmigos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // decorarGalleta ::= LOCAL listaDeRegalosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // decorarGalleta ::= LOCAL listaDeRegalosAux ENTREGA tlsantaclaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // decorarGalleta ::= LOCAL listaDeRegalosAux ENTREGA whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // decorarGalleta ::= LOCAL listaDeRegalosAux ENTREGA gingerBread 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // decorarGalleta ::= LOCAL trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ponerLuces ::= elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ponerLuces",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ponerLuces ::= else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ponerLuces",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // if ::= ELFO ABRECUENTO gingerBread CIERRACUENTO ABREREGALO villancicos CIERRAREGALO ponerLuces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // elif ::= HADA ABRECUENTO gingerBread CIERRACUENTO ABREREGALO villancicos CIERRAREGALO ponerLuces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // else ::= DUENDE ABREREGALO villancicos CIERRAREGALO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // do_until ::= HACE ABREREGALO villancicos CIERRAREGALO REVISA ABRECUENTO gingerBread CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_until",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // for ::= ENVUELVE ABRECUENTO decorarGalleta BASTON gingerBread BASTON decoracion CIERRACUENTO ABREREGALO villancicos CIERRAREGALO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // leerCarta ::= ESCUCHA ABRECUENTO PERSONA CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leerCarta",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // escribirCarta ::= NARRA ABRECUENTO mensaje CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribirCarta",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // decoracionesF ::= decoracionF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesF",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // decoracionesF ::= decoracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesF",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // decoracion ::= ornamentosUnicos PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // decoracionIAux ::= ornamentosUnicos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionIAux",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // decoracionIAux ::= TURENO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionIAux",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // decoracionI ::= decoracionIAux l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionI",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // decoracionF ::= TURENO l_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionF",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$1 ::= 
            {
              Object RESULT =null;
		int rfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
System.out.println(rf);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CindyLuWho ::= CindyLuWho RODOLFO NT$1 CindyLuWho 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CindyLuWho ::= CindyLuWhoS RODOLFO CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CindyLuWho ::= whoVille RODOLFO CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CindyLuWho ::= CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CindyLuWho ::= CindyLuWho TURENO CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CindyLuWho ::= CindyLuWhoS TURENO CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CindyLuWho ::= whoVille TURENO CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CindyLuWhoS ::= CindyLuWhoS COMETA CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CindyLuWhoS ::= CindyLuWhoS DASHER CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CindyLuWhoS ::= CindyLuWhoS DANCER CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CindyLuWhoS ::= CindyLuWhoT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CindyLuWhoT ::= CindyLuWhoT PRANCER CindyLuWhoT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoT",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CindyLuWhoT ::= SantaMate 
            {
              Object RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(sm);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoT",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CindyLuWhoT ::= whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoT",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // whoVille ::= ABRECUENTO CindyLuWho CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whoVille",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sugar ::= SantaMate workshop SantaMate 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sugar ::= whoVille workshop SantaMate 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sugar ::= SantaMate workshop whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sugar ::= whoVille workshop whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // candy ::= sugar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // candy ::= BALTAZAR sugar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // candy ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // candy ::= BALTAZAR PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // candy ::= naughtyOrNice 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // candy ::= BALTAZAR naughtyOrNice 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // candy ::= llamadaASanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // candy ::= BALTAZAR llamadaASanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // candy ::= candyBox 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // candyCane ::= candy 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyCane",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // candyCane ::= candy yellowSnow candyCane 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyCane",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // candyBox ::= ABREREGALO candyCane CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyBox",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // candyBox ::= BALTAZAR ABREREGALO candyCane CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyBox",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // gingerBread ::= candyBox 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gingerBread",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // gingerBread ::= candyBox yellowSnow gingerBread 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gingerBread",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // luces ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // luces ::= do_until 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // luces ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tsantaclaus ::= FATHER_CHRISTMAS 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tsantaclaus ::= SANTA_CLAUS 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tsantaclaus ::= PAPA_NOEL 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tsantaclaus ::= SAN_NICOLAS 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tsantaclaus ::= SANTA 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tlsantaclaus ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tlsantaclaus ::= l_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tlsantaclaus ::= l_SANTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tlsantaclaus ::= l_TFATHER_CHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tlsantaclaus ::= l_FFATHER_CHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tlsantaclaus ::= l_SAN_NICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SantaMate ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SantaMate ::= l_PAPA_NOEL 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SantaMate ::= PERSONA 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SantaMate ::= llamadaASanta 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SantaArreglo ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaArreglo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SantaArreglo ::= l_SANTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaArreglo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // mensaje ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // mensaje ::= l_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // mensaje ::= l_SAN_NICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // mensaje ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ornamentosUnicos ::= QUIEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentosUnicos",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ornamentosUnicos ::= GRINCH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentosUnicos",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // workshop ::= SUGARPLUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // workshop ::= SNOWBALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // workshop ::= WUNORSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // workshop ::= BUSHY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // workshop ::= PEPPER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // workshop ::= SHINNY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // yellowSnow ::= MELCHOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yellowSnow",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // yellowSnow ::= GASPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yellowSnow",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // naughtyOrNice ::= l_FFATHER_CHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("naughtyOrNice",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // naughtyOrNice ::= l_TFATHER_CHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("naughtyOrNice",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
