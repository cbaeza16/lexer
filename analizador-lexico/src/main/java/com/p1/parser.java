
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.p1;

import java_cup.runtime.*;
import java.lang.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\004\003\000\002\004" +
    "\004\000\002\005\011\000\002\007\012\000\002\007\013" +
    "\000\002\006\003\000\002\006\004\000\002\011\004\000" +
    "\002\010\003\000\002\010\005\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\004\000\002\013\003\000" +
    "\002\013\003\000\002\012\003\000\002\012\004\000\002" +
    "\016\006\000\002\014\003\000\002\014\003\000\002\015" +
    "\003\000\002\015\005\000\002\017\003\000\002\017\005" +
    "\000\002\020\006\000\002\021\007\000\002\022\007\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\005\000\002\024\007\000\002\024" +
    "\005\000\002\025\003\000\002\025\003\000\002\026\011" +
    "\000\002\027\011\000\002\030\006\000\002\031\012\000" +
    "\002\032\013\000\002\034\007\000\002\035\007\000\002" +
    "\040\003\000\002\040\003\000\002\041\003\000\002\041" +
    "\003\000\002\042\004\000\002\043\003\000\002\043\003" +
    "\000\002\044\004\000\002\045\004\000\002\047\003\000" +
    "\002\047\005\000\002\047\005\000\002\047\005\000\002" +
    "\051\005\000\002\050\003\000\002\050\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\005\000\002\054\005" +
    "\000\002\057\003\000\002\057\003\000\002\057\005\000" +
    "\002\057\005\000\002\056\003\000\002\056\005\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\037\003\000\002\037\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\004\052\010\001\002\000\004\052\ufffb\001" +
    "\002\000\004\002\000\001\002\000\004\002\331\001\002" +
    "\000\004\052\010\001\002\000\016\027\011\030\014\031" +
    "\017\032\016\033\015\050\013\001\002\000\004\026\uffb1" +
    "\001\002\000\004\026\307\001\002\000\004\042\020\001" +
    "\002\000\004\026\uffb0\001\002\000\004\026\uffad\001\002" +
    "\000\004\026\uffae\001\002\000\004\026\uffaf\001\002\000" +
    "\004\043\021\001\002\000\004\046\022\001\002\000\062" +
    "\006\054\013\101\014\055\026\025\027\011\030\014\031" +
    "\017\032\016\033\015\034\043\035\047\036\036\037\037" +
    "\040\040\041\024\042\060\051\074\053\072\056\052\057" +
    "\050\061\065\062\056\065\042\066\061\001\002\000\072" +
    "\006\uffb9\013\uffb9\014\uffb9\023\224\024\225\025\227\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\047" +
    "\uffb9\051\uffb9\053\uffb9\056\uffb9\057\uffb9\061\uffb9\062\uffb9" +
    "\065\uffb9\066\uffb9\001\002\000\074\006\uffaa\013\uffaa\014" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\045\uffaa\047\uffaa\051\uffaa\053\uffaa\056\uffaa" +
    "\057\uffaa\061\uffaa\062\uffaa\064\uffaa\065\uffaa\066\uffaa\067" +
    "\uffaa\001\002\000\030\015\uffa4\016\uffa4\017\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\023\224\024\225\025\227\042\271\044" +
    "\270\001\002\000\064\006\uffcb\013\uffcb\014\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\047\uffcb" +
    "\051\uffcb\053\uffcb\056\uffcb\057\uffcb\061\uffcb\062\uffcb\065" +
    "\uffcb\066\uffcb\001\002\000\064\006\uffef\013\uffef\014\uffef" +
    "\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef" +
    "\047\uffef\051\uffef\053\uffef\056\uffef\057\uffef\061\uffef\062" +
    "\uffef\065\uffef\066\uffef\001\002\000\064\006\uffb6\013\uffb6" +
    "\014\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\047\uffb6\051\uffb6\053\uffb6\056\uffb6\057\uffb6\061" +
    "\uffb6\062\uffb6\065\uffb6\066\uffb6\001\002\000\064\006\uffdd" +
    "\013\uffdd\014\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\047\uffdd\051\uffdd\053\uffdd\056\uffdd\057" +
    "\uffdd\061\uffdd\062\uffdd\065\uffdd\066\uffdd\001\002\000\064" +
    "\006\ufff5\013\ufff5\014\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\047\ufff5\051\ufff5\053\ufff5\056" +
    "\ufff5\057\ufff5\061\ufff5\062\ufff5\065\ufff5\066\ufff5\001\002" +
    "\000\064\006\ufff6\013\ufff6\014\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\042\ufff6\047\ufff6\051\ufff6\053" +
    "\ufff6\056\ufff6\057\ufff6\061\ufff6\062\ufff6\065\ufff6\066\ufff6" +
    "\001\002\000\064\006\ufff0\013\ufff0\014\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0" +
    "\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\047\ufff0\051" +
    "\ufff0\053\ufff0\056\ufff0\057\ufff0\061\ufff0\062\ufff0\065\ufff0" +
    "\066\ufff0\001\002\000\066\006\uffdc\013\uffdc\014\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\047" +
    "\uffdc\051\uffdc\053\uffdc\056\uffdc\057\uffdc\061\uffdc\062\uffdc" +
    "\063\263\065\uffdc\066\uffdc\001\002\000\102\006\uffac\013" +
    "\uffac\014\uffac\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\047\uffac\051\uffac\053\uffac\056\uffac\057\uffac\061" +
    "\uffac\062\uffac\064\uffac\065\uffac\066\uffac\001\002\000\102" +
    "\006\uffab\013\uffab\014\uffab\015\uffa5\016\uffa5\017\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\026\uffab\027\uffab\030\uffab\031\uffab" +
    "\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040" +
    "\uffab\041\uffab\042\uffab\047\uffab\051\uffab\053\uffab\056\uffab" +
    "\057\uffab\061\uffab\062\uffab\064\uffab\065\uffab\066\uffab\001" +
    "\002\000\074\006\uffa7\013\uffa7\014\uffa7\026\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\045\uffa7" +
    "\047\uffa7\051\uffa7\053\uffa7\056\uffa7\057\uffa7\061\uffa7\062" +
    "\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\001\002\000\064" +
    "\006\uffcc\013\uffcc\014\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\047\uffcc\051\uffcc\053\uffcc\056" +
    "\uffcc\057\uffcc\061\uffcc\062\uffcc\065\uffcc\066\uffcc\001\002" +
    "\000\004\042\253\001\002\000\074\006\uffa8\013\uffa8\014" +
    "\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\045\uffa8\047\uffa8\051\uffa8\053\uffa8\056\uffa8" +
    "\057\uffa8\061\uffa8\062\uffa8\064\uffa8\065\uffa8\066\uffa8\067" +
    "\uffa8\001\002\000\064\006\ufff3\013\ufff3\014\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\047\ufff3" +
    "\051\ufff3\053\ufff3\056\ufff3\057\ufff3\061\ufff3\062\ufff3\065" +
    "\ufff3\066\ufff3\001\002\000\070\006\uffe3\013\uffe3\014\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\045\uffe3\047\uffe3\051\uffe3\053\uffe3\056\uffe3\057\uffe3\061" +
    "\uffe3\062\uffe3\064\251\065\uffe3\066\uffe3\001\002\000\064" +
    "\006\uffb3\013\uffb3\014\uffb3\026\uffb3\027\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\047\uffb3\051\uffb3\053\uffb3\056" +
    "\uffb3\057\uffb3\061\uffb3\062\uffb3\065\uffb3\066\uffb3\001\002" +
    "\000\074\006\uffa9\013\uffa9\014\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\045\uffa9\047" +
    "\uffa9\051\uffa9\053\uffa9\056\uffa9\057\uffa9\061\uffa9\062\uffa9" +
    "\064\uffa9\065\uffa9\066\uffa9\067\uffa9\001\002\000\004\046" +
    "\242\001\002\000\004\026\241\001\002\000\004\042\231" +
    "\001\002\000\106\006\uffba\013\uffba\014\uffba\015\112\016" +
    "\106\017\107\020\104\021\110\022\111\023\224\024\225" +
    "\025\227\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\047\uffba\051\uffba\053\uffba\056\uffba\057\uffba\061" +
    "\uffba\062\uffba\065\uffba\066\uffba\001\002\000\006\036\uffc8" +
    "\037\223\001\002\000\006\026\uff9e\036\uff9e\001\002\000" +
    "\064\006\uffee\013\uffee\014\uffee\026\uffee\027\uffee\030\uffee" +
    "\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\041\uffee\042\uffee\047\uffee\051\uffee\053\uffee" +
    "\056\uffee\057\uffee\061\uffee\062\uffee\065\uffee\066\uffee\001" +
    "\002\000\064\006\ufff2\013\ufff2\014\ufff2\026\ufff2\027\ufff2" +
    "\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\047\ufff2\051\ufff2" +
    "\053\ufff2\056\ufff2\057\ufff2\061\ufff2\062\ufff2\065\ufff2\066" +
    "\ufff2\001\002\000\012\026\113\036\114\037\116\042\060" +
    "\001\002\000\004\042\174\001\002\000\064\006\uffec\013" +
    "\uffec\014\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec" +
    "\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\047\uffec\051\uffec\053\uffec\056\uffec\057\uffec" +
    "\061\uffec\062\uffec\065\uffec\066\uffec\001\002\000\006\026" +
    "\173\036\uffc9\001\002\000\064\006\uffb4\013\uffb4\014\uffb4" +
    "\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034" +
    "\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\047\uffb4\051\uffb4\053\uffb4\056\uffb4\057\uffb4\061\uffb4\062" +
    "\uffb4\065\uffb4\066\uffb4\001\002\000\004\026\172\001\002" +
    "\000\004\036\171\001\002\000\064\006\uffdb\013\uffdb\014" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\047\uffdb\051\uffdb\053\uffdb\056\uffdb\057\uffdb\061\uffdb" +
    "\062\uffdb\065\uffdb\066\uffdb\001\002\000\064\006\uffb2\013" +
    "\uffb2\014\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\047\uffb2\051\uffb2\053\uffb2\056\uffb2\057\uffb2" +
    "\061\uffb2\062\uffb2\065\uffb2\066\uffb2\001\002\000\064\006" +
    "\ufff1\013\ufff1\014\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\047\ufff1\051\ufff1\053\ufff1\056\ufff1" +
    "\057\ufff1\061\ufff1\062\ufff1\065\ufff1\066\ufff1\001\002\000" +
    "\004\042\146\001\002\000\064\006\uffeb\013\uffeb\014\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb" +
    "\047\uffeb\051\uffeb\053\uffeb\056\uffeb\057\uffeb\061\uffeb\062" +
    "\uffeb\065\uffeb\066\uffeb\001\002\000\014\027\011\030\014" +
    "\031\017\032\016\033\015\001\002\000\064\006\ufff4\013" +
    "\ufff4\014\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041" +
    "\ufff4\042\ufff4\047\ufff4\051\ufff4\053\ufff4\056\ufff4\057\ufff4" +
    "\061\ufff4\062\ufff4\065\ufff4\066\ufff4\001\002\000\100\005" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\047\uffc0\051\uffc0\053\uffc0\056\uffc0\057" +
    "\uffc0\061\uffc0\062\uffc0\065\uffc0\066\uffc0\001\002\000\064" +
    "\006\uffde\013\uffde\014\uffde\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\041\uffde\042\uffde\047\uffde\051\uffde\053\uffde\056" +
    "\uffde\057\uffde\061\uffde\062\uffde\065\uffde\066\uffde\001\002" +
    "\000\064\006\054\013\101\014\055\026\025\027\011\030" +
    "\014\031\017\032\016\033\015\034\043\035\047\036\036" +
    "\037\037\040\040\041\024\042\060\047\126\051\074\053" +
    "\072\056\052\057\050\061\065\062\056\065\042\066\061" +
    "\001\002\000\006\026\uff9f\036\uff9f\001\002\000\016\015" +
    "\112\016\106\017\107\020\104\021\110\022\111\001\002" +
    "\000\064\006\uffea\013\uffea\014\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\042\uffea\047\uffea\051\uffea\053" +
    "\uffea\056\uffea\057\uffea\061\uffea\062\uffea\065\uffea\066\uffea" +
    "\001\002\000\012\026\uff97\036\uff97\037\uff97\042\uff97\001" +
    "\002\000\012\026\113\036\114\037\116\042\117\001\002" +
    "\000\012\026\uff94\036\uff94\037\uff94\042\uff94\001\002\000" +
    "\012\026\uff93\036\uff93\037\uff93\042\uff93\001\002\000\012" +
    "\026\uff92\036\uff92\037\uff92\042\uff92\001\002\000\012\026" +
    "\uff95\036\uff95\037\uff95\042\uff95\001\002\000\012\026\uff96" +
    "\036\uff96\037\uff96\042\uff96\001\002\000\122\005\uffa4\006" +
    "\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4" +
    "\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023" +
    "\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\047\uffa4\051\uffa4\053\uffa4" +
    "\056\uffa4\057\uffa4\061\uffa4\062\uffa4\065\uffa4\066\uffa4\001" +
    "\002\000\122\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6" +
    "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6" +
    "\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6" +
    "\047\uffa6\051\uffa6\053\uffa6\056\uffa6\057\uffa6\061\uffa6\062" +
    "\uffa6\065\uffa6\066\uffa6\001\002\000\074\006\uffbd\013\uffbd" +
    "\014\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\047\uffbd\051" +
    "\uffbd\053\uffbd\056\uffbd\057\uffbd\061\uffbd\062\uffbd\065\uffbd" +
    "\066\uffbd\001\002\000\122\005\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\047\uffa5\051\uffa5\053\uffa5\056\uffa5\057\uffa5" +
    "\061\uffa5\062\uffa5\065\uffa5\066\uffa5\001\002\000\012\026" +
    "\113\036\114\037\116\042\117\001\002\000\074\006\uffbe" +
    "\013\uffbe\014\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\047" +
    "\uffbe\051\uffbe\053\uffbe\056\uffbe\057\uffbe\061\uffbe\062\uffbe" +
    "\065\uffbe\066\uffbe\001\002\000\016\015\112\016\106\017" +
    "\107\020\104\021\110\022\111\001\002\000\004\043\123" +
    "\001\002\000\110\006\uffbb\013\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\047\uffbb\051\uffbb\053\uffbb\056\uffbb\057" +
    "\uffbb\061\uffbb\062\uffbb\065\uffbb\066\uffbb\001\002\000\010" +
    "\026\113\036\114\037\116\001\002\000\074\006\uffbc\013" +
    "\uffbc\014\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\047\uffbc" +
    "\051\uffbc\053\uffbc\056\uffbc\057\uffbc\061\uffbc\062\uffbc\065" +
    "\uffbc\066\uffbc\001\002\000\004\002\ufffe\001\002\000\064" +
    "\006\uffe9\013\uffe9\014\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\047\uffe9\051\uffe9\053\uffe9\056" +
    "\uffe9\057\uffe9\061\uffe9\062\uffe9\065\uffe9\066\uffe9\001\002" +
    "\000\004\026\142\001\002\000\006\063\135\067\134\001" +
    "\002\000\004\067\133\001\002\000\066\006\uffd8\013\uffd8" +
    "\014\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\047\uffd8\051\uffd8\053\uffd8\056\uffd8\057" +
    "\uffd8\061\uffd8\062\uffd8\065\uffd8\066\uffd8\001\002\000\066" +
    "\006\uffda\013\uffda\014\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\047\uffda\051\uffda\053" +
    "\uffda\056\uffda\057\uffda\061\uffda\062\uffda\065\uffda\066\uffda" +
    "\001\002\000\016\034\043\035\047\036\136\037\137\040" +
    "\040\041\024\001\002\000\074\006\uffac\013\uffac\014\uffac" +
    "\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac" +
    "\043\uffac\045\uffac\047\uffac\051\uffac\053\uffac\056\uffac\057" +
    "\uffac\061\uffac\062\uffac\064\uffac\065\uffac\066\uffac\067\uffac" +
    "\001\002\000\074\006\uffab\013\uffab\014\uffab\026\uffab\027" +
    "\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab" +
    "\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\045" +
    "\uffab\047\uffab\051\uffab\053\uffab\056\uffab\057\uffab\061\uffab" +
    "\062\uffab\064\uffab\065\uffab\066\uffab\067\uffab\001\002\000" +
    "\004\067\141\001\002\000\066\006\uffd9\013\uffd9\014\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\047\uffd9\051\uffd9\053\uffd9\056\uffd9\057\uffd9\061" +
    "\uffd9\062\uffd9\065\uffd9\066\uffd9\001\002\000\010\044\143" +
    "\063\ufff9\067\ufff9\001\002\000\004\036\144\001\002\000" +
    "\004\045\145\001\002\000\066\006\uffdf\013\uffdf\014\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\047\uffdf\051\uffdf\053\uffdf\056\uffdf\057\uffdf\061\uffdf\062" +
    "\uffdf\065\uffdf\066\uffdf\067\uffdf\001\002\000\004\043\147" +
    "\001\002\000\004\046\150\001\002\000\062\006\054\013" +
    "\101\014\055\026\025\027\011\030\014\031\017\032\016" +
    "\033\015\034\043\035\047\036\036\037\037\040\040\041" +
    "\024\042\060\051\074\053\072\056\052\057\050\061\065" +
    "\062\056\065\042\066\061\001\002\000\064\006\054\013" +
    "\101\014\055\026\025\027\011\030\014\031\017\032\016" +
    "\033\015\034\043\035\047\036\036\037\037\040\040\041" +
    "\024\042\060\047\152\051\074\053\072\056\052\057\050" +
    "\061\065\062\056\065\042\066\061\001\002\000\006\054" +
    "\154\055\153\001\002\000\004\046\166\001\002\000\004" +
    "\042\160\001\002\000\064\006\uffd5\013\uffd5\014\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\047" +
    "\uffd5\051\uffd5\053\uffd5\056\uffd5\057\uffd5\061\uffd5\062\uffd5" +
    "\065\uffd5\066\uffd5\001\002\000\064\006\uffd6\013\uffd6\014" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\047\uffd6\051\uffd6\053\uffd6\056\uffd6\057\uffd6\061\uffd6" +
    "\062\uffd6\065\uffd6\066\uffd6\001\002\000\064\006\uffd7\013" +
    "\uffd7\014\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\047\uffd7\051\uffd7\053\uffd7\056\uffd7\057\uffd7" +
    "\061\uffd7\062\uffd7\065\uffd7\066\uffd7\001\002\000\004\043" +
    "\161\001\002\000\004\046\162\001\002\000\062\006\054" +
    "\013\101\014\055\026\025\027\011\030\014\031\017\032" +
    "\016\033\015\034\043\035\047\036\036\037\037\040\040" +
    "\041\024\042\060\051\074\053\072\056\052\057\050\061" +
    "\065\062\056\065\042\066\061\001\002\000\064\006\054" +
    "\013\101\014\055\026\025\027\011\030\014\031\017\032" +
    "\016\033\015\034\043\035\047\036\036\037\037\040\040" +
    "\041\024\042\060\047\164\051\074\053\072\056\052\057" +
    "\050\061\065\062\056\065\042\066\061\001\002\000\006" +
    "\054\154\055\153\001\002\000\064\006\uffd4\013\uffd4\014" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\047\uffd4\051\uffd4\053\uffd4\056\uffd4\057\uffd4\061\uffd4" +
    "\062\uffd4\065\uffd4\066\uffd4\001\002\000\062\006\054\013" +
    "\101\014\055\026\025\027\011\030\014\031\017\032\016" +
    "\033\015\034\043\035\047\036\036\037\037\040\040\041" +
    "\024\042\060\051\074\053\072\056\052\057\050\061\065" +
    "\062\056\065\042\066\061\001\002\000\064\006\054\013" +
    "\101\014\055\026\025\027\011\030\014\031\017\032\016" +
    "\033\015\034\043\035\047\036\036\037\037\040\040\041" +
    "\024\042\060\047\170\051\074\053\072\056\052\057\050" +
    "\061\065\062\056\065\042\066\061\001\002\000\064\006" +
    "\uffd3\013\uffd3\014\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\047\uffd3\051\uffd3\053\uffd3\056\uffd3" +
    "\057\uffd3\061\uffd3\062\uffd3\065\uffd3\066\uffd3\001\002\000" +
    "\064\006\uffc7\013\uffc7\014\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\047\uffc7\051\uffc7\053\uffc7" +
    "\056\uffc7\057\uffc7\061\uffc7\062\uffc7\065\uffc7\066\uffc7\001" +
    "\002\000\064\006\uffed\013\uffed\014\uffed\026\uffed\027\uffed" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\047\uffed\051\uffed" +
    "\053\uffed\056\uffed\057\uffed\061\uffed\062\uffed\065\uffed\066" +
    "\uffed\001\002\000\064\006\uffca\013\uffca\014\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\047\uffca" +
    "\051\uffca\053\uffca\056\uffca\057\uffca\061\uffca\062\uffca\065" +
    "\uffca\066\uffca\001\002\000\004\026\175\001\002\000\004" +
    "\043\176\001\002\000\004\067\177\001\002\000\064\006" +
    "\uffd0\013\uffd0\014\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\047\uffd0\051\uffd0\053\uffd0\056\uffd0" +
    "\057\uffd0\061\uffd0\062\uffd0\065\uffd0\066\uffd0\001\002\000" +
    "\004\043\222\001\002\000\034\005\207\006\210\007\206" +
    "\010\211\011\212\012\205\015\112\016\106\017\107\020" +
    "\104\021\110\022\111\043\uffc5\001\002\000\020\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\043\221\001" +
    "\002\000\016\005\207\006\210\007\206\010\211\011\212" +
    "\012\205\001\002\000\012\026\113\036\114\037\116\042" +
    "\215\001\002\000\012\026\uff98\036\uff98\037\uff98\042\uff98" +
    "\001\002\000\012\026\uff9b\036\uff9b\037\uff9b\042\uff9b\001" +
    "\002\000\012\026\uff9d\036\uff9d\037\uff9d\042\uff9d\001\002" +
    "\000\012\026\uff9c\036\uff9c\037\uff9c\042\uff9c\001\002\000" +
    "\012\026\uff9a\036\uff9a\037\uff9a\042\uff9a\001\002\000\012" +
    "\026\uff99\036\uff99\037\uff99\042\uff99\001\002\000\004\043" +
    "\uffc2\001\002\000\020\005\207\006\210\007\206\010\211" +
    "\011\212\012\205\043\uffc5\001\002\000\012\026\113\036" +
    "\114\037\116\042\215\001\002\000\012\026\113\036\114" +
    "\037\116\042\215\001\002\000\004\043\uffc4\001\002\000" +
    "\020\005\207\006\210\007\206\010\211\011\212\012\205" +
    "\043\uffc3\001\002\000\100\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\047\uffbf" +
    "\051\uffbf\053\uffbf\056\uffbf\057\uffbf\061\uffbf\062\uffbf\065" +
    "\uffbf\066\uffbf\001\002\000\100\005\uffc1\006\uffc1\007\uffc1" +
    "\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\047" +
    "\uffc1\051\uffc1\053\uffc1\056\uffc1\057\uffc1\061\uffc1\062\uffc1" +
    "\065\uffc1\066\uffc1\001\002\000\064\006\uffc6\013\uffc6\014" +
    "\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\047\uffc6\051\uffc6\053\uffc6\056\uffc6\057\uffc6\061\uffc6" +
    "\062\uffc6\065\uffc6\066\uffc6\001\002\000\012\026\uff91\036" +
    "\uff91\037\uff91\042\uff91\001\002\000\012\026\uff90\036\uff90" +
    "\037\uff90\042\uff90\001\002\000\012\026\113\036\114\037" +
    "\116\042\117\001\002\000\012\026\uff8f\036\uff8f\037\uff8f" +
    "\042\uff8f\001\002\000\064\006\uffb8\013\uffb8\014\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\047" +
    "\uffb8\051\uffb8\053\uffb8\056\uffb8\057\uffb8\061\uffb8\062\uffb8" +
    "\065\uffb8\066\uffb8\001\002\000\004\051\074\001\002\000" +
    "\004\051\074\001\002\000\004\043\234\001\002\000\004" +
    "\046\235\001\002\000\062\006\054\013\101\014\055\026" +
    "\025\027\011\030\014\031\017\032\016\033\015\034\043" +
    "\035\047\036\036\037\037\040\040\041\024\042\060\051" +
    "\074\053\072\056\052\057\050\061\065\062\056\065\042" +
    "\066\061\001\002\000\064\006\054\013\101\014\055\026" +
    "\025\027\011\030\014\031\017\032\016\033\015\034\043" +
    "\035\047\036\036\037\037\040\040\041\024\042\060\047" +
    "\237\051\074\053\072\056\052\057\050\061\065\062\056" +
    "\065\042\066\061\001\002\000\004\067\240\001\002\000" +
    "\064\006\uffd1\013\uffd1\014\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\047\uffd1\051\uffd1\053\uffd1" +
    "\056\uffd1\057\uffd1\061\uffd1\062\uffd1\065\uffd1\066\uffd1\001" +
    "\002\000\004\044\143\001\002\000\062\006\054\013\101" +
    "\014\055\026\025\027\011\030\014\031\017\032\016\033" +
    "\015\034\043\035\047\036\036\037\037\040\040\041\024" +
    "\042\060\051\074\053\072\056\052\057\050\061\065\062" +
    "\056\065\042\066\061\001\002\000\064\006\054\013\101" +
    "\014\055\026\025\027\011\030\014\031\017\032\016\033" +
    "\015\034\043\035\047\036\036\037\037\040\040\041\024" +
    "\042\060\047\244\051\074\053\072\056\052\057\050\061" +
    "\065\062\056\065\042\066\061\001\002\000\004\060\245" +
    "\001\002\000\004\042\246\001\002\000\004\043\247\001" +
    "\002\000\004\067\250\001\002\000\064\006\uffd2\013\uffd2" +
    "\014\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2" +
    "\042\uffd2\047\uffd2\051\uffd2\053\uffd2\056\uffd2\057\uffd2\061" +
    "\uffd2\062\uffd2\065\uffd2\066\uffd2\001\002\000\016\034\043" +
    "\035\047\036\136\037\137\040\040\041\024\001\002\000" +
    "\066\006\uffe2\013\uffe2\014\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\045\uffe2\047\uffe2\051\uffe2" +
    "\053\uffe2\056\uffe2\057\uffe2\061\uffe2\062\uffe2\065\uffe2\066" +
    "\uffe2\001\002\000\012\026\254\036\255\037\260\040\257" +
    "\001\002\000\004\043\uffa0\001\002\000\004\043\uffa3\001" +
    "\002\000\004\043\261\001\002\000\004\043\uffa1\001\002" +
    "\000\004\043\uffa2\001\002\000\004\067\262\001\002\000" +
    "\064\006\uffcf\013\uffcf\014\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\047\uffcf\051\uffcf\053\uffcf" +
    "\056\uffcf\057\uffcf\061\uffcf\062\uffcf\065\uffcf\066\uffcf\001" +
    "\002\000\004\044\264\001\002\000\016\034\043\035\047" +
    "\036\136\037\137\040\040\041\024\001\002\000\004\045" +
    "\266\001\002\000\064\006\uffe0\013\uffe0\014\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\047\uffe0" +
    "\051\uffe0\053\uffe0\056\uffe0\057\uffe0\061\uffe0\062\uffe0\065" +
    "\uffe0\066\uffe0\001\002\000\012\026\303\036\114\037\116" +
    "\042\117\001\002\000\004\036\301\001\002\000\020\026" +
    "\273\034\043\035\047\036\136\037\137\040\040\041\024" +
    "\001\002\000\006\043\uffe6\064\uffe6\001\002\000\006\043" +
    "\uffe7\064\uffe7\001\002\000\006\043\276\064\277\001\002" +
    "\000\006\043\uffe5\064\uffe5\001\002\000\064\006\uffe8\013" +
    "\uffe8\014\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\047\uffe8\051\uffe8\053\uffe8\056\uffe8\057\uffe8" +
    "\061\uffe8\062\uffe8\065\uffe8\066\uffe8\001\002\000\020\026" +
    "\273\034\043\035\047\036\136\037\137\040\040\041\024" +
    "\001\002\000\006\043\uffe4\064\uffe4\001\002\000\004\045" +
    "\302\001\002\000\066\006\uffe1\013\uffe1\014\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\047\uffe1" +
    "\051\uffe1\053\uffe1\056\uffe1\057\uffe1\061\uffe1\062\uffe1\063" +
    "\uffe1\065\uffe1\066\uffe1\001\002\000\024\015\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\224\024\225\025" +
    "\227\001\002\000\064\006\uffb5\013\uffb5\014\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\047\uffb5" +
    "\051\uffb5\053\uffb5\056\uffb5\057\uffb5\061\uffb5\062\uffb5\065" +
    "\uffb5\066\uffb5\001\002\000\012\026\113\036\114\037\116" +
    "\042\117\001\002\000\064\006\uffb7\013\uffb7\014\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\047" +
    "\uffb7\051\uffb7\053\uffb7\056\uffb7\057\uffb7\061\uffb7\062\uffb7" +
    "\065\uffb7\066\uffb7\001\002\000\004\042\310\001\002\000" +
    "\016\027\011\030\014\031\017\032\016\033\015\043\314" +
    "\001\002\000\006\043\321\064\322\001\002\000\004\026" +
    "\320\001\002\000\006\043\ufff8\064\ufff8\001\002\000\004" +
    "\046\315\001\002\000\062\006\054\013\101\014\055\026" +
    "\025\027\011\030\014\031\017\032\016\033\015\034\043" +
    "\035\047\036\036\037\037\040\040\041\024\042\060\051" +
    "\074\053\072\056\052\057\050\061\065\062\056\065\042" +
    "\066\061\001\002\000\064\006\054\013\101\014\055\026" +
    "\025\027\011\030\014\031\017\032\016\033\015\034\043" +
    "\035\047\036\036\037\037\040\040\041\024\042\060\047" +
    "\317\051\074\053\072\056\052\057\050\061\065\062\056" +
    "\065\042\066\061\001\002\000\004\052\ufffd\001\002\000" +
    "\006\043\ufff9\064\ufff9\001\002\000\004\046\324\001\002" +
    "\000\014\027\011\030\014\031\017\032\016\033\015\001" +
    "\002\000\006\043\ufff7\064\ufff7\001\002\000\062\006\054" +
    "\013\101\014\055\026\025\027\011\030\014\031\017\032" +
    "\016\033\015\034\043\035\047\036\036\037\037\040\040" +
    "\041\024\042\060\051\074\053\072\056\052\057\050\061" +
    "\065\062\056\065\042\066\061\001\002\000\064\006\054" +
    "\013\101\014\055\026\025\027\011\030\014\031\017\032" +
    "\016\033\015\034\043\035\047\036\036\037\037\040\040" +
    "\041\024\042\060\047\326\051\074\053\072\056\052\057" +
    "\050\061\065\062\056\065\042\066\061\001\002\000\004" +
    "\052\ufffc\001\002\000\004\052\ufffa\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\012\004\005\005\004\006\006\007\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\327\007\326\001\001\000\004\002\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\076" +
    "\002\050\003\044\012\077\013\102\016\032\017\066\020" +
    "\034\021\030\022\076\023\031\024\074\026\063\031\045" +
    "\032\067\033\070\034\043\035\056\037\062\041\026\042" +
    "\025\043\065\044\033\045\040\050\061\051\075\052\101" +
    "\054\052\055\022\056\072\057\027\001\001\000\004\060" +
    "\304\001\001\000\002\001\001\000\004\060\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\053\123\060\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\047\177\050\202\051\201\052" +
    "\200\054\120\055\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\127\011\130\022\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\074\002\050\003" +
    "\044\013\126\016\032\017\066\020\034\021\030\022\076" +
    "\023\031\024\074\026\063\031\045\032\067\033\070\034" +
    "\043\035\056\037\062\041\026\042\025\043\065\044\033" +
    "\045\040\050\061\051\075\052\101\054\052\055\022\056" +
    "\072\057\027\001\001\000\002\001\001\000\004\053\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\052" +
    "\117\054\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\052\101\054\120\055\121\001\001\000" +
    "\002\001\001\000\004\053\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\076\002" +
    "\050\003\044\012\150\013\102\016\032\017\066\020\034" +
    "\021\030\022\076\023\031\024\074\026\063\031\045\032" +
    "\067\033\070\034\043\035\056\037\062\041\026\042\025" +
    "\043\065\044\033\045\040\050\061\051\075\052\101\054" +
    "\052\055\022\056\072\057\027\001\001\000\074\002\050" +
    "\003\044\013\126\016\032\017\066\020\034\021\030\022" +
    "\076\023\031\024\074\026\063\031\045\032\067\033\070" +
    "\034\043\035\056\037\062\041\026\042\025\043\065\044" +
    "\033\045\040\050\061\051\075\052\101\054\052\055\022" +
    "\056\072\057\027\001\001\000\010\025\154\027\156\030" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\076\002\050\003\044\012\162" +
    "\013\102\016\032\017\066\020\034\021\030\022\076\023" +
    "\031\024\074\026\063\031\045\032\067\033\070\034\043" +
    "\035\056\037\062\041\026\042\025\043\065\044\033\045" +
    "\040\050\061\051\075\052\101\054\052\055\022\056\072" +
    "\057\027\001\001\000\074\002\050\003\044\013\126\016" +
    "\032\017\066\020\034\021\030\022\076\023\031\024\074" +
    "\026\063\031\045\032\067\033\070\034\043\035\056\037" +
    "\062\041\026\042\025\043\065\044\033\045\040\050\061" +
    "\051\075\052\101\054\052\055\022\056\072\057\027\001" +
    "\001\000\010\025\164\027\156\030\155\001\001\000\002" +
    "\001\001\000\076\002\050\003\044\012\166\013\102\016" +
    "\032\017\066\020\034\021\030\022\076\023\031\024\074" +
    "\026\063\031\045\032\067\033\070\034\043\035\056\037" +
    "\062\041\026\042\025\043\065\044\033\045\040\050\061" +
    "\051\075\052\101\054\052\055\022\056\072\057\027\001" +
    "\001\000\074\002\050\003\044\013\126\016\032\017\066" +
    "\020\034\021\030\022\076\023\031\024\074\026\063\031" +
    "\045\032\067\033\070\034\043\035\056\037\062\041\026" +
    "\042\025\043\065\044\033\045\040\050\061\051\075\052" +
    "\101\054\052\055\022\056\072\057\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\046\215\053" +
    "\104\001\001\000\002\001\001\000\004\046\203\001\001" +
    "\000\012\047\212\050\202\051\075\052\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\215\001\001\000\012\047\177\050\202" +
    "\051\201\052\213\001\001\000\012\047\216\050\217\051" +
    "\075\052\213\001\001\000\002\001\001\000\004\046\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\052\101" +
    "\054\052\055\022\057\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\231\001\001\000\004\024\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\076\002" +
    "\050\003\044\012\235\013\102\016\032\017\066\020\034" +
    "\021\030\022\076\023\031\024\074\026\063\031\045\032" +
    "\067\033\070\034\043\035\056\037\062\041\026\042\025" +
    "\043\065\044\033\045\040\050\061\051\075\052\101\054" +
    "\052\055\022\056\072\057\027\001\001\000\074\002\050" +
    "\003\044\013\126\016\032\017\066\020\034\021\030\022" +
    "\076\023\031\024\074\026\063\031\045\032\067\033\070" +
    "\034\043\035\056\037\062\041\026\042\025\043\065\044" +
    "\033\045\040\050\061\051\075\052\101\054\052\055\022" +
    "\056\072\057\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\076\002\050\003\044\012\242" +
    "\013\102\016\032\017\066\020\034\021\030\022\076\023" +
    "\031\024\074\026\063\031\045\032\067\033\070\034\043" +
    "\035\056\037\062\041\026\042\025\043\065\044\033\045" +
    "\040\050\061\051\075\052\101\054\052\055\022\056\072" +
    "\057\027\001\001\000\074\002\050\003\044\013\126\016" +
    "\032\017\066\020\034\021\030\022\076\023\031\024\074" +
    "\026\063\031\045\032\067\033\070\034\043\035\056\037" +
    "\062\041\026\042\025\043\065\044\033\045\040\050\061" +
    "\051\075\052\101\054\052\055\022\056\072\057\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\044\017" +
    "\251\001\001\000\002\001\001\000\004\036\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\044\017\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\052\101" +
    "\054\052\055\022\056\303\057\027\001\001\000\002\001" +
    "\001\000\010\003\271\014\274\015\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\271\014\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\266\001\001\000\002\001\001\000\012\052\101" +
    "\054\052\055\022\057\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\311\010\310\011\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\002\050\003\044\012\315\013\102" +
    "\016\032\017\066\020\034\021\030\022\076\023\031\024" +
    "\074\026\063\031\045\032\067\033\070\034\043\035\056" +
    "\037\062\041\026\042\025\043\065\044\033\045\040\050" +
    "\061\051\075\052\101\054\052\055\022\056\072\057\027" +
    "\001\001\000\074\002\050\003\044\013\126\016\032\017" +
    "\066\020\034\021\030\022\076\023\031\024\074\026\063" +
    "\031\045\032\067\033\070\034\043\035\056\037\062\041" +
    "\026\042\025\043\065\044\033\045\040\050\061\051\075" +
    "\052\101\054\052\055\022\056\072\057\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\311\011\322\001\001\000\002\001\001\000\076\002" +
    "\050\003\044\012\324\013\102\016\032\017\066\020\034" +
    "\021\030\022\076\023\031\024\074\026\063\031\045\032" +
    "\067\033\070\034\043\035\056\037\062\041\026\042\025" +
    "\043\065\044\033\045\040\050\061\051\075\052\101\054" +
    "\052\055\022\056\072\057\027\001\001\000\074\002\050" +
    "\003\044\013\126\016\032\017\066\020\034\021\030\022" +
    "\076\023\031\024\074\026\063\031\045\032\067\033\070" +
    "\034\043\035\056\037\062\041\026\042\025\043\065\044" +
    "\033\045\040\050\061\051\075\052\101\054\052\055\022" +
    "\056\072\057\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    Lexer lex;

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex=lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    public void hola(){
        System.out.println("Hola");
    }
    public void adios(){
            System.out.println("Adios");
        }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // navidad ::= mainNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // navidad ::= bolsanavidena mainNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mainNavidad ::= FUNCTION MAIN ABRECUENTO CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainNavidad",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bolsanavidenaAux ::= FUNCTION tsantaclaus PERSONA ABRECUENTO CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenaAux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bolsanavidenaAux ::= FUNCTION tsantaclaus PERSONA ABRECUENTO listaDeRegalos CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenaAux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bolsanavidena ::= bolsanavidenaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidena",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bolsanavidena ::= bolsanavidena bolsanavidenaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidena",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaDeRegalosAux ::= tsantaclaus PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalosAux",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listaDeRegalos ::= listaDeRegalosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listaDeRegalos ::= listaDeRegalos BASTON listaDeRegalosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // adorno ::= llamadaASanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // adorno ::= infoTrineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // adorno ::= decorarGalleta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // adorno ::= leerCarta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // adorno ::= escribirCarta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // adorno ::= luces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // adorno ::= decoracionI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // adorno ::= decoracionesF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // adorno ::= CORTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // adorno ::= ENVIA PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // adorno ::= whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // adorno ::= candyCane 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // villancicos ::= adorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("villancicos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // villancicos ::= villancicos adorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("villancicos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // llamadaASanta ::= PERSONA ABRECUENTO listaDeTamales CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaASanta",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listaDeTamalesAux ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamalesAux",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listaDeTamalesAux ::= tlsantaclaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamalesAux",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listaDeTamales ::= listaDeTamalesAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listaDeTamales ::= listaDeTamales BASTON listaDeTamalesAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listaAmigos ::= tlsantaclaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaAmigos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listaAmigos ::= tlsantaclaus BASTON listaAmigos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaAmigos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // acceso_trineo ::= PERSONA ABREEMPAQUE l_SANTA_CLAUS CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_trineo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // llenar_trineo ::= acceso_trineo ENTREGA ABREEMPAQUE listaAmigos CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llenar_trineo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // trineo ::= tsantaclaus PERSONA ABREEMPAQUE l_SANTA_CLAUS CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("trineo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // infoTrineo ::= trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // infoTrineo ::= llenar_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // infoTrineo ::= acceso_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // infoTrineo ::= listaAmigos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // decorarGalleta ::= LOCAL listaDeRegalosAux FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // decorarGalleta ::= LOCAL listaDeRegalosAux ENTREGA tlsantaclaus FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // decorarGalleta ::= LOCAL trineo FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ponerLuces ::= elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ponerLuces",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ponerLuces ::= else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ponerLuces",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if ::= ELFO ABRECUENTO CIERRACUENTO ABREREGALO villancicos CIERRAREGALO ponerLuces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // elif ::= HADA ABRECUENTO CIERRACUENTO ABREREGALO villancicos CIERRAREGALO ponerLuces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // else ::= DUENDE ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // do_until ::= HACE ABREREGALO villancicos CIERRAREGALO REVISA ABRECUENTO CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_until",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // for ::= ENVUELVE ABRECUENTO decorarGalleta decorarGalleta CIERRACUENTO ABREREGALO villancicos CIERRAREGALO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // leerCarta ::= ESCUCHA ABRECUENTO PERSONA CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leerCarta",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // escribirCarta ::= NARRA ABRECUENTO mensaje CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribirCarta",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // decoracionesI ::= decoracionI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesI",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // decoracionesI ::= decoracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesI",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // decoracionesF ::= decoracionF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesF",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // decoracionesF ::= decoracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesF",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // decoracion ::= ornamentosUnicos PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // decoracionIAux ::= ornamentosUnicos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionIAux",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // decoracionIAux ::= TURENO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionIAux",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // decoracionI ::= decoracionIAux l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionI",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // decoracionF ::= TURENO l_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionF",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CindyLuWho ::= SantaMate 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CindyLuWho ::= SantaMate ornamentos CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CindyLuWho ::= SantaMate ornamentos whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CindyLuWho ::= whoVille ornamentos CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DonnaWho ::= ABRECUENTO CindyLuWho CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DonnaWho",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // whoVille ::= DonnaWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whoVille",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // whoVille ::= ABRECUENTO DonnaWho CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whoVille",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // mintAux ::= SantaMate workshop SantaMate 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mintAux",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // mintAux ::= SantaMate workshop mint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mintAux",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // mintAux ::= mint workshop SantaMate 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mintAux",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // mint ::= ABRECUENTO mintAux CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mint",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // candyCaneAux ::= mint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyCaneAux",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // candyCaneAux ::= mintAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyCaneAux",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // candyCaneAux ::= mint yellowSnow candyCaneAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyCaneAux",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // candyCaneAux ::= mintAux yellowSnow candyCaneAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyCaneAux",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // candyCane ::= candyCaneAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyCane",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // candyCane ::= PERSONA yellowSnow candyCane 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyCane",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // luces ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // luces ::= do_until 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // luces ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tsantaclaus ::= FATHER_CHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tsantaclaus ::= SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tsantaclaus ::= PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tsantaclaus ::= SAN_NICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tsantaclaus ::= SANTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tlsantaclaus ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tlsantaclaus ::= l_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tlsantaclaus ::= l_SANTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tlsantaclaus ::= l_TFATHER_CHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tlsantaclaus ::= l_FFATHER_CHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tlsantaclaus ::= l_SAN_NICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SantaMate ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SantaMate ::= l_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SantaMate ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // mensaje ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // mensaje ::= l_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // mensaje ::= l_SAN_NICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // mensaje ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ornamentosUnicos ::= QUIEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentosUnicos",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ornamentosUnicos ::= GRINCH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentosUnicos",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ornamentos ::= RODOLFO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentos",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ornamentos ::= TURENO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentos",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ornamentos ::= COMETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentos",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ornamentos ::= DASHER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentos",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ornamentos ::= DANCER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentos",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ornamentos ::= PRANCER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentos",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // workshop ::= SUGARPLUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // workshop ::= SNOWBALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // workshop ::= WUNORSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // workshop ::= BUSHY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // workshop ::= PEPPER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // workshop ::= SHINNY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // yellowSnow ::= MELCHOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yellowSnow",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // yellowSnow ::= GASPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yellowSnow",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // yellowSnow ::= BALTAZAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yellowSnow",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
