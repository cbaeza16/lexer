
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.p1;

import java_cup.runtime.*;
import java.lang.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\004\000\002\073\002\000\002\004" +
    "\004\000\002\005\003\000\002\005\004\000\002\005\004" +
    "\000\002\007\006\000\002\006\006\000\002\011\005\000" +
    "\002\012\010\000\002\012\011\000\002\010\003\000\002" +
    "\010\004\000\002\014\004\000\002\013\003\000\002\013" +
    "\005\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\004\000\002\067\004\000\002" +
    "\016\004\000\002\016\003\000\002\015\003\000\002\015" +
    "\004\000\002\022\003\000\002\021\006\000\002\021\005" +
    "\000\002\017\003\000\002\017\003\000\002\020\003\000" +
    "\002\020\005\000\002\023\003\000\002\023\005\000\002" +
    "\024\006\000\002\025\005\000\002\026\007\000\002\030" +
    "\010\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\033\005\000\002\032\003\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\034\003\000\002\034\003\000\002\035\012\000\002\036" +
    "\012\000\002\037\007\000\002\040\013\000\002\041\016" +
    "\000\002\043\006\000\002\044\006\000\002\054\003\000" +
    "\002\054\003\000\002\047\003\000\002\047\003\000\002" +
    "\050\004\000\002\051\003\000\002\051\003\000\002\052" +
    "\004\000\002\053\004\000\002\055\005\000\002\055\005" +
    "\000\002\055\005\000\002\055\003\000\002\055\005\000" +
    "\002\055\005\000\002\055\005\000\002\071\005\000\002" +
    "\071\005\000\002\071\005\000\002\071\003\000\002\072" +
    "\005\000\002\072\003\000\002\072\003\000\002\056\005" +
    "\000\002\062\005\000\002\062\005\000\002\062\005\000" +
    "\002\062\005\000\002\063\003\000\002\063\004\000\002" +
    "\063\003\000\002\063\004\000\002\063\003\000\002\063" +
    "\004\000\002\063\003\000\002\063\004\000\002\063\003" +
    "\000\002\064\003\000\002\064\005\000\002\065\005\000" +
    "\002\065\006\000\002\066\003\000\002\066\005\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\027\003" +
    "\000\002\027\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\046\003\000\002" +
    "\046\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\061\003\000\002\061\003\000\002\070\003\000" +
    "\002\070\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\006\003\000\051\000\001\002\000\006\003" +
    "\011\051\016\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\002\ufffe\001\002\000\004\051" +
    "\ufff6\001\002\000\006\003\011\051\016\001\002\000\004" +
    "\045\374\001\002\000\004\041\033\001\002\000\004\002" +
    "\uffff\001\002\000\004\051\016\001\002\000\016\026\020" +
    "\027\023\030\024\031\025\032\021\047\022\001\002\000" +
    "\004\025\030\001\002\000\004\025\uff97\001\002\000\004" +
    "\025\uff93\001\002\000\004\041\026\001\002\000\004\025" +
    "\uff96\001\002\000\004\025\uff95\001\002\000\004\025\uff94" +
    "\001\002\000\004\042\027\001\002\000\004\045\ufffb\001" +
    "\002\000\004\041\ufff9\001\002\000\004\051\ufff5\001\002" +
    "\000\004\002\ufffd\001\002\000\016\026\020\027\023\030" +
    "\024\031\025\032\021\042\036\001\002\000\006\042\366" +
    "\063\367\001\002\000\004\025\365\001\002\000\004\045" +
    "\040\001\002\000\006\042\ufff3\063\ufff3\001\002\000\032" +
    "\005\062\012\104\013\063\025\042\050\100\052\077\055" +
    "\060\056\057\060\072\061\064\064\054\065\066\001\002" +
    "\000\004\066\uffec\001\002\000\010\041\uffe4\043\354\062" +
    "\353\001\002\000\044\004\uffc2\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\011\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\042\uffc2\046\uffc2\066\uffc2" +
    "\001\002\000\044\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\042\uffc5\046\uffc5\066\uffc5\001" +
    "\002\000\004\066\uffd6\001\002\000\004\066\ufff0\001\002" +
    "\000\004\066\ufff1\001\002\000\006\062\347\066\uffd5\001" +
    "\002\000\044\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4" +
    "\011\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\042\uffc4\046\uffc4\066\uffc4\001\002" +
    "\000\004\041\336\001\002\000\044\004\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\042\uffc3\046" +
    "\uffc3\066\uffc3\001\002\000\004\041\327\001\002\000\004" +
    "\066\uffee\001\002\000\034\005\uff99\012\uff99\013\uff99\025" +
    "\uff99\046\uff99\050\uff99\052\uff99\055\uff99\056\uff99\060\uff99" +
    "\061\uff99\064\uff99\065\uff99\001\002\000\004\045\317\001" +
    "\002\000\004\041\300\001\002\000\010\062\274\063\uffd2" +
    "\066\uffd2\001\002\000\006\035\uffbf\036\273\001\002\000" +
    "\006\025\uff80\035\uff80\001\002\000\004\066\uffeb\001\002" +
    "\000\004\066\uffed\001\002\000\004\041\270\001\002\000" +
    "\004\066\uffd4\001\002\000\006\025\267\035\uffc0\001\002" +
    "\000\034\005\uff9a\012\uff9a\013\uff9a\025\uff9a\046\uff9a\050" +
    "\uff9a\052\uff9a\055\uff9a\056\uff9a\060\uff9a\061\uff9a\064\uff9a" +
    "\065\uff9a\001\002\000\020\025\257\033\262\034\260\035" +
    "\261\036\265\037\263\040\264\001\002\000\004\035\256" +
    "\001\002\000\004\066\255\001\002\000\034\005\uff98\012" +
    "\uff98\013\uff98\025\uff98\046\uff98\050\uff98\052\uff98\055\uff98" +
    "\056\uff98\060\uff98\061\uff98\064\uff98\065\uff98\001\002\000" +
    "\034\005\uffe7\012\uffe7\013\uffe7\025\uffe7\046\uffe7\050\uffe7" +
    "\052\uffe7\055\uffe7\056\uffe7\060\uffe7\061\uffe7\064\uffe7\065" +
    "\uffe7\001\002\000\004\041\115\001\002\000\014\026\020" +
    "\027\023\030\024\031\025\032\021\001\002\000\004\066" +
    "\uffef\001\002\000\004\066\uffd7\001\002\000\034\005\062" +
    "\012\104\013\063\025\042\046\106\050\100\052\077\055" +
    "\060\056\057\060\072\061\064\064\054\065\066\001\002" +
    "\000\006\025\uff81\035\uff81\001\002\000\034\005\uffe6\012" +
    "\uffe6\013\uffe6\025\uffe6\046\uffe6\050\uffe6\052\uffe6\055\uffe6" +
    "\056\uffe6\060\uffe6\061\uffe6\064\uffe6\065\uffe6\001\002\000" +
    "\004\051\ufff8\001\002\000\034\005\uffe5\012\uffe5\013\uffe5" +
    "\025\uffe5\046\uffe5\050\uffe5\052\uffe5\055\uffe5\056\uffe5\060" +
    "\uffe5\061\uffe5\064\uffe5\065\uffe5\001\002\000\004\025\111" +
    "\001\002\000\010\043\112\062\uffd3\066\uffd3\001\002\000" +
    "\004\035\113\001\002\000\004\044\114\001\002\000\004" +
    "\066\uffd8\001\002\000\006\024\117\045\121\001\002\000" +
    "\004\042\231\001\002\000\004\045\167\001\002\000\014" +
    "\022\160\023\162\042\uff9c\063\uff9c\066\uff9c\001\002\000" +
    "\030\005\062\012\104\013\063\024\133\025\131\033\125" +
    "\034\130\035\127\036\140\041\124\045\121\001\002\000" +
    "\010\022\uffa5\023\uffa5\046\uffa5\001\002\000\042\004\uff89" +
    "\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89\014\uff89\015" +
    "\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89" +
    "\042\uff89\046\uff89\001\002\000\020\005\062\012\104\013" +
    "\063\025\151\035\127\036\140\041\124\001\002\000\010" +
    "\022\uff77\023\uff77\046\uff77\001\002\000\004\046\173\001" +
    "\002\000\042\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c" +
    "\011\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021" +
    "\uff8c\022\uff8c\023\uff8c\042\uff8c\046\uff8c\001\002\000\010" +
    "\022\uff76\023\uff76\046\uff76\001\002\000\026\014\uff8a\015" +
    "\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uffa7\023\uffa7" +
    "\041\uffe4\046\uffa7\001\002\000\024\014\uff88\015\uff88\016" +
    "\uff88\017\uff88\020\uff88\021\uff88\022\uffa3\023\uffa3\046\uffa3" +
    "\001\002\000\026\005\062\012\104\013\063\025\165\033" +
    "\125\034\130\035\127\036\140\041\124\045\167\001\002" +
    "\000\010\022\uffa1\023\uffa1\046\uffa1\001\002\000\010\022" +
    "\160\023\162\046\uffa0\001\002\000\016\014\150\015\144" +
    "\016\146\017\142\020\145\021\147\001\002\000\016\014" +
    "\150\015\144\016\146\017\142\020\145\021\147\001\002" +
    "\000\042\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011" +
    "\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b" +
    "\022\uff8b\023\uff8b\042\uff8b\046\uff8b\001\002\000\010\022" +
    "\uffa9\023\uffa9\046\uffa9\001\002\000\020\005\uff7f\012\uff7f" +
    "\013\uff7f\025\uff7f\035\uff7f\036\uff7f\041\uff7f\001\002\000" +
    "\020\005\062\012\104\013\063\025\151\035\127\036\140" +
    "\041\124\001\002\000\020\005\uff7c\012\uff7c\013\uff7c\025" +
    "\uff7c\035\uff7c\036\uff7c\041\uff7c\001\002\000\020\005\uff7a" +
    "\012\uff7a\013\uff7a\025\uff7a\035\uff7a\036\uff7a\041\uff7a\001" +
    "\002\000\020\005\uff7b\012\uff7b\013\uff7b\025\uff7b\035\uff7b" +
    "\036\uff7b\041\uff7b\001\002\000\020\005\uff7d\012\uff7d\013" +
    "\uff7d\025\uff7d\035\uff7d\036\uff7d\041\uff7d\001\002\000\020" +
    "\005\uff7e\012\uff7e\013\uff7e\025\uff7e\035\uff7e\036\uff7e\041" +
    "\uff7e\001\002\000\030\004\uff8a\005\uff8a\006\uff8a\007\uff8a" +
    "\010\uff8a\011\uff8a\022\uff8a\023\uff8a\041\uffe4\042\uff8a\046" +
    "\uff8a\001\002\000\026\004\uff88\005\uff88\006\uff88\007\uff88" +
    "\010\uff88\011\uff88\022\uff88\023\uff88\042\uff88\046\uff88\001" +
    "\002\000\010\022\uffac\023\uffac\046\uffac\001\002\000\010" +
    "\022\uffaa\023\uffaa\046\uffaa\001\002\000\020\005\062\012" +
    "\104\013\063\025\151\035\127\036\140\041\124\001\002" +
    "\000\010\022\uffad\023\uffad\046\uffad\001\002\000\010\022" +
    "\uffab\023\uffab\046\uffab\001\002\000\030\005\uff79\012\uff79" +
    "\013\uff79\024\uff79\025\uff79\033\uff79\034\uff79\035\uff79\036" +
    "\uff79\041\uff79\045\uff79\001\002\000\030\005\062\012\104" +
    "\013\063\024\133\025\131\033\125\034\130\035\127\036" +
    "\140\041\124\045\121\001\002\000\030\005\uff78\012\uff78" +
    "\013\uff78\024\uff78\025\uff78\033\uff78\034\uff78\035\uff78\036" +
    "\uff78\041\uff78\045\uff78\001\002\000\004\046\uff9f\001\002" +
    "\000\010\022\uffa4\023\uffa4\046\uffa4\001\002\000\026\014" +
    "\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uffa6" +
    "\023\uffa6\041\uffe4\046\uffa6\001\002\000\024\014\uff88\015" +
    "\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022\uffa2\023\uffa2" +
    "\046\uffa2\001\002\000\030\005\062\012\104\013\063\024" +
    "\133\025\131\033\125\034\130\035\127\036\140\041\124" +
    "\045\121\001\002\000\010\022\uffa8\023\uffa8\046\uffa8\001" +
    "\002\000\004\046\172\001\002\000\016\022\uff9d\023\uff9d" +
    "\042\uff9d\046\uff9d\063\uff9d\066\uff9d\001\002\000\016\022" +
    "\uff9e\023\uff9e\042\uff9e\046\uff9e\063\uff9e\066\uff9e\001\002" +
    "\000\010\004\204\005\205\042\226\001\002\000\020\004" +
    "\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\224\042\uffb2" +
    "\001\002\000\016\004\212\005\213\006\211\007\214\010" +
    "\215\042\uffb9\001\002\000\020\004\uffb0\005\uffb0\006\uffb0" +
    "\007\uffb0\010\uffb0\011\uffb0\042\uffb0\001\002\000\020\004" +
    "\201\005\202\006\uffaf\007\uffaf\010\uffaf\011\uffaf\042\uffaf" +
    "\001\002\000\020\005\062\012\104\013\063\025\151\035" +
    "\127\036\140\041\124\001\002\000\020\005\062\012\104" +
    "\013\063\025\151\035\127\036\140\041\124\001\002\000" +
    "\010\004\uffb6\005\uffb6\042\uffb6\001\002\000\020\005\062" +
    "\012\104\013\063\025\151\035\127\036\140\041\124\001" +
    "\002\000\020\005\062\012\104\013\063\025\151\035\127" +
    "\036\140\041\124\001\002\000\010\004\uffb8\005\uffb8\042" +
    "\uffb8\001\002\000\010\004\uffbc\005\uffbc\042\uffbc\001\002" +
    "\000\010\004\uffba\005\uffba\042\uffba\001\002\000\020\005" +
    "\062\012\104\013\063\025\151\035\127\036\140\041\124" +
    "\001\002\000\020\005\062\012\104\013\063\025\151\035" +
    "\127\036\140\041\124\001\002\000\020\005\062\012\104" +
    "\013\063\025\151\035\127\036\140\041\124\001\002\000" +
    "\020\005\062\012\104\013\063\025\151\035\127\036\140" +
    "\041\124\001\002\000\020\005\062\012\104\013\063\025" +
    "\151\035\127\036\140\041\124\001\002\000\016\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\042\uffb3\001\002\000" +
    "\020\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf" +
    "\042\uffaf\001\002\000\016\004\uffb4\005\uffb4\006\uffb4\007" +
    "\uffb4\010\uffb4\042\uffb4\001\002\000\016\004\uffb7\005\uffb7" +
    "\006\211\007\214\010\215\042\uffb7\001\002\000\016\004" +
    "\uffbb\005\uffbb\006\211\007\214\010\215\042\uffbb\001\002" +
    "\000\016\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\042" +
    "\uffb5\001\002\000\020\005\062\012\104\013\063\025\151" +
    "\035\127\036\140\041\124\001\002\000\020\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\042\uffb1\001\002" +
    "\000\046\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011" +
    "\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae" +
    "\022\uffae\023\uffae\042\uffae\046\uffae\063\uffae\066\uffae\001" +
    "\002\000\006\024\117\045\121\001\002\000\010\042\uff9b" +
    "\063\uff9b\066\uff9b\001\002\000\004\045\232\001\002\000" +
    "\032\005\062\012\104\013\063\025\042\050\100\052\077" +
    "\055\060\056\057\060\072\061\064\064\054\065\066\001" +
    "\002\000\034\005\062\012\104\013\063\025\042\046\234" +
    "\050\100\052\077\055\060\056\057\060\072\061\064\064" +
    "\054\065\066\001\002\000\006\053\236\054\235\001\002" +
    "\000\004\045\251\001\002\000\004\041\242\001\002\000" +
    "\034\005\uffcc\012\uffcc\013\uffcc\025\uffcc\046\uffcc\050\uffcc" +
    "\052\uffcc\055\uffcc\056\uffcc\060\uffcc\061\uffcc\064\uffcc\065" +
    "\uffcc\001\002\000\034\005\uffcd\012\uffcd\013\uffcd\025\uffcd" +
    "\046\uffcd\050\uffcd\052\uffcd\055\uffcd\056\uffcd\060\uffcd\061" +
    "\uffcd\064\uffcd\065\uffcd\001\002\000\034\005\uffce\012\uffce" +
    "\013\uffce\025\uffce\046\uffce\050\uffce\052\uffce\055\uffce\056" +
    "\uffce\060\uffce\061\uffce\064\uffce\065\uffce\001\002\000\006" +
    "\024\117\045\121\001\002\000\004\042\244\001\002\000" +
    "\004\045\245\001\002\000\032\005\062\012\104\013\063" +
    "\025\042\050\100\052\077\055\060\056\057\060\072\061" +
    "\064\064\054\065\066\001\002\000\034\005\062\012\104" +
    "\013\063\025\042\046\247\050\100\052\077\055\060\056" +
    "\057\060\072\061\064\064\054\065\066\001\002\000\006" +
    "\053\236\054\235\001\002\000\034\005\uffcb\012\uffcb\013" +
    "\uffcb\025\uffcb\046\uffcb\050\uffcb\052\uffcb\055\uffcb\056\uffcb" +
    "\060\uffcb\061\uffcb\064\uffcb\065\uffcb\001\002\000\032\005" +
    "\062\012\104\013\063\025\042\050\100\052\077\055\060" +
    "\056\057\060\072\061\064\064\054\065\066\001\002\000" +
    "\034\005\062\012\104\013\063\025\042\046\253\050\100" +
    "\052\077\055\060\056\057\060\072\061\064\064\054\065" +
    "\066\001\002\000\004\066\254\001\002\000\034\005\uffca" +
    "\012\uffca\013\uffca\025\uffca\046\uffca\050\uffca\052\uffca\055" +
    "\uffca\056\uffca\060\uffca\061\uffca\064\uffca\065\uffca\001\002" +
    "\000\034\005\uffe8\012\uffe8\013\uffe8\025\uffe8\046\uffe8\050" +
    "\uffe8\052\uffe8\055\uffe8\056\uffe8\060\uffe8\061\uffe8\064\uffe8" +
    "\065\uffe8\001\002\000\044\004\uffbe\005\uffbe\006\uffbe\007" +
    "\uffbe\010\uffbe\011\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\042\uffbe\046\uffbe\066" +
    "\uffbe\001\002\000\004\066\uffea\001\002\000\010\042\uff8f" +
    "\063\uff8f\066\uff8f\001\002\000\010\042\uff92\063\uff92\066" +
    "\uff92\001\002\000\010\042\uff8e\063\uff8e\066\uff8e\001\002" +
    "\000\010\042\uff8d\063\uff8d\066\uff8d\001\002\000\010\042" +
    "\uff90\063\uff90\066\uff90\001\002\000\010\042\uff91\063\uff91" +
    "\066\uff91\001\002\000\004\066\uffe9\001\002\000\044\004" +
    "\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\014\uffc1" +
    "\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\042\uffc1\046\uffc1\066\uffc1\001\002\000\004\025\271" +
    "\001\002\000\004\042\272\001\002\000\004\066\uffc7\001" +
    "\002\000\044\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd" +
    "\011\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021" +
    "\uffbd\022\uffbd\023\uffbd\042\uffbd\046\uffbd\066\uffbd\001\002" +
    "\000\024\024\117\033\262\034\260\035\261\036\265\037" +
    "\263\040\264\041\124\045\121\001\002\000\006\063\uffd1" +
    "\066\uffd1\001\002\000\006\063\uffcf\066\uffcf\001\002\000" +
    "\006\063\uffd0\066\uffd0\001\002\000\004\050\302\001\002" +
    "\000\004\063\305\001\002\000\014\026\020\027\023\030" +
    "\024\031\025\032\021\001\002\000\004\025\304\001\002" +
    "\000\006\062\uffd3\063\uffd3\001\002\000\006\024\117\045" +
    "\121\001\002\000\004\063\307\001\002\000\006\012\104" +
    "\013\063\001\002\000\004\042\312\001\002\000\004\025" +
    "\267\001\002\000\004\045\313\001\002\000\032\005\062" +
    "\012\104\013\063\025\042\050\100\052\077\055\060\056" +
    "\057\060\072\061\064\064\054\065\066\001\002\000\034" +
    "\005\062\012\104\013\063\025\042\046\315\050\100\052" +
    "\077\055\060\056\057\060\072\061\064\064\054\065\066" +
    "\001\002\000\004\066\316\001\002\000\034\005\uffc8\012" +
    "\uffc8\013\uffc8\025\uffc8\046\uffc8\050\uffc8\052\uffc8\055\uffc8" +
    "\056\uffc8\060\uffc8\061\uffc8\064\uffc8\065\uffc8\001\002\000" +
    "\032\005\062\012\104\013\063\025\042\050\100\052\077" +
    "\055\060\056\057\060\072\061\064\064\054\065\066\001" +
    "\002\000\034\005\062\012\104\013\063\025\042\046\321" +
    "\050\100\052\077\055\060\056\057\060\072\061\064\064" +
    "\054\065\066\001\002\000\004\057\322\001\002\000\004" +
    "\041\323\001\002\000\006\024\117\045\121\001\002\000" +
    "\004\042\325\001\002\000\004\066\326\001\002\000\034" +
    "\005\uffc9\012\uffc9\013\uffc9\025\uffc9\046\uffc9\050\uffc9\052" +
    "\uffc9\055\uffc9\056\uffc9\060\uffc9\061\uffc9\064\uffc9\065\uffc9" +
    "\001\002\000\012\025\330\035\331\036\334\037\333\001" +
    "\002\000\004\042\uff82\001\002\000\004\042\uff85\001\002" +
    "\000\004\042\335\001\002\000\004\042\uff83\001\002\000" +
    "\004\042\uff84\001\002\000\004\066\uffc6\001\002\000\022" +
    "\025\340\033\262\034\260\035\261\036\265\037\263\040" +
    "\264\042\343\001\002\000\006\042\uffe0\063\uffe0\001\002" +
    "\000\006\042\uffe1\063\uffe1\001\002\000\006\042\344\063" +
    "\345\001\002\000\006\042\uffdf\063\uffdf\001\002\000\044" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\042\uffe2\046\uffe2\066\uffe2\001\002\000\044\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\042\uffe3\046\uffe3\066\uffe3\001\002\000\020\025\340" +
    "\033\262\034\260\035\261\036\265\037\263\040\264\001" +
    "\002\000\006\042\uffde\063\uffde\001\002\000\006\035\350" +
    "\040\352\001\002\000\010\044\uff87\063\uff87\066\uff87\001" +
    "\002\000\004\066\uffda\001\002\000\010\044\uff86\063\uff86" +
    "\066\uff86\001\002\000\004\043\357\001\002\000\004\035" +
    "\355\001\002\000\004\044\356\001\002\000\006\062\uffdb" +
    "\066\uffdb\001\002\000\006\035\350\040\352\001\002\000" +
    "\006\044\uffdd\063\363\001\002\000\004\044\362\001\002" +
    "\000\004\066\uffd9\001\002\000\006\035\350\040\352\001" +
    "\002\000\004\044\uffdc\001\002\000\006\042\ufff4\063\ufff4" +
    "\001\002\000\004\045\371\001\002\000\014\026\020\027" +
    "\023\030\024\031\025\032\021\001\002\000\006\042\ufff2" +
    "\063\ufff2\001\002\000\032\005\062\012\104\013\063\025" +
    "\042\050\100\052\077\055\060\056\057\060\072\061\064" +
    "\064\054\065\066\001\002\000\034\005\062\012\104\013" +
    "\063\025\042\046\373\050\100\052\077\055\060\056\057" +
    "\060\072\061\064\064\054\065\066\001\002\000\004\051" +
    "\ufff7\001\002\000\032\005\062\012\104\013\063\025\042" +
    "\050\100\052\077\055\060\056\057\060\072\061\064\064" +
    "\054\065\066\001\002\000\034\005\062\012\104\013\063" +
    "\025\042\046\376\050\100\052\077\055\060\056\057\060" +
    "\072\061\064\064\054\065\066\001\002\000\004\002\ufffa" +
    "\001\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\006\004\004\073\003\001\001\000\016\005" +
    "\013\006\006\007\011\010\014\011\012\012\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\376\006\006\007\011\010\014" +
    "\011\012\012\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\031\007\011\011\012" +
    "\012\030\001\001\000\004\002\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\034\013\033\014" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\015\102\016\104\021" +
    "\046\022\051\024\047\025\044\026\066\030\101\031\045" +
    "\032\100\033\060\035\070\040\055\041\074\042\075\043" +
    "\054\044\064\046\067\047\043\050\042\051\072\052\050" +
    "\053\052\054\040\067\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\016\106\021\046\022\051" +
    "\024\047\025\044\026\066\030\101\031\045\032\100\033" +
    "\060\035\070\040\055\041\074\042\075\043\054\044\064" +
    "\046\067\047\043\050\042\051\072\052\050\053\052\054" +
    "\040\067\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\065\117\066\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\226\001\001\000\042" +
    "\021\131\022\051\046\067\047\043\050\042\051\072\052" +
    "\050\053\052\054\122\056\136\057\135\062\140\063\134" +
    "\064\125\065\133\070\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\021\151\022\051\046\067\047\043" +
    "\050\042\051\072\052\050\053\052\054\122\055\173\056" +
    "\177\057\176\071\175\072\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\021\165\022\051" +
    "\046\067\047\043\050\042\051\072\052\050\053\052\054" +
    "\122\056\136\057\135\062\167\070\163\001\001\000\002" +
    "\001\001\000\004\061\160\001\001\000\004\060\154\001" +
    "\001\000\004\060\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\021\151\022\051\046" +
    "\067\047\043\050\042\051\072\052\050\053\052\054\122" +
    "\056\153\057\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\021\151\022\051\046\067\047\043" +
    "\050\042\051\072\052\050\053\052\054\122\056\156\057" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\021\131\022\051\046\067\047\043\050" +
    "\042\051\072\052\050\053\052\054\122\056\136\057\135" +
    "\062\140\063\134\064\162\065\133\070\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\021\131\022\051\046" +
    "\067\047\043\050\042\051\072\052\050\053\052\054\122" +
    "\056\136\057\135\062\140\063\134\064\170\065\133\070" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\021\151\022\051\046\067\047\043\050\042\051" +
    "\072\052\050\053\052\054\122\055\207\056\177\057\176" +
    "\071\175\072\174\001\001\000\036\021\151\022\051\046" +
    "\067\047\043\050\042\051\072\052\050\053\052\054\122" +
    "\055\202\056\177\057\176\071\175\072\174\001\001\000" +
    "\002\001\001\000\036\021\151\022\051\046\067\047\043" +
    "\050\042\051\072\052\050\053\052\054\122\055\206\056" +
    "\177\057\176\071\175\072\174\001\001\000\036\021\151" +
    "\022\051\046\067\047\043\050\042\051\072\052\050\053" +
    "\052\054\122\055\205\056\177\057\176\071\175\072\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\021\151\022\051\046\067\047\043\050\042" +
    "\051\072\052\050\053\052\054\122\056\216\057\176\071" +
    "\222\072\174\001\001\000\034\021\151\022\051\046\067" +
    "\047\043\050\042\051\072\052\050\053\052\054\122\056" +
    "\216\057\176\071\221\072\174\001\001\000\034\021\151" +
    "\022\051\046\067\047\043\050\042\051\072\052\050\053" +
    "\052\054\122\056\216\057\176\071\220\072\174\001\001" +
    "\000\034\021\151\022\051\046\067\047\043\050\042\051" +
    "\072\052\050\053\052\054\122\056\216\057\176\071\217" +
    "\072\174\001\001\000\034\021\151\022\051\046\067\047" +
    "\043\050\042\051\072\052\050\053\052\054\122\056\216" +
    "\057\176\071\215\072\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\021\151\022\051\046" +
    "\067\047\043\050\042\051\072\052\050\053\052\054\122" +
    "\056\216\057\176\072\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\065\117\066\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\015\232\016\104\021" +
    "\046\022\051\024\047\025\044\026\066\030\101\031\045" +
    "\032\100\033\060\035\070\040\055\041\074\042\075\043" +
    "\054\044\064\046\067\047\043\050\042\051\072\052\050" +
    "\053\052\054\040\067\073\001\001\000\062\016\106\021" +
    "\046\022\051\024\047\025\044\026\066\030\101\031\045" +
    "\032\100\033\060\035\070\040\055\041\074\042\075\043" +
    "\054\044\064\046\067\047\043\050\042\051\072\052\050" +
    "\053\052\054\040\067\073\001\001\000\010\034\236\036" +
    "\240\037\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\065\117\066\242\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\015\245\016\104\021\046\022\051\024" +
    "\047\025\044\026\066\030\101\031\045\032\100\033\060" +
    "\035\070\040\055\041\074\042\075\043\054\044\064\046" +
    "\067\047\043\050\042\051\072\052\050\053\052\054\040" +
    "\067\073\001\001\000\062\016\106\021\046\022\051\024" +
    "\047\025\044\026\066\030\101\031\045\032\100\033\060" +
    "\035\070\040\055\041\074\042\075\043\054\044\064\046" +
    "\067\047\043\050\042\051\072\052\050\053\052\054\040" +
    "\067\073\001\001\000\010\034\247\036\240\037\237\001" +
    "\001\000\002\001\001\000\064\015\251\016\104\021\046" +
    "\022\051\024\047\025\044\026\066\030\101\031\045\032" +
    "\100\033\060\035\070\040\055\041\074\042\075\043\054" +
    "\044\064\046\067\047\043\050\042\051\072\052\050\053" +
    "\052\054\040\067\073\001\001\000\062\016\106\021\046" +
    "\022\051\024\047\025\044\026\066\030\101\031\045\032" +
    "\100\033\060\035\070\040\055\041\074\042\075\043\054" +
    "\044\064\046\067\047\043\050\042\051\072\052\050\053" +
    "\052\054\040\067\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\274\056\276\065\117\066\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\300\033" +
    "\060\001\001\000\002\001\001\000\004\002\302\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\065\117\066" +
    "\305\001\001\000\002\001\001\000\006\046\310\050\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\015\313\016\104\021\046\022\051\024\047" +
    "\025\044\026\066\030\101\031\045\032\100\033\060\035" +
    "\070\040\055\041\074\042\075\043\054\044\064\046\067" +
    "\047\043\050\042\051\072\052\050\053\052\054\040\067" +
    "\073\001\001\000\062\016\106\021\046\022\051\024\047" +
    "\025\044\026\066\030\101\031\045\032\100\033\060\035" +
    "\070\040\055\041\074\042\075\043\054\044\064\046\067" +
    "\047\043\050\042\051\072\052\050\053\052\054\040\067" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\015\317\016\104\021\046\022\051\024\047\025\044\026" +
    "\066\030\101\031\045\032\100\033\060\035\070\040\055" +
    "\041\074\042\075\043\054\044\064\046\067\047\043\050" +
    "\042\051\072\052\050\053\052\054\040\067\073\001\001" +
    "\000\062\016\106\021\046\022\051\024\047\025\044\026" +
    "\066\030\101\031\045\032\100\033\060\035\070\040\055" +
    "\041\074\042\075\043\054\044\064\046\067\047\043\050" +
    "\042\051\072\052\050\053\052\054\040\067\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\065\117\066" +
    "\323\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\336\017\341\020" +
    "\340\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\336\017\345\001\001\000\002\001\001" +
    "\000\004\027\350\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\360\027" +
    "\357\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\363\027\357\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\034" +
    "\014\367\001\001\000\002\001\001\000\064\015\371\016" +
    "\104\021\046\022\051\024\047\025\044\026\066\030\101" +
    "\031\045\032\100\033\060\035\070\040\055\041\074\042" +
    "\075\043\054\044\064\046\067\047\043\050\042\051\072" +
    "\052\050\053\052\054\040\067\073\001\001\000\062\016" +
    "\106\021\046\022\051\024\047\025\044\026\066\030\101" +
    "\031\045\032\100\033\060\035\070\040\055\041\074\042" +
    "\075\043\054\044\064\046\067\047\043\050\042\051\072" +
    "\052\050\053\052\054\040\067\073\001\001\000\002\001" +
    "\001\000\064\015\374\016\104\021\046\022\051\024\047" +
    "\025\044\026\066\030\101\031\045\032\100\033\060\035" +
    "\070\040\055\041\074\042\075\043\054\044\064\046\067" +
    "\047\043\050\042\051\072\052\050\053\052\054\040\067" +
    "\073\001\001\000\062\016\106\021\046\022\051\024\047" +
    "\025\044\026\066\030\101\031\045\032\100\033\060\035" +
    "\070\040\055\041\074\042\075\043\054\044\064\046\067" +
    "\047\043\050\042\051\072\052\050\053\052\054\040\067" +
    "\073\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    Lexer lex;

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex=lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }

    //Funcion para manejar errores sintacticos
    public void syntax_error(Symbol s){
        System.out.println("Error Sintáctico: " + "\""+ s.value + "\"" + " Linea: "+(s.left+1)+" Columna: "+(s.right+1) + "\n");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //Nombre y lista de identificadores de la funcion
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<String, ArrayList<String>>();
    //Funcion actual
    String currentHash;

    //Funcion para imprimir tabla de simbolos
    public void imprimirTablaSimbolos(){
        for (String key: listaTablasSimbolos.keySet()){
            System.out.println("Tabla de simbolo : " + key);
            System.out.println("Valores : ");
            for (String item : listaTablasSimbolos.get(key)){
                System.out.println(item);
            }
            System.out.println("");
        }
    }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

        System.out.println("-------Inicio de parseo-------");
        System.out.println(" ");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // navidad ::= NT$0 navidadAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.out.println("*********** Cargando Tabla de Simbolos ************");
        System.out.println(" ");
        imprimirTablaSimbolos();
        System.out.println("-------Fin de parseo-------");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // navidadAux ::= mainNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidadAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // navidadAux ::= bolsanavidena mainNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidadAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // navidadAux ::= error navidadAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidadAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mainNavidadAux ::= FUNCTION MAIN ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		
                //System.out.println("NuevaFuncion");
                String tipoTabla = "tipo:main";
                ArrayList<String> funcionMain = new ArrayList<String>();
                currentHash = "main";
                funcionMain.add(tipoTabla);
                listaTablasSimbolos.put(currentHash, funcionMain);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainNavidadAux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // mainNavidad ::= mainNavidadAux ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainNavidad",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bolsaAux ::= FUNCTION tsantaclaus PERSONA 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //System.out.println("NuevaFuncion");
                String tipoTabla = "";
                tipoTabla = "tipo:funcion:"+tsc.toString();
                ArrayList<String> funcionMain = new ArrayList<String>();
                currentHash = per.toString();
                funcionMain.add(tipoTabla);
                listaTablasSimbolos.put(currentHash, funcionMain);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsaAux",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bolsanavidenaAux ::= bolsaAux ABRECUENTO CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenaAux",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bolsanavidenaAux ::= bolsaAux ABRECUENTO listaDeRegalos CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenaAux",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bolsanavidena ::= bolsanavidenaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidena",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bolsanavidena ::= bolsanavidena bolsanavidenaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidena",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listaDeRegalosAux ::= tsantaclaus PERSONA 
            {
              Object RESULT =null;
		int tsanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsanright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tsan = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                listaTablasSimbolos.get(currentHash).add("tipo:Param:"+per.toString()+":"+tsan.toString());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalosAux",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listaDeRegalos ::= listaDeRegalosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listaDeRegalos ::= listaDeRegalos BASTON listaDeRegalosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // adornoAux ::= llamadaASanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // adornoAux ::= infoTrineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // adornoAux ::= decorarGalleta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // adornoAux ::= leerCarta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // adornoAux ::= escribirCarta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // adornoAux ::= decoracionesNav 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // adornoAux ::= CORTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // adornoAux ::= ENVIA PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // adornoAux ::= ENVIA tlsantaclaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // adorno ::= adornoAux FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // adorno ::= luces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // villancicos ::= adorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("villancicos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // villancicos ::= villancicos adorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("villancicos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // llamadaASantaAux ::= PERSONA 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaASantaAux",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // llamadaASanta ::= llamadaASantaAux ABRECUENTO listaDeTamales CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaASanta",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // llamadaASanta ::= llamadaASantaAux ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaASanta",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listaDeTamalesAux ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamalesAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listaDeTamalesAux ::= tlsantaclaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamalesAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listaDeTamales ::= listaDeTamalesAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamales",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listaDeTamales ::= listaDeTamales BASTON listaDeTamalesAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamales",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listaAmigos ::= SantaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaAmigos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listaAmigos ::= SantaArreglo BASTON listaAmigos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaAmigos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // acceso_trineo ::= PERSONA ABREEMPAQUE l_SANTA_CLAUS CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_trineo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // llenar_trineo ::= acceso_trineo ENTREGA SantaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llenar_trineo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // colocar_trineo ::= PERSONA ENTREGA ABREEMPAQUE listaAmigos CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("colocar_trineo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // trineo ::= LOCAL tsantaclaus PERSONA ABREEMPAQUE l_SANTA_CLAUS CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tsanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tsanright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tsan = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                listaTablasSimbolos.get(currentHash).add("tipo:LocalArray:"+per.toString()+":"+tsan.toString());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trineo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // infoTrineo ::= trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // infoTrineo ::= llenar_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // infoTrineo ::= acceso_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // infoTrineo ::= colocar_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ayudanteDeGalleta ::= LOCAL tsantaclaus PERSONA 
            {
              Object RESULT =null;
		int tsanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsanright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tsan = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                listaTablasSimbolos.get(currentHash).add("tipo:Local:"+per.toString()+":"+tsan.toString());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudanteDeGalleta",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // decorarGalleta ::= ayudanteDeGalleta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // decorarGalleta ::= ayudanteDeGalleta ENTREGA tlsantaclaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // decorarGalleta ::= ayudanteDeGalleta ENTREGA whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // decorarGalleta ::= ayudanteDeGalleta ENTREGA gingerBread 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ponerLuces ::= elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ponerLuces",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ponerLuces ::= else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ponerLuces",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // if ::= ELFO ABRECUENTO gingerBread CIERRACUENTO ABREREGALO villancicos CIERRAREGALO ponerLuces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // elif ::= HADA ABRECUENTO gingerBread CIERRACUENTO ABREREGALO villancicos CIERRAREGALO ponerLuces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // else ::= DUENDE ABREREGALO villancicos CIERRAREGALO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // do_until ::= HACE ABREREGALO villancicos CIERRAREGALO REVISA ABRECUENTO gingerBread CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_until",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // for ::= ENVUELVE ABRECUENTO decorarGalleta BASTON gingerBread BASTON decoracion CIERRACUENTO ABREREGALO villancicos CIERRAREGALO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // leerCarta ::= ESCUCHA ABRECUENTO PERSONA CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leerCarta",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // escribirCarta ::= NARRA ABRECUENTO mensaje CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribirCarta",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // decoracionesNav ::= decoracionesF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesNav",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // decoracionesNav ::= decoracionI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesNav",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // decoracionesF ::= decoracionF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesF",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // decoracionesF ::= decoracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesF",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // decoracion ::= ornamentosUnicos PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // decoracionIAux ::= ornamentosUnicos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionIAux",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // decoracionIAux ::= TURENO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionIAux",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // decoracionI ::= decoracionIAux l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionI",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // decoracionF ::= TURENO l_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionF",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CindyLuWho ::= CindyLuWho RODOLFO CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CindyLuWho ::= CindyLuWhoS RODOLFO CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CindyLuWho ::= whoVille RODOLFO CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CindyLuWho ::= CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CindyLuWho ::= CindyLuWho TURENO CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CindyLuWho ::= CindyLuWhoS TURENO CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CindyLuWho ::= whoVille TURENO CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CindyLuWhoS ::= CindyLuWhoS COMETA CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CindyLuWhoS ::= CindyLuWhoS DASHER CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CindyLuWhoS ::= CindyLuWhoS DANCER CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CindyLuWhoS ::= CindyLuWhoT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CindyLuWhoT ::= CindyLuWhoT PRANCER CindyLuWhoT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoT",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CindyLuWhoT ::= SantaMate 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoT",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CindyLuWhoT ::= whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoT",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // whoVille ::= ABRECUENTO CindyLuWho CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whoVille",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sugar ::= SantaMate workshop SantaMate 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sugar ::= whoVille workshop SantaMate 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sugar ::= SantaMate workshop whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sugar ::= whoVille workshop whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // candy ::= sugar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // candy ::= BALTAZAR sugar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // candy ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // candy ::= BALTAZAR PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // candy ::= naughtyOrNice 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // candy ::= BALTAZAR naughtyOrNice 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // candy ::= llamadaASanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // candy ::= BALTAZAR llamadaASanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // candy ::= candyBox 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // candyCane ::= candy 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyCane",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // candyCane ::= candy yellowSnow candyCane 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyCane",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // candyBox ::= ABREREGALO candyCane CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyBox",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // candyBox ::= BALTAZAR ABREREGALO candyCane CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyBox",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // gingerBread ::= candyBox 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gingerBread",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // gingerBread ::= candyBox yellowSnow gingerBread 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gingerBread",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // luces ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // luces ::= do_until 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // luces ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tsantaclaus ::= FATHER_CHRISTMAS 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tsantaclaus ::= SANTA_CLAUS 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tsantaclaus ::= PAPA_NOEL 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tsantaclaus ::= SAN_NICOLAS 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tsantaclaus ::= SANTA 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tlsantaclaus ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tlsantaclaus ::= l_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tlsantaclaus ::= l_SANTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tlsantaclaus ::= l_TFATHER_CHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tlsantaclaus ::= l_FFATHER_CHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // tlsantaclaus ::= l_SAN_NICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SantaMate ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SantaMate ::= l_PAPA_NOEL 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SantaMate ::= PERSONA 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SantaMate ::= decoracionesNav 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SantaMate ::= llamadaASanta 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SantaArreglo ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaArreglo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SantaArreglo ::= l_SANTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaArreglo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // mensaje ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // mensaje ::= l_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // mensaje ::= l_SAN_NICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // mensaje ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ornamentosUnicos ::= QUIEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentosUnicos",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ornamentosUnicos ::= GRINCH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentosUnicos",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // workshop ::= SUGARPLUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // workshop ::= SNOWBALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // workshop ::= WUNORSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // workshop ::= BUSHY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // workshop ::= PEPPER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // workshop ::= SHINNY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // yellowSnow ::= MELCHOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yellowSnow",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // yellowSnow ::= GASPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("yellowSnow",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // naughtyOrNice ::= l_FFATHER_CHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("naughtyOrNice",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // naughtyOrNice ::= l_TFATHER_CHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("naughtyOrNice",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
