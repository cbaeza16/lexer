
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.p1;

import java_cup.runtime.*;
import java.lang.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\237\000\002\002\004\000\002\105\002\000\002\004" +
    "\004\000\002\005\003\000\002\005\004\000\002\005\004" +
    "\000\002\007\006\000\002\006\006\000\002\011\005\000" +
    "\002\012\010\000\002\012\011\000\002\010\003\000\002" +
    "\010\004\000\002\014\004\000\002\013\003\000\002\013" +
    "\005\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\004\000\002\063\004\000\002" +
    "\063\003\000\002\063\003\000\002\100\004\000\002\101" +
    "\003\000\002\101\004\000\002\020\003\000\002\017\006" +
    "\000\002\017\005\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\016\003\000\002" +
    "\016\005\000\002\021\003\000\002\021\005\000\002\022" +
    "\006\000\002\023\005\000\002\024\007\000\002\026\010" +
    "\000\002\102\003\000\002\102\003\000\002\102\003\000" +
    "\002\102\003\000\002\102\007\000\002\030\005\000\002" +
    "\103\003\000\002\104\004\000\002\104\004\000\002\104" +
    "\004\000\002\027\003\000\002\027\004\000\002\027\004" +
    "\000\002\031\011\000\002\032\011\000\002\033\006\000" +
    "\002\034\012\000\002\035\015\000\002\037\006\000\002" +
    "\040\006\000\002\050\003\000\002\050\003\000\002\043" +
    "\003\000\002\043\003\000\002\044\004\000\002\045\003" +
    "\000\002\045\003\000\002\046\004\000\002\047\004\000" +
    "\002\072\003\000\002\073\003\000\002\074\003\000\002" +
    "\075\003\000\002\076\003\000\002\077\003\000\002\051" +
    "\005\000\002\051\005\000\002\051\005\000\002\051\003" +
    "\000\002\051\005\000\002\051\005\000\002\051\005\000" +
    "\002\065\005\000\002\065\005\000\002\065\005\000\002" +
    "\065\003\000\002\066\005\000\002\066\003\000\002\066" +
    "\003\000\002\066\003\000\002\066\003\000\002\066\003" +
    "\000\002\106\002\000\002\052\006\000\002\067\003\000" +
    "\002\070\003\000\002\071\003\000\002\056\005\000\002" +
    "\056\005\000\002\056\005\000\002\056\005\000\002\057" +
    "\003\000\002\057\004\000\002\057\003\000\002\057\004" +
    "\000\002\057\003\000\002\057\004\000\002\057\003\000" +
    "\002\057\004\000\002\057\003\000\002\060\003\000\002" +
    "\060\005\000\002\107\002\000\002\061\006\000\002\061" +
    "\006\000\002\062\003\000\002\062\005\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\025\003\000\002" +
    "\025\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\042\003\000\002\042\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\055\003\000\002\055\003\000\002\064\003\000\002\064" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\006\003\000\051\000\001\002\000\006\003" +
    "\011\051\016\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\002\ufffe\001\002\000\004\051" +
    "\ufff6\001\002\000\006\003\011\051\016\001\002\000\004" +
    "\045\u010e\001\002\000\004\041\033\001\002\000\004\002" +
    "\uffff\001\002\000\004\051\016\001\002\000\016\026\020" +
    "\027\022\030\025\031\024\032\023\047\021\001\002\000" +
    "\004\025\030\001\002\000\004\025\uff82\001\002\000\004" +
    "\041\026\001\002\000\004\025\uff81\001\002\000\004\025" +
    "\uff7e\001\002\000\004\025\uff7f\001\002\000\004\025\uff80" +
    "\001\002\000\004\042\027\001\002\000\004\045\ufffb\001" +
    "\002\000\004\041\ufff9\001\002\000\004\051\ufff5\001\002" +
    "\000\004\002\ufffd\001\002\000\016\026\020\027\022\030" +
    "\025\031\024\032\023\042\036\001\002\000\006\042\u0108" +
    "\063\u0109\001\002\000\004\025\u0107\001\002\000\004\045" +
    "\040\001\002\000\006\042\ufff3\063\ufff3\001\002\000\036" +
    "\005\064\012\110\013\065\025\043\050\103\052\102\053" +
    "\042\054\044\055\062\056\061\060\075\061\066\064\056" +
    "\065\070\001\002\000\004\066\uffec\001\002\000\004\041" +
    "\u0101\001\002\000\010\041\uffe3\043\146\062\375\001\002" +
    "\000\004\045\372\001\002\000\022\004\uffbd\005\uffbd\006" +
    "\uffbd\007\uffbd\010\uffbd\011\uffbd\042\uffbd\066\uffbd\001\002" +
    "\000\022\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011" +
    "\uffc0\042\uffc0\066\uffc0\001\002\000\004\066\uffd3\001\002" +
    "\000\004\066\ufff0\001\002\000\004\066\ufff1\001\002\000" +
    "\006\062\370\066\uffd2\001\002\000\022\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\042\uffbf\066\uffbf\001" +
    "\002\000\004\066\uff86\001\002\000\022\004\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\011\uffbe\042\uffbe\066\uffbe\001" +
    "\002\000\004\041\361\001\002\000\004\066\uffee\001\002" +
    "\000\004\066\uff84\001\002\000\004\045\352\001\002\000" +
    "\004\041\332\001\002\000\010\062\324\063\uffca\066\uffca" +
    "\001\002\000\006\035\uffba\036\323\001\002\000\006\025" +
    "\uff6d\035\uff6d\001\002\000\004\066\uffeb\001\002\000\004" +
    "\066\uffed\001\002\000\004\041\320\001\002\000\004\066" +
    "\uffd1\001\002\000\004\066\uff85\001\002\000\006\025\317" +
    "\035\uffbb\001\002\000\004\066\uff87\001\002\000\022\025" +
    "\315\033\136\034\135\035\133\036\132\037\130\040\134" +
    "\066\uffe8\001\002\000\004\035\314\001\002\000\004\066" +
    "\313\001\002\000\004\066\uff83\001\002\000\004\066\uffe7" +
    "\001\002\000\004\041\156\001\002\000\014\026\020\027" +
    "\022\030\025\031\024\032\023\001\002\000\004\041\125" +
    "\001\002\000\004\066\uffef\001\002\000\006\062\114\066" +
    "\uffd4\001\002\000\040\005\064\012\110\013\065\025\043" +
    "\046\112\050\103\052\102\053\042\054\044\055\062\056" +
    "\061\060\075\061\066\064\056\065\070\001\002\000\006" +
    "\025\uff6e\035\uff6e\001\002\000\040\005\uffe5\012\uffe5\013" +
    "\uffe5\025\uffe5\046\uffe5\050\uffe5\052\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\060\uffe5\061\uffe5\064\uffe5\065\uffe5\001" +
    "\002\000\004\051\ufff8\001\002\000\040\005\uffe4\012\uffe4" +
    "\013\uffe4\025\uffe4\046\uffe4\050\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\060\uffe4\061\uffe4\064\uffe4\065\uffe4" +
    "\001\002\000\004\043\115\001\002\000\006\035\116\040" +
    "\121\001\002\000\010\044\uff74\063\uff74\066\uff74\001\002" +
    "\000\006\044\uffda\063\123\001\002\000\004\044\122\001" +
    "\002\000\010\044\uff73\063\uff73\066\uff73\001\002\000\004" +
    "\066\uffd0\001\002\000\006\035\116\040\121\001\002\000" +
    "\004\044\uffd9\001\002\000\022\025\127\033\136\034\135" +
    "\035\133\036\132\037\130\040\134\042\142\001\002\000" +
    "\006\042\uffdf\063\uffdf\001\002\000\012\041\uffe3\042\uffe0" +
    "\043\146\063\uffe0\001\002\000\010\042\uff78\063\uff78\066" +
    "\uff78\001\002\000\006\042\uffde\063\uffde\001\002\000\010" +
    "\042\uff7c\063\uff7c\066\uff7c\001\002\000\010\042\uff7d\063" +
    "\uff7d\066\uff7d\001\002\000\010\042\uff7b\063\uff7b\066\uff7b" +
    "\001\002\000\010\042\uff7a\063\uff7a\066\uff7a\001\002\000" +
    "\010\042\uff79\063\uff79\066\uff79\001\002\000\006\042\143" +
    "\063\144\001\002\000\006\042\uffdd\063\uffdd\001\002\000" +
    "\006\042\uffdc\063\uffdc\001\002\000\032\004\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\011\uffe1\022\uffe1\023\uffe1\042" +
    "\uffe1\046\uffe1\063\uffe1\066\uffe1\001\002\000\032\004\uffe2" +
    "\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\022\uffe2\023" +
    "\uffe2\042\uffe2\046\uffe2\063\uffe2\066\uffe2\001\002\000\020" +
    "\025\127\033\136\034\135\035\133\036\132\037\130\040" +
    "\134\001\002\000\006\042\uffdb\063\uffdb\001\002\000\004" +
    "\035\147\001\002\000\004\044\150\001\002\000\026\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\042\uffd8" +
    "\062\uffd8\063\uffd8\066\uffd8\001\002\000\004\025\152\001" +
    "\002\000\010\043\153\062\uffcf\066\uffcf\001\002\000\004" +
    "\035\154\001\002\000\004\044\155\001\002\000\006\062" +
    "\uffd5\066\uffd5\001\002\000\006\024\160\045\162\001\002" +
    "\000\004\042\307\001\002\000\004\045\230\001\002\000" +
    "\014\022\217\023\221\042\uff89\063\uff89\066\uff89\001\002" +
    "\000\022\024\uff8c\025\uff8c\033\uff8c\034\uff8c\035\uff8c\036" +
    "\uff8c\041\uff8c\045\uff8c\001\002\000\022\024\175\025\173" +
    "\033\167\034\171\035\172\036\202\041\166\045\162\001" +
    "\002\000\016\014\212\015\207\016\210\017\204\020\211" +
    "\021\213\001\002\000\010\022\uff93\023\uff93\046\uff93\001" +
    "\002\000\020\005\uffa0\012\uffa0\013\uffa0\025\uffa0\035\uffa0" +
    "\036\uffa0\041\uffa0\001\002\000\010\022\uff64\023\uff64\046" +
    "\uff64\001\002\000\004\046\233\001\002\000\010\022\uff63" +
    "\023\uff63\046\uff63\001\002\000\042\004\uff77\005\uff77\006" +
    "\uff77\007\uff77\010\uff77\011\uff77\014\uff77\015\uff77\016\uff77" +
    "\017\uff77\020\uff77\021\uff77\022\uff77\023\uff77\042\uff77\046" +
    "\uff77\001\002\000\026\014\uff75\015\uff75\016\uff75\017\uff75" +
    "\020\uff75\021\uff75\022\uff95\023\uff95\041\uffe3\046\uff95\001" +
    "\002\000\010\022\uff91\023\uff91\046\uff91\001\002\000\020" +
    "\025\225\033\167\034\171\035\172\036\202\041\166\045" +
    "\230\001\002\000\010\022\uff8f\023\uff8f\046\uff8f\001\002" +
    "\000\010\022\217\023\221\046\uff8e\001\002\000\042\004" +
    "\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\014\uff9e" +
    "\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023" +
    "\uff9e\042\uff9e\046\uff9e\001\002\000\016\014\212\015\207" +
    "\016\210\017\204\020\211\021\213\001\002\000\042\004" +
    "\uff76\005\uff76\006\uff76\007\uff76\010\uff76\011\uff76\014\uff76" +
    "\015\uff76\016\uff76\017\uff76\020\uff76\021\uff76\022\uff76\023" +
    "\uff76\042\uff76\046\uff76\001\002\000\010\022\uff97\023\uff97" +
    "\046\uff97\001\002\000\012\025\uff6c\035\uff6c\036\uff6c\041" +
    "\uff6c\001\002\000\012\025\uff9d\035\uff9d\036\uff9d\041\uff9d" +
    "\001\002\000\012\025\214\035\172\036\202\041\166\001" +
    "\002\000\012\025\uff69\035\uff69\036\uff69\041\uff69\001\002" +
    "\000\012\025\uff68\035\uff68\036\uff68\041\uff68\001\002\000" +
    "\012\025\uff67\035\uff67\036\uff67\041\uff67\001\002\000\012" +
    "\025\uff6b\035\uff6b\036\uff6b\041\uff6b\001\002\000\012\025" +
    "\uff6a\035\uff6a\036\uff6a\041\uff6a\001\002\000\010\022\uff75" +
    "\023\uff75\046\uff75\001\002\000\010\022\uff98\023\uff98\046" +
    "\uff98\001\002\000\010\022\uff9a\023\uff9a\046\uff9a\001\002" +
    "\000\022\024\uff66\025\uff66\033\uff66\034\uff66\035\uff66\036" +
    "\uff66\041\uff66\045\uff66\001\002\000\022\024\uff9c\025\uff9c" +
    "\033\uff9c\034\uff9c\035\uff9c\036\uff9c\041\uff9c\045\uff9c\001" +
    "\002\000\022\024\uff65\025\uff65\033\uff65\034\uff65\035\uff65" +
    "\036\uff65\041\uff65\045\uff65\001\002\000\022\024\175\025" +
    "\173\033\167\034\171\035\172\036\202\041\166\045\162" +
    "\001\002\000\004\046\uff8d\001\002\000\010\022\uff92\023" +
    "\uff92\046\uff92\001\002\000\026\014\uff75\015\uff75\016\uff75" +
    "\017\uff75\020\uff75\021\uff75\022\uff94\023\uff94\041\uffe3\046" +
    "\uff94\001\002\000\010\022\uff96\023\uff96\046\uff96\001\002" +
    "\000\010\022\uff90\023\uff90\046\uff90\001\002\000\022\024" +
    "\175\025\173\033\167\034\171\035\172\036\202\041\166" +
    "\045\162\001\002\000\004\046\232\001\002\000\016\022" +
    "\uff8a\023\uff8a\042\uff8a\046\uff8a\063\uff8a\066\uff8a\001\002" +
    "\000\016\022\uff8b\023\uff8b\042\uff8b\046\uff8b\063\uff8b\066" +
    "\uff8b\001\002\000\020\005\064\012\110\013\065\025\240" +
    "\035\172\036\202\041\166\001\002\000\020\004\uffa5\005" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\042\uffa5\001\002" +
    "\000\020\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011" +
    "\uffa4\042\uffa4\001\002\000\010\004\247\005\250\042\301" +
    "\001\002\000\024\004\uff75\005\uff75\006\uff75\007\uff75\010" +
    "\uff75\011\uff75\041\uffe3\042\uff75\043\146\001\002\000\020" +
    "\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\042" +
    "\uffa3\001\002\000\020\004\uffa7\005\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\011\277\042\uffa7\001\002\000\016\004\247\005" +
    "\250\006\260\007\261\010\265\042\uffae\001\002\000\020" +
    "\004\247\005\250\006\uffa1\007\uffa1\010\uffa1\011\uffa1\042" +
    "\uffa1\001\002\000\020\004\uffa2\005\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\011\uffa2\042\uffa2\001\002\000\020\005\064\012" +
    "\110\013\065\025\240\035\172\036\202\041\166\001\002" +
    "\000\020\005\uffb7\012\uffb7\013\uffb7\025\uffb7\035\uffb7\036" +
    "\uffb7\041\uffb7\001\002\000\020\005\uffb6\012\uffb6\013\uffb6" +
    "\025\uffb6\035\uffb6\036\uffb6\041\uffb6\001\002\000\020\005" +
    "\064\012\110\013\065\025\240\035\172\036\202\041\166" +
    "\001\002\000\010\004\247\005\250\042\uffab\001\002\000" +
    "\020\005\064\012\110\013\065\025\240\035\172\036\202" +
    "\041\166\001\002\000\020\005\064\012\110\013\065\025" +
    "\240\035\172\036\202\041\166\001\002\000\010\004\247" +
    "\005\250\042\uffad\001\002\000\010\004\247\005\250\042" +
    "\uffb1\001\002\000\010\004\247\005\250\042\uffaf\001\002" +
    "\000\020\005\uffb5\012\uffb5\013\uffb5\025\uffb5\035\uffb5\036" +
    "\uffb5\041\uffb5\001\002\000\020\005\uffb4\012\uffb4\013\uffb4" +
    "\025\uffb4\035\uffb4\036\uffb4\041\uffb4\001\002\000\020\005" +
    "\064\012\110\013\065\025\240\035\172\036\202\041\166" +
    "\001\002\000\020\005\064\012\110\013\065\025\240\035" +
    "\172\036\202\041\166\001\002\000\020\005\064\012\110" +
    "\013\065\025\240\035\172\036\202\041\166\001\002\000" +
    "\020\005\uffb3\012\uffb3\013\uffb3\025\uffb3\035\uffb3\036\uffb3" +
    "\041\uffb3\001\002\000\020\005\064\012\110\013\065\025" +
    "\240\035\172\036\202\041\166\001\002\000\020\005\064" +
    "\012\110\013\065\025\240\035\172\036\202\041\166\001" +
    "\002\000\016\004\uffaa\005\uffaa\006\260\007\261\010\265" +
    "\042\uffaa\001\002\000\020\004\uffa1\005\uffa1\006\uffa1\007" +
    "\uffa1\010\uffa1\011\uffa1\042\uffa1\001\002\000\016\004\uffa9" +
    "\005\uffa9\006\260\007\261\010\265\042\uffa9\001\002\000" +
    "\016\004\uffb0\005\uffb0\006\260\007\261\010\265\042\uffb0" +
    "\001\002\000\016\004\uffac\005\uffac\006\260\007\261\010" +
    "\265\042\uffac\001\002\000\016\004\uffa8\005\uffa8\006\260" +
    "\007\261\010\265\042\uffa8\001\002\000\020\005\064\012" +
    "\110\013\065\025\240\035\172\036\202\041\166\001\002" +
    "\000\020\005\uffb2\012\uffb2\013\uffb2\025\uffb2\035\uffb2\036" +
    "\uffb2\041\uffb2\001\002\000\020\004\uffa6\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\011\277\042\uffa6\001\002\000\046\004" +
    "\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\014\uff9f" +
    "\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023" +
    "\uff9f\042\uff9f\046\uff9f\063\uff9f\066\uff9f\001\002\000\012" +
    "\025\214\035\172\036\202\041\166\001\002\000\010\022" +
    "\uff99\023\uff99\046\uff99\001\002\000\010\022\uff9b\023\uff9b" +
    "\046\uff9b\001\002\000\006\024\160\045\162\001\002\000" +
    "\010\042\uff88\063\uff88\066\uff88\001\002\000\004\045\310" +
    "\001\002\000\036\005\064\012\110\013\065\025\043\050" +
    "\103\052\102\053\042\054\044\055\062\056\061\060\075" +
    "\061\066\064\056\065\070\001\002\000\040\005\064\012" +
    "\110\013\065\025\043\046\312\050\103\052\102\053\042" +
    "\054\044\055\062\056\061\060\075\061\066\064\056\065" +
    "\070\001\002\000\004\066\uffc7\001\002\000\040\005\uffe6" +
    "\012\uffe6\013\uffe6\025\uffe6\046\uffe6\050\uffe6\052\uffe6\053" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\060\uffe6\061\uffe6\064\uffe6" +
    "\065\uffe6\001\002\000\022\004\uffb9\005\uffb9\006\uffb9\007" +
    "\uffb9\010\uffb9\011\uffb9\042\uffb9\066\uffb9\001\002\000\004" +
    "\066\uffea\001\002\000\004\066\uffe9\001\002\000\022\004" +
    "\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\042\uffbc" +
    "\066\uffbc\001\002\000\004\025\321\001\002\000\004\042" +
    "\322\001\002\000\004\066\uffc2\001\002\000\022\004\uffb8" +
    "\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\042\uffb8\066" +
    "\uffb8\001\002\000\024\024\160\033\136\034\135\035\133" +
    "\036\132\037\130\040\134\041\166\045\162\001\002\000" +
    "\006\063\uffc9\066\uffc9\001\002\000\006\063\uffce\066\uffce" +
    "\001\002\000\006\063\uffcb\066\uffcb\001\002\000\006\063" +
    "\uffcd\066\uffcd\001\002\000\006\063\uffcc\066\uffcc\001\002" +
    "\000\006\025\333\050\335\001\002\000\004\062\324\001" +
    "\002\000\004\063\340\001\002\000\014\026\020\027\022" +
    "\030\025\031\024\032\023\001\002\000\004\025\337\001" +
    "\002\000\006\062\uffcf\063\uffcf\001\002\000\006\024\160" +
    "\045\162\001\002\000\004\063\342\001\002\000\006\012" +
    "\110\013\065\001\002\000\004\042\345\001\002\000\004" +
    "\025\317\001\002\000\004\045\346\001\002\000\036\005" +
    "\064\012\110\013\065\025\043\050\103\052\102\053\042" +
    "\054\044\055\062\056\061\060\075\061\066\064\056\065" +
    "\070\001\002\000\040\005\064\012\110\013\065\025\043" +
    "\046\350\050\103\052\102\053\042\054\044\055\062\056" +
    "\061\060\075\061\066\064\056\065\070\001\002\000\004" +
    "\066\uffc3\001\002\000\006\063\uffc8\066\uffc8\001\002\000" +
    "\036\005\064\012\110\013\065\025\043\050\103\052\102" +
    "\053\042\054\044\055\062\056\061\060\075\061\066\064" +
    "\056\065\070\001\002\000\040\005\064\012\110\013\065" +
    "\025\043\046\354\050\103\052\102\053\042\054\044\055" +
    "\062\056\061\060\075\061\066\064\056\065\070\001\002" +
    "\000\004\057\355\001\002\000\004\041\356\001\002\000" +
    "\006\024\160\045\162\001\002\000\004\042\360\001\002" +
    "\000\004\066\uffc4\001\002\000\012\025\362\035\363\036" +
    "\366\037\365\001\002\000\004\042\uff6f\001\002\000\004" +
    "\042\uff72\001\002\000\004\042\367\001\002\000\004\042" +
    "\uff70\001\002\000\004\042\uff71\001\002\000\004\066\uffc1" +
    "\001\002\000\006\035\116\040\121\001\002\000\004\066" +
    "\uffd7\001\002\000\036\005\064\012\110\013\065\025\043" +
    "\050\103\052\102\053\042\054\044\055\062\056\061\060" +
    "\075\061\066\064\056\065\070\001\002\000\040\005\064" +
    "\012\110\013\065\025\043\046\374\050\103\052\102\053" +
    "\042\054\044\055\062\056\061\060\075\061\066\064\056" +
    "\065\070\001\002\000\004\066\uffc5\001\002\000\026\024" +
    "\160\033\136\034\135\035\133\036\132\037\130\040\134" +
    "\041\166\043\376\045\162\001\002\000\006\035\116\040" +
    "\121\001\002\000\004\044\u0100\001\002\000\004\066\uffd6" +
    "\001\002\000\006\024\160\045\162\001\002\000\004\042" +
    "\u0103\001\002\000\004\045\u0104\001\002\000\036\005\064" +
    "\012\110\013\065\025\043\050\103\052\102\053\042\054" +
    "\044\055\062\056\061\060\075\061\066\064\056\065\070" +
    "\001\002\000\040\005\064\012\110\013\065\025\043\046" +
    "\u0106\050\103\052\102\053\042\054\044\055\062\056\061" +
    "\060\075\061\066\064\056\065\070\001\002\000\004\066" +
    "\uffc6\001\002\000\006\042\ufff4\063\ufff4\001\002\000\004" +
    "\045\u010b\001\002\000\014\026\020\027\022\030\025\031" +
    "\024\032\023\001\002\000\006\042\ufff2\063\ufff2\001\002" +
    "\000\036\005\064\012\110\013\065\025\043\050\103\052" +
    "\102\053\042\054\044\055\062\056\061\060\075\061\066" +
    "\064\056\065\070\001\002\000\040\005\064\012\110\013" +
    "\065\025\043\046\u010d\050\103\052\102\053\042\054\044" +
    "\055\062\056\061\060\075\061\066\064\056\065\070\001" +
    "\002\000\004\051\ufff7\001\002\000\036\005\064\012\110" +
    "\013\065\025\043\050\103\052\102\053\042\054\044\055" +
    "\062\056\061\060\075\061\066\064\056\065\070\001\002" +
    "\000\040\005\064\012\110\013\065\025\043\046\u0110\050" +
    "\103\052\102\053\042\054\044\055\062\056\061\060\075" +
    "\061\066\064\056\065\070\001\002\000\004\002\ufffa\001" +
    "\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\006\004\004\105\003\001\001\000\016\005" +
    "\013\006\006\007\011\010\014\011\012\012\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\u0110\006\006\007\011\010\014" +
    "\011\012\012\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\031\007\011\011\012" +
    "\012\030\001\001\000\004\002\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\034\013\033\014" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\017\050\020\103\022" +
    "\051\023\046\024\070\026\105\027\104\030\062\031\073" +
    "\032\071\033\053\034\057\035\077\036\100\037\056\040" +
    "\066\042\072\043\045\044\044\045\075\046\052\047\054" +
    "\050\040\063\076\100\110\101\106\102\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\104\350\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\104\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\315\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\066\017\050\020\103\022\051\023\046" +
    "\024\070\026\105\027\104\030\062\031\073\032\071\033" +
    "\053\034\057\035\077\036\100\037\056\040\066\042\072" +
    "\043\045\044\044\045\075\046\052\047\054\050\040\063" +
    "\076\100\112\102\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\117\025\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\123\025\116\001\001\000\002" +
    "\001\001\000\016\003\125\015\140\016\136\017\130\020" +
    "\103\022\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\125" +
    "\015\144\017\130\020\103\022\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\061\160\062\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\055" +
    "\217\071\304\001\001\000\004\107\162\001\001\000\026" +
    "\017\173\020\103\052\200\053\177\056\202\057\176\060" +
    "\167\061\175\064\164\067\163\001\001\000\006\054\204" +
    "\070\301\001\001\000\002\001\001\000\004\106\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\017\226\020\103\052\200\053\177\056\225\064\223" +
    "\067\163\001\001\000\002\001\001\000\006\055\217\071" +
    "\221\001\001\000\002\001\001\000\006\054\204\070\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\052\214\053\177\067\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\017\173\020\103" +
    "\052\200\053\177\056\202\057\176\060\222\061\175\064" +
    "\164\067\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\017\173\020\103\052\200\053\177\056\202\057\176" +
    "\060\230\061\175\064\164\067\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\017\240" +
    "\020\103\022\244\042\072\043\045\044\044\045\075\046" +
    "\052\047\054\050\235\051\236\052\243\053\177\065\242" +
    "\066\241\067\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\072\252\073\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\077\275\001\001\000\014\072" +
    "\263\073\262\074\266\075\265\076\261\001\001\000\006" +
    "\072\245\073\250\001\001\000\002\001\001\000\042\017" +
    "\240\020\103\022\244\042\072\043\045\044\044\045\075" +
    "\046\052\047\054\050\235\051\256\052\243\053\177\065" +
    "\242\066\241\067\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\017\240\020\103\022\244\042\072\043" +
    "\045\044\044\045\075\046\052\047\054\050\235\051\251" +
    "\052\243\053\177\065\242\066\241\067\234\001\001\000" +
    "\006\072\252\073\253\001\001\000\042\017\240\020\103" +
    "\022\244\042\072\043\045\044\044\045\075\046\052\047" +
    "\054\050\235\051\255\052\243\053\177\065\242\066\241" +
    "\067\234\001\001\000\042\017\240\020\103\022\244\042" +
    "\072\043\045\044\044\045\075\046\052\047\054\050\235" +
    "\051\254\052\243\053\177\065\242\066\241\067\234\001" +
    "\001\000\006\072\252\073\253\001\001\000\006\072\252" +
    "\073\253\001\001\000\006\072\252\073\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\017\240\020\103" +
    "\022\244\042\072\043\045\044\044\045\075\046\052\047" +
    "\054\050\235\052\270\053\177\065\274\066\241\067\234" +
    "\001\001\000\040\017\240\020\103\022\244\042\072\043" +
    "\045\044\044\045\075\046\052\047\054\050\235\052\270" +
    "\053\177\065\273\066\241\067\234\001\001\000\040\017" +
    "\240\020\103\022\244\042\072\043\045\044\044\045\075" +
    "\046\052\047\054\050\235\052\270\053\177\065\272\066" +
    "\241\067\234\001\001\000\002\001\001\000\040\017\240" +
    "\020\103\022\244\042\072\043\045\044\044\045\075\046" +
    "\052\047\054\050\235\052\270\053\177\065\271\066\241" +
    "\067\234\001\001\000\040\017\240\020\103\022\244\042" +
    "\072\043\045\044\044\045\075\046\052\047\054\050\235" +
    "\052\270\053\177\065\267\066\241\067\234\001\001\000" +
    "\010\074\266\075\265\076\261\001\001\000\002\001\001" +
    "\000\010\074\266\075\265\076\261\001\001\000\010\074" +
    "\266\075\265\076\261\001\001\000\010\074\266\075\265" +
    "\076\261\001\001\000\010\074\266\075\265\076\261\001" +
    "\001\000\036\017\240\020\103\022\244\042\072\043\045" +
    "\044\044\045\075\046\052\047\054\050\235\052\270\053" +
    "\177\066\277\067\234\001\001\000\002\001\001\000\004" +
    "\077\275\001\001\000\002\001\001\000\010\052\302\053" +
    "\177\067\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\061\160\062\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\017\050\020\103\022\051\023\046" +
    "\024\070\026\105\027\104\030\062\031\073\032\071\033" +
    "\053\034\057\035\077\036\100\037\056\040\066\042\072" +
    "\043\045\044\044\045\075\046\052\047\054\050\040\063" +
    "\076\100\110\101\310\102\047\001\001\000\066\017\050" +
    "\020\103\022\051\023\046\024\070\026\105\027\104\030" +
    "\062\031\073\032\071\033\053\034\057\035\077\036\100" +
    "\037\056\040\066\042\072\043\045\044\044\045\075\046" +
    "\052\047\054\050\040\063\076\100\112\102\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\325\052\330\061\160\062\326\103\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\333" +
    "\030\062\001\001\000\004\104\350\001\001\000\002\001" +
    "\001\000\004\002\335\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\061\160\062\340\001\001\000\002\001" +
    "\001\000\006\042\343\044\342\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\017\050\020" +
    "\103\022\051\023\046\024\070\026\105\027\104\030\062" +
    "\031\073\032\071\033\053\034\057\035\077\036\100\037" +
    "\056\040\066\042\072\043\045\044\044\045\075\046\052" +
    "\047\054\050\040\063\076\100\110\101\346\102\047\001" +
    "\001\000\066\017\050\020\103\022\051\023\046\024\070" +
    "\026\105\027\104\030\062\031\073\032\071\033\053\034" +
    "\057\035\077\036\100\037\056\040\066\042\072\043\045" +
    "\044\044\045\075\046\052\047\054\050\040\063\076\100" +
    "\112\102\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\017\050\020\103\022\051\023\046\024\070\026" +
    "\105\027\104\030\062\031\073\032\071\033\053\034\057" +
    "\035\077\036\100\037\056\040\066\042\072\043\045\044" +
    "\044\045\075\046\052\047\054\050\040\063\076\100\110" +
    "\101\352\102\047\001\001\000\066\017\050\020\103\022" +
    "\051\023\046\024\070\026\105\027\104\030\062\031\073" +
    "\032\071\033\053\034\057\035\077\036\100\037\056\040" +
    "\066\042\072\043\045\044\044\045\075\046\052\047\054" +
    "\050\040\063\076\100\112\102\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\061\160\062\356\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\363\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\370\001\001\000\002\001\001\000\070\017\050" +
    "\020\103\022\051\023\046\024\070\026\105\027\104\030" +
    "\062\031\073\032\071\033\053\034\057\035\077\036\100" +
    "\037\056\040\066\042\072\043\045\044\044\045\075\046" +
    "\052\047\054\050\040\063\076\100\110\101\372\102\047" +
    "\001\001\000\066\017\050\020\103\022\051\023\046\024" +
    "\070\026\105\027\104\030\062\031\073\032\071\033\053" +
    "\034\057\035\077\036\100\037\056\040\066\042\072\043" +
    "\045\044\044\045\075\046\052\047\054\050\040\063\076" +
    "\100\112\102\047\001\001\000\002\001\001\000\014\003" +
    "\325\052\330\061\160\062\326\103\327\001\001\000\006" +
    "\021\376\025\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\061\160\062\u0101\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\017\050\020\103\022\051\023" +
    "\046\024\070\026\105\027\104\030\062\031\073\032\071" +
    "\033\053\034\057\035\077\036\100\037\056\040\066\042" +
    "\072\043\045\044\044\045\075\046\052\047\054\050\040" +
    "\063\076\100\110\101\u0104\102\047\001\001\000\066\017" +
    "\050\020\103\022\051\023\046\024\070\026\105\027\104" +
    "\030\062\031\073\032\071\033\053\034\057\035\077\036" +
    "\100\037\056\040\066\042\072\043\045\044\044\045\075" +
    "\046\052\047\054\050\040\063\076\100\112\102\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\034\014\u0109\001\001\000\002\001\001\000" +
    "\070\017\050\020\103\022\051\023\046\024\070\026\105" +
    "\027\104\030\062\031\073\032\071\033\053\034\057\035" +
    "\077\036\100\037\056\040\066\042\072\043\045\044\044" +
    "\045\075\046\052\047\054\050\040\063\076\100\110\101" +
    "\u010b\102\047\001\001\000\066\017\050\020\103\022\051" +
    "\023\046\024\070\026\105\027\104\030\062\031\073\032" +
    "\071\033\053\034\057\035\077\036\100\037\056\040\066" +
    "\042\072\043\045\044\044\045\075\046\052\047\054\050" +
    "\040\063\076\100\112\102\047\001\001\000\002\001\001" +
    "\000\070\017\050\020\103\022\051\023\046\024\070\026" +
    "\105\027\104\030\062\031\073\032\071\033\053\034\057" +
    "\035\077\036\100\037\056\040\066\042\072\043\045\044" +
    "\044\045\075\046\052\047\054\050\040\063\076\100\110" +
    "\101\u010e\102\047\001\001\000\066\017\050\020\103\022" +
    "\051\023\046\024\070\026\105\027\104\030\062\031\073" +
    "\032\071\033\053\034\057\035\077\036\100\037\056\040" +
    "\066\042\072\043\045\044\044\045\075\046\052\047\054" +
    "\050\040\063\076\100\112\102\047\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    Lexer lex;
    int cont = 0;
    String errorManager ="";

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex=lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }

    //Funcion para manejar errores sintacticos
    public void syntax_error(Symbol s){
        this.cont += 1;
        this.errorManager += "Error Sintáctico: " + "\""+ s.value + "\"" + " Linea: "+(s.left+1)+" Columna: "+(s.right+1) + "\n";
    }

    //Funcion para manejar errores sintacticos fatales
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        this.errorManager += "Error Sintáctico: " + "\""+ s.value + "\"" + " Linea: "+(s.left+1)+" Columna: "+(s.right+1) + "\n";
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //Hasmap con nombre y lista de identificadores de la funcion
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<String, ArrayList<String>>();
    //Funcion actual
    String currentFunction;
    

    //Funcion para imprimir tabla de simbolos
    public void imprimirTablaSimbolos(){
        for (String name: listaTablasSimbolos.keySet()){
            System.out.println("Tabla de simbolo: " + name);
            System.out.println("Valores : ");
            for (String item : listaTablasSimbolos.get(name)){
                System.out.println(item);
            }
            System.out.println("");
        }
    }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

        System.out.println("-------Inicio Fase Sintactica-------");
        System.out.println(" ");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // navidad ::= NT$0 navidadAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.out.println("****** Cargando Tabla de Simbolos ******");
        System.out.println(" ");
        imprimirTablaSimbolos();
        System.out.println("-------Fin Fase Sintactica-------");
        System.out.println(" ");
        if(cont == 0) System.out.println("[Done] El archivo puede ser leido con exito");
        else System.out.println("[Warning] El archivo presenta " + String.valueOf(cont) + " errores sintacticos");
        System.out.println(errorManager);
        System.out.println(" ");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // navidadAux ::= mainNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidadAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // navidadAux ::= bolsanavidena mainNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidadAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // navidadAux ::= error navidadAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidadAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mainNavidadAux ::= FUNCTION MAIN ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		
                System.out.println("Inicio de funcion Main");
                String tipoTabla = "Tipo:main";
                ArrayList<String> funcionMain = new ArrayList<String>();
                currentFunction = "main";
                funcionMain.add(tipoTabla);
                listaTablasSimbolos.put(currentFunction, funcionMain);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainNavidadAux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // mainNavidad ::= mainNavidadAux ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainNavidad",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bolsaAux ::= FUNCTION tsantaclaus PERSONA 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Inicio de funcion " + per.toString());
                String tipoTabla = "";
                tipoTabla = "Tipo:function - "+"Retorna:"+tsc.toString();
                ArrayList<String> funcionMain = new ArrayList<String>();
                currentFunction = per.toString();
                funcionMain.add(tipoTabla);
                listaTablasSimbolos.put(currentFunction, funcionMain);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsaAux",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bolsanavidenaAux ::= bolsaAux ABRECUENTO CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenaAux",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bolsanavidenaAux ::= bolsaAux ABRECUENTO listaDeRegalos CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenaAux",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bolsanavidena ::= bolsanavidenaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidena",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bolsanavidena ::= bolsanavidena bolsanavidenaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidena",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listaDeRegalosAux ::= tsantaclaus PERSONA 
            {
              Object RESULT =null;
		int tsanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsanright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tsan = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                listaTablasSimbolos.get(currentFunction).add("Tipo:Param - "+ "ID:" +per.toString()+":"+tsan.toString());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalosAux",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listaDeRegalos ::= listaDeRegalosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listaDeRegalos ::= listaDeRegalos BASTON listaDeRegalosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // adornoAux ::= llamadaASanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // adornoAux ::= infoTrineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // adornoAux ::= decorarGalleta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // adornoAux ::= leerCarta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // adornoAux ::= escribirCarta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // adornoAux ::= decoracionesNav 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // adornoAux ::= CORTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // adornoAux ::= ENVIA PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // adornoAux ::= ENVIA tlsantaclaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // adornoAux ::= ENVIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // adornoAux ::= luces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // adorno ::= adornoAux FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // villancicos ::= adorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("villancicos",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // villancicos ::= villancicos adorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("villancicos",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PersonaAux ::= PERSONA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PersonaAux",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // llamadaASanta ::= PersonaAux ABRECUENTO listaDeTamales CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaASanta",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // llamadaASanta ::= PersonaAux ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaASanta",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listaDeTamalesAux ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamalesAux",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listaDeTamalesAux ::= tlsantaclaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamalesAux",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listaDeTamalesAux ::= llamadaASanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamalesAux",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listaDeTamalesAux ::= acceso_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamalesAux",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listaDeTamales ::= listaDeTamalesAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listaDeTamales ::= listaDeTamales BASTON listaDeTamalesAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listaAmigos ::= SantaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaAmigos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listaAmigos ::= SantaArreglo BASTON listaAmigos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaAmigos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // acceso_trineo ::= PERSONA ABREEMPAQUE l_SANTA_CLAUS CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_trineo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // llenar_trineo ::= acceso_trineo ENTREGA SantaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llenar_trineo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // colocar_trineo ::= PERSONA ENTREGA ABREEMPAQUE listaAmigos CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("colocar_trineo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // trineo ::= LOCAL tsantaclaus PERSONA ABREEMPAQUE l_SANTA_CLAUS CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tsanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tsanright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tsan = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                listaTablasSimbolos.get(currentFunction).add("Tipo:LocalArray - "+ "ID:" +per.toString()+":"+tsan.toString());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trineo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // infoTrineo ::= trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // infoTrineo ::= llenar_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // infoTrineo ::= acceso_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // infoTrineo ::= colocar_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // infoTrineo ::= trineo ENTREGA ABREEMPAQUE listaAmigos CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ayudanteDeGalleta ::= LOCAL tsantaclaus PERSONA 
            {
              Object RESULT =null;
		int tsanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsanright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tsan = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                listaTablasSimbolos.get(currentFunction).add("Tipo:Local - "+ "ID:" +per.toString()+":"+tsan.toString());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudanteDeGalleta",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tlsantaclausAux ::= tlsantaclaus 
            {
              Object RESULT =null;
		int tlsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(tls);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclausAux",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // entregaGalleta ::= ENTREGA tlsantaclausAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entregaGalleta",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // entregaGalleta ::= ENTREGA whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entregaGalleta",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // entregaGalleta ::= ENTREGA gingerBread 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("entregaGalleta",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // decorarGalleta ::= ayudanteDeGalleta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // decorarGalleta ::= ayudanteDeGalleta entregaGalleta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // decorarGalleta ::= PERSONA entregaGalleta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // if ::= ELFO ABRECUENTO gingerBread CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // elif ::= HADA ABRECUENTO gingerBread CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // else ::= DUENDE ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // do_until ::= HACE ABREREGALO villancicos CIERRAREGALO REVISA ABRECUENTO gingerBread CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_until",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // for ::= ENVUELVE ABRECUENTO decorarGalleta BASTON gingerBread BASTON decoracion CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // leerCarta ::= ESCUCHA ABRECUENTO PERSONA CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leerCarta",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // escribirCarta ::= NARRA ABRECUENTO mensaje CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribirCarta",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // decoracionesNav ::= decoracionesF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesNav",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // decoracionesNav ::= decoracionI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesNav",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // decoracionesF ::= decoracionF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesF",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // decoracionesF ::= decoracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesF",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // decoracion ::= ornamentosUnicos PERSONA 
            {
              Object RESULT =null;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object om = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(om); System.out.println(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // decoracionIAux ::= ornamentosUnicos 
            {
              Object RESULT =null;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object om = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(om);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionIAux",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // decoracionIAux ::= TURENO 
            {
              Object RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(tr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionIAux",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // decoracionI ::= decoracionIAux l_SANTA_CLAUS 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(ls);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionI",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // decoracionF ::= TURENO l_PAPA_NOEL 
            {
              Object RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(tr); System.out.println(lp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionF",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // rodolfoAux ::= RODOLFO 
            {
              Object RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(rd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rodolfoAux",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // turenoAux ::= TURENO 
            {
              Object RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(tr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turenoAux",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cometaAux ::= COMETA 
            {
              Object RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(cm);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cometaAux",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // dasherAux ::= DASHER 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(ds);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dasherAux",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dancerAux ::= DANCER 
            {
              Object RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(dc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dancerAux",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // prancerAux ::= PRANCER 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(pr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prancerAux",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CindyLuWho ::= CindyLuWho rodolfoAux CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CindyLuWho ::= CindyLuWhoS rodolfoAux CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CindyLuWho ::= whoVille rodolfoAux CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CindyLuWho ::= CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CindyLuWho ::= CindyLuWho turenoAux CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CindyLuWho ::= CindyLuWhoS turenoAux CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CindyLuWho ::= whoVille turenoAux CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CindyLuWhoS ::= CindyLuWhoS cometaAux CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CindyLuWhoS ::= CindyLuWhoS dasherAux CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CindyLuWhoS ::= CindyLuWhoS dancerAux CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CindyLuWhoS ::= CindyLuWhoT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CindyLuWhoT ::= CindyLuWhoT prancerAux CindyLuWhoT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoT",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CindyLuWhoT ::= SantaMateAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoT",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CindyLuWhoT ::= decoracionesNav 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoT",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CindyLuWhoT ::= llamadaASanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoT",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CindyLuWhoT ::= acceso_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoT",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CindyLuWhoT ::= whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoT",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$1 ::= 
            {
              Object RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println(ac);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // whoVille ::= ABRECUENTO NT$1 CindyLuWho CIERRACUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(cc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whoVille",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SantaMateAux ::= SantaMate 
            {
              Object RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(sm);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMateAux",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // workshopAux ::= workshop 
            {
              Object RESULT =null;
		int wkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wkright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object wk = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(wk);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshopAux",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // yellowSnowAux ::= yellowSnow 
            {
              Object RESULT =null;
		int ysleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ysright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ys = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(ys);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("yellowSnowAux",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sugar ::= SantaMateAux workshopAux SantaMateAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sugar ::= whoVille workshopAux SantaMateAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sugar ::= SantaMateAux workshopAux whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sugar ::= whoVille workshopAux whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // candy ::= sugar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // candy ::= BALTAZAR sugar 
            {
              Object RESULT =null;
		int bzleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bzright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bz = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(bz);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // candy ::= PERSONA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // candy ::= BALTAZAR PERSONA 
            {
              Object RESULT =null;
		int bzleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bzright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bz = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(bz); System.out.println(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // candy ::= naughtyOrNice 
            {
              Object RESULT =null;
		int nnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(nn);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // candy ::= BALTAZAR naughtyOrNice 
            {
              Object RESULT =null;
		int bzleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bzright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bz = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(bz); System.out.println(nn);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // candy ::= llamadaASanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // candy ::= BALTAZAR llamadaASanta 
            {
              Object RESULT =null;
		int bzleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bzright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bz = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(bz);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // candy ::= candyBox 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // candyCane ::= candy 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyCane",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // candyCane ::= candy yellowSnowAux candyCane 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyCane",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$2 ::= 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println(ar);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // candyBox ::= ABREREGALO NT$2 candyCane CIERRAREGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int crleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int crright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(cr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyBox",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // candyBox ::= BALTAZAR ABREREGALO candyCane CIERRAREGALO 
            {
              Object RESULT =null;
		int bzleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bzright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object bz = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int crleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int crright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(bz);  System.out.println(ar);  System.out.println(cr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyBox",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // gingerBread ::= candyBox 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gingerBread",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // gingerBread ::= candyBox yellowSnowAux gingerBread 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gingerBread",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // luces ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // luces ::= else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // luces ::= elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // luces ::= do_until 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // luces ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tsantaclaus ::= FATHER_CHRISTMAS 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tsantaclaus ::= SANTA_CLAUS 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tsantaclaus ::= PAPA_NOEL 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tsantaclaus ::= SAN_NICOLAS 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tsantaclaus ::= SANTA 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // tlsantaclaus ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;
		int tlsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // tlsantaclaus ::= l_PAPA_NOEL 
            {
              Object RESULT =null;
		int tlsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // tlsantaclaus ::= l_SANTA 
            {
              Object RESULT =null;
		int tlsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // tlsantaclaus ::= l_TFATHER_CHRISTMAS 
            {
              Object RESULT =null;
		int tlsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // tlsantaclaus ::= l_FFATHER_CHRISTMAS 
            {
              Object RESULT =null;
		int tlsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // tlsantaclaus ::= l_SAN_NICOLAS 
            {
              Object RESULT =null;
		int tlsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SantaMate ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SantaMate ::= l_PAPA_NOEL 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SantaMate ::= PERSONA 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SantaArreglo ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaArreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SantaArreglo ::= l_SANTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaArreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // mensaje ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // mensaje ::= l_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // mensaje ::= l_SAN_NICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // mensaje ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ornamentosUnicos ::= QUIEN 
            {
              Object RESULT =null;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object om = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = om;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentosUnicos",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ornamentosUnicos ::= GRINCH 
            {
              Object RESULT =null;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object om = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = om;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentosUnicos",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // workshop ::= SUGARPLUM 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // workshop ::= SNOWBALL 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // workshop ::= WUNORSE 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // workshop ::= BUSHY 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // workshop ::= PEPPER 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // workshop ::= SHINNY 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // yellowSnow ::= MELCHOR 
            {
              Object RESULT =null;
		int ysleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ysright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ys = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ys;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("yellowSnow",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // yellowSnow ::= GASPAR 
            {
              Object RESULT =null;
		int ysleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ysright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ys = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ys;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("yellowSnow",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // naughtyOrNice ::= l_FFATHER_CHRISTMAS 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("naughtyOrNice",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // naughtyOrNice ::= l_TFATHER_CHRISTMAS 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("naughtyOrNice",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
