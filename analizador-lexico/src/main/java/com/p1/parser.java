
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.p1;

import java_cup.runtime.*;
import java.lang.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\004\000\002\104\002\000\002\004" +
    "\004\000\002\005\003\000\002\005\004\000\002\005\004" +
    "\000\002\007\006\000\002\006\006\000\002\011\005\000" +
    "\002\012\010\000\002\012\011\000\002\010\003\000\002" +
    "\010\004\000\002\014\004\000\002\013\003\000\002\013" +
    "\005\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\004\000\002\064\004\000\002" +
    "\101\004\000\002\101\003\000\002\102\003\000\002\102" +
    "\004\000\002\020\003\000\002\017\006\000\002\017\005" +
    "\000\002\015\003\000\002\015\003\000\002\016\003\000" +
    "\002\016\005\000\002\021\003\000\002\021\005\000\002" +
    "\022\006\000\002\023\005\000\002\024\007\000\002\026" +
    "\010\000\002\103\003\000\002\103\003\000\002\103\003" +
    "\000\002\103\003\000\002\030\005\000\002\027\003\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\031\003\000\002\031\003\000\002\032\012\000\002\033" +
    "\012\000\002\034\007\000\002\035\013\000\002\036\016" +
    "\000\002\040\006\000\002\041\006\000\002\051\003\000" +
    "\002\051\003\000\002\044\003\000\002\044\003\000\002" +
    "\045\004\000\002\046\003\000\002\046\003\000\002\047" +
    "\004\000\002\050\004\000\002\073\003\000\002\074\003" +
    "\000\002\075\003\000\002\076\003\000\002\077\003\000" +
    "\002\100\003\000\002\052\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\003\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\066\005\000\002\066\005" +
    "\000\002\066\005\000\002\066\003\000\002\067\005\000" +
    "\002\067\003\000\002\067\003\000\002\105\002\000\002" +
    "\053\006\000\002\070\003\000\002\071\003\000\002\072" +
    "\003\000\002\057\005\000\002\057\005\000\002\057\005" +
    "\000\002\057\005\000\002\060\003\000\002\060\004\000" +
    "\002\060\003\000\002\060\004\000\002\060\003\000\002" +
    "\060\004\000\002\060\003\000\002\060\004\000\002\060" +
    "\003\000\002\061\003\000\002\061\005\000\002\106\002" +
    "\000\002\062\006\000\002\062\006\000\002\063\003\000" +
    "\002\063\005\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\025\003\000\002\025\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\043\003\000\002\043\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\056\003\000\002\056\003" +
    "\000\002\065\003\000\002\065\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\006\003\000\051\000\001\002\000\006\003" +
    "\011\051\016\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\002\ufffe\001\002\000\004\051" +
    "\ufff6\001\002\000\006\003\011\051\016\001\002\000\004" +
    "\045\u0107\001\002\000\004\041\033\001\002\000\004\002" +
    "\uffff\001\002\000\004\051\016\001\002\000\016\026\020" +
    "\027\023\030\024\031\025\032\021\047\022\001\002\000" +
    "\004\025\030\001\002\000\004\025\uff8c\001\002\000\004" +
    "\025\uff88\001\002\000\004\041\026\001\002\000\004\025" +
    "\uff8b\001\002\000\004\025\uff8a\001\002\000\004\025\uff89" +
    "\001\002\000\004\042\027\001\002\000\004\045\ufffb\001" +
    "\002\000\004\041\ufff9\001\002\000\004\051\ufff5\001\002" +
    "\000\004\002\ufffd\001\002\000\016\026\020\027\023\030" +
    "\024\031\025\032\021\042\036\001\002\000\006\042\u0101" +
    "\063\u0102\001\002\000\004\025\u0100\001\002\000\004\045" +
    "\040\001\002\000\006\042\ufff3\063\ufff3\001\002\000\032" +
    "\005\061\012\104\013\062\025\042\050\077\052\076\055" +
    "\057\056\056\060\071\061\063\064\053\065\065\001\002" +
    "\000\004\066\uffec\001\002\000\010\041\uffe4\043\367\062" +
    "\366\001\002\000\044\004\uffc2\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\011\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\042\uffc2\046\uffc2\066\uffc2" +
    "\001\002\000\044\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\042\uffc5\046\uffc5\066\uffc5\001" +
    "\002\000\004\066\uffd6\001\002\000\004\066\ufff0\001\002" +
    "\000\004\066\ufff1\001\002\000\006\062\362\066\uffd5\001" +
    "\002\000\044\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4" +
    "\011\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\042\uffc4\046\uffc4\066\uffc4\001\002" +
    "\000\044\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\042\uffc3\046\uffc3\066\uffc3\001\002\000" +
    "\004\041\353\001\002\000\004\066\uffee\001\002\000\034" +
    "\005\uff8e\012\uff8e\013\uff8e\025\uff8e\046\uff8e\050\uff8e\052" +
    "\uff8e\055\uff8e\056\uff8e\060\uff8e\061\uff8e\064\uff8e\065\uff8e" +
    "\001\002\000\004\045\343\001\002\000\004\041\324\001" +
    "\002\000\010\062\320\063\uffd2\066\uffd2\001\002\000\006" +
    "\035\uffbf\036\317\001\002\000\006\025\uff75\035\uff75\001" +
    "\002\000\004\066\uffeb\001\002\000\004\066\uffed\001\002" +
    "\000\004\041\314\001\002\000\004\066\uffd4\001\002\000" +
    "\006\025\313\035\uffc0\001\002\000\034\005\uff8f\012\uff8f" +
    "\013\uff8f\025\uff8f\046\uff8f\050\uff8f\052\uff8f\055\uff8f\056" +
    "\uff8f\060\uff8f\061\uff8f\064\uff8f\065\uff8f\001\002\000\020" +
    "\025\311\033\121\034\117\035\115\036\114\037\113\040" +
    "\116\001\002\000\004\035\310\001\002\000\004\066\307" +
    "\001\002\000\034\005\uff8d\012\uff8d\013\uff8d\025\uff8d\046" +
    "\uff8d\050\uff8d\052\uff8d\055\uff8d\056\uff8d\060\uff8d\061\uff8d" +
    "\064\uff8d\065\uff8d\001\002\000\034\005\uffe7\012\uffe7\013" +
    "\uffe7\025\uffe7\046\uffe7\050\uffe7\052\uffe7\055\uffe7\056\uffe7" +
    "\060\uffe7\061\uffe7\064\uffe7\065\uffe7\001\002\000\004\041" +
    "\134\001\002\000\014\026\020\027\023\030\024\031\025" +
    "\032\021\001\002\000\004\041\110\001\002\000\004\066" +
    "\uffef\001\002\000\004\066\uffd7\001\002\000\034\005\061" +
    "\012\104\013\062\025\042\046\106\050\077\052\076\055" +
    "\057\056\056\060\071\061\063\064\053\065\065\001\002" +
    "\000\006\025\uff76\035\uff76\001\002\000\034\005\uffe6\012" +
    "\uffe6\013\uffe6\025\uffe6\046\uffe6\050\uffe6\052\uffe6\055\uffe6" +
    "\056\uffe6\060\uffe6\061\uffe6\064\uffe6\065\uffe6\001\002\000" +
    "\004\051\ufff8\001\002\000\034\005\uffe5\012\uffe5\013\uffe5" +
    "\025\uffe5\046\uffe5\050\uffe5\052\uffe5\055\uffe5\056\uffe5\060" +
    "\uffe5\061\uffe5\064\uffe5\065\uffe5\001\002\000\022\025\112" +
    "\033\121\034\117\035\115\036\114\037\113\040\116\042" +
    "\123\001\002\000\006\042\uffe0\063\uffe0\001\002\000\006" +
    "\042\uffe1\063\uffe1\001\002\000\010\042\uff82\063\uff82\066" +
    "\uff82\001\002\000\010\042\uff86\063\uff86\066\uff86\001\002" +
    "\000\010\042\uff87\063\uff87\066\uff87\001\002\000\010\042" +
    "\uff85\063\uff85\066\uff85\001\002\000\010\042\uff84\063\uff84" +
    "\066\uff84\001\002\000\006\042\124\063\125\001\002\000" +
    "\010\042\uff83\063\uff83\066\uff83\001\002\000\006\042\uffdf" +
    "\063\uffdf\001\002\000\044\004\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\042\uffe2\046\uffe2\066" +
    "\uffe2\001\002\000\044\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\042\uffe3\046\uffe3\066\uffe3" +
    "\001\002\000\020\025\112\033\121\034\117\035\115\036" +
    "\114\037\113\040\116\001\002\000\006\042\uffde\063\uffde" +
    "\001\002\000\004\025\130\001\002\000\010\043\131\062" +
    "\uffd3\066\uffd3\001\002\000\004\035\132\001\002\000\004" +
    "\044\133\001\002\000\004\066\uffd8\001\002\000\006\024" +
    "\136\045\140\001\002\000\004\042\263\001\002\000\004" +
    "\045\207\001\002\000\014\022\177\023\201\042\uff91\063" +
    "\uff91\066\uff91\001\002\000\030\005\uff94\012\uff94\013\uff94" +
    "\024\uff94\025\uff94\033\uff94\034\uff94\035\uff94\036\uff94\041" +
    "\uff94\045\uff94\001\002\000\030\005\061\012\104\013\062" +
    "\024\154\025\152\033\146\034\150\035\151\036\162\041" +
    "\145\045\140\001\002\000\016\014\171\015\166\016\167" +
    "\017\163\020\170\021\172\001\002\000\010\022\uff9b\023" +
    "\uff9b\046\uff9b\001\002\000\042\004\uff7e\005\uff7e\006\uff7e" +
    "\007\uff7e\010\uff7e\011\uff7e\014\uff7e\015\uff7e\016\uff7e\017" +
    "\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e\042\uff7e\046\uff7e" +
    "\001\002\000\020\005\uffa8\012\uffa8\013\uffa8\025\uffa8\035" +
    "\uffa8\036\uffa8\041\uffa8\001\002\000\010\022\uff6c\023\uff6c" +
    "\046\uff6c\001\002\000\004\046\213\001\002\000\010\022" +
    "\uff6b\023\uff6b\046\uff6b\001\002\000\042\004\uff81\005\uff81" +
    "\006\uff81\007\uff81\010\uff81\011\uff81\014\uff81\015\uff81\016" +
    "\uff81\017\uff81\020\uff81\021\uff81\022\uff81\023\uff81\042\uff81" +
    "\046\uff81\001\002\000\026\014\uff7f\015\uff7f\016\uff7f\017" +
    "\uff7f\020\uff7f\021\uff7f\022\uff9d\023\uff9d\041\uffe4\046\uff9d" +
    "\001\002\000\024\014\uff7d\015\uff7d\016\uff7d\017\uff7d\020" +
    "\uff7d\021\uff7d\022\uff99\023\uff99\046\uff99\001\002\000\026" +
    "\005\061\012\104\013\062\025\205\033\146\034\150\035" +
    "\151\036\162\041\145\045\207\001\002\000\010\022\uff97" +
    "\023\uff97\046\uff97\001\002\000\010\022\177\023\201\046" +
    "\uff96\001\002\000\042\004\uffa6\005\uffa6\006\uffa6\007\uffa6" +
    "\010\uffa6\011\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\042\uffa6\046\uffa6\001\002" +
    "\000\016\014\171\015\166\016\167\017\163\020\170\021" +
    "\172\001\002\000\010\022\uff9f\023\uff9f\046\uff9f\001\002" +
    "\000\042\004\uff80\005\uff80\006\uff80\007\uff80\010\uff80\011" +
    "\uff80\014\uff80\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80" +
    "\022\uff80\023\uff80\042\uff80\046\uff80\001\002\000\020\005" +
    "\uff74\012\uff74\013\uff74\025\uff74\035\uff74\036\uff74\041\uff74" +
    "\001\002\000\020\005\uffa5\012\uffa5\013\uffa5\025\uffa5\035" +
    "\uffa5\036\uffa5\041\uffa5\001\002\000\020\005\061\012\104" +
    "\013\062\025\174\035\151\036\162\041\145\001\002\000" +
    "\020\005\uff71\012\uff71\013\uff71\025\uff71\035\uff71\036\uff71" +
    "\041\uff71\001\002\000\020\005\uff70\012\uff70\013\uff70\025" +
    "\uff70\035\uff70\036\uff70\041\uff70\001\002\000\020\005\uff6f" +
    "\012\uff6f\013\uff6f\025\uff6f\035\uff6f\036\uff6f\041\uff6f\001" +
    "\002\000\020\005\uff73\012\uff73\013\uff73\025\uff73\035\uff73" +
    "\036\uff73\041\uff73\001\002\000\020\005\uff72\012\uff72\013" +
    "\uff72\025\uff72\035\uff72\036\uff72\041\uff72\001\002\000\010" +
    "\022\uffa2\023\uffa2\046\uffa2\001\002\000\030\004\uff7f\005" +
    "\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\022\uff7f\023\uff7f" +
    "\041\uffe4\042\uff7f\046\uff7f\001\002\000\026\004\uff7d\005" +
    "\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d\022\uff7d\023\uff7d" +
    "\042\uff7d\046\uff7d\001\002\000\010\022\uffa0\023\uffa0\046" +
    "\uffa0\001\002\000\030\005\uff6e\012\uff6e\013\uff6e\024\uff6e" +
    "\025\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\041\uff6e\045" +
    "\uff6e\001\002\000\030\005\uffa4\012\uffa4\013\uffa4\024\uffa4" +
    "\025\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\041\uffa4\045" +
    "\uffa4\001\002\000\030\005\uff6d\012\uff6d\013\uff6d\024\uff6d" +
    "\025\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\041\uff6d\045" +
    "\uff6d\001\002\000\030\005\061\012\104\013\062\024\154" +
    "\025\152\033\146\034\150\035\151\036\162\041\145\045" +
    "\140\001\002\000\004\046\uff95\001\002\000\010\022\uff9a" +
    "\023\uff9a\046\uff9a\001\002\000\026\014\uff7f\015\uff7f\016" +
    "\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff9c\023\uff9c\041\uffe4" +
    "\046\uff9c\001\002\000\024\014\uff7d\015\uff7d\016\uff7d\017" +
    "\uff7d\020\uff7d\021\uff7d\022\uff98\023\uff98\046\uff98\001\002" +
    "\000\030\005\061\012\104\013\062\024\154\025\152\033" +
    "\146\034\150\035\151\036\162\041\145\045\140\001\002" +
    "\000\010\022\uff9e\023\uff9e\046\uff9e\001\002\000\004\046" +
    "\212\001\002\000\016\022\uff92\023\uff92\042\uff92\046\uff92" +
    "\063\uff92\066\uff92\001\002\000\016\022\uff93\023\uff93\042" +
    "\uff93\046\uff93\063\uff93\066\uff93\001\002\000\020\005\061" +
    "\012\104\013\062\025\174\035\151\036\162\041\145\001" +
    "\002\000\020\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\042\uffaa\001\002\000\010\004\223\005\224\042" +
    "\255\001\002\000\020\004\uffac\005\uffac\006\uffac\007\uffac" +
    "\010\uffac\011\253\042\uffac\001\002\000\016\004\223\005" +
    "\224\006\234\007\235\010\241\042\uffb3\001\002\000\020" +
    "\004\223\005\224\006\uffa9\007\uffa9\010\uffa9\011\uffa9\042" +
    "\uffa9\001\002\000\020\005\061\012\104\013\062\025\174" +
    "\035\151\036\162\041\145\001\002\000\020\005\uffbc\012" +
    "\uffbc\013\uffbc\025\uffbc\035\uffbc\036\uffbc\041\uffbc\001\002" +
    "\000\020\005\uffbb\012\uffbb\013\uffbb\025\uffbb\035\uffbb\036" +
    "\uffbb\041\uffbb\001\002\000\020\005\061\012\104\013\062" +
    "\025\174\035\151\036\162\041\145\001\002\000\010\004" +
    "\223\005\224\042\uffb0\001\002\000\020\005\061\012\104" +
    "\013\062\025\174\035\151\036\162\041\145\001\002\000" +
    "\020\005\061\012\104\013\062\025\174\035\151\036\162" +
    "\041\145\001\002\000\010\004\223\005\224\042\uffb2\001" +
    "\002\000\010\004\223\005\224\042\uffb6\001\002\000\010" +
    "\004\223\005\224\042\uffb4\001\002\000\020\005\uffba\012" +
    "\uffba\013\uffba\025\uffba\035\uffba\036\uffba\041\uffba\001\002" +
    "\000\020\005\uffb9\012\uffb9\013\uffb9\025\uffb9\035\uffb9\036" +
    "\uffb9\041\uffb9\001\002\000\020\005\061\012\104\013\062" +
    "\025\174\035\151\036\162\041\145\001\002\000\020\005" +
    "\061\012\104\013\062\025\174\035\151\036\162\041\145" +
    "\001\002\000\020\005\061\012\104\013\062\025\174\035" +
    "\151\036\162\041\145\001\002\000\020\005\uffb8\012\uffb8" +
    "\013\uffb8\025\uffb8\035\uffb8\036\uffb8\041\uffb8\001\002\000" +
    "\020\005\061\012\104\013\062\025\174\035\151\036\162" +
    "\041\145\001\002\000\020\005\061\012\104\013\062\025" +
    "\174\035\151\036\162\041\145\001\002\000\016\004\uffaf" +
    "\005\uffaf\006\234\007\235\010\241\042\uffaf\001\002\000" +
    "\020\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9" +
    "\042\uffa9\001\002\000\016\004\uffae\005\uffae\006\234\007" +
    "\235\010\241\042\uffae\001\002\000\016\004\uffb5\005\uffb5" +
    "\006\234\007\235\010\241\042\uffb5\001\002\000\016\004" +
    "\uffb1\005\uffb1\006\234\007\235\010\241\042\uffb1\001\002" +
    "\000\016\004\uffad\005\uffad\006\234\007\235\010\241\042" +
    "\uffad\001\002\000\020\005\061\012\104\013\062\025\174" +
    "\035\151\036\162\041\145\001\002\000\020\005\uffb7\012" +
    "\uffb7\013\uffb7\025\uffb7\035\uffb7\036\uffb7\041\uffb7\001\002" +
    "\000\020\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011" +
    "\253\042\uffab\001\002\000\046\004\uffa7\005\uffa7\006\uffa7" +
    "\007\uffa7\010\uffa7\011\uffa7\014\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\042\uffa7\046\uffa7" +
    "\063\uffa7\066\uffa7\001\002\000\020\005\061\012\104\013" +
    "\062\025\174\035\151\036\162\041\145\001\002\000\010" +
    "\022\uffa3\023\uffa3\046\uffa3\001\002\000\010\022\uffa1\023" +
    "\uffa1\046\uffa1\001\002\000\006\024\136\045\140\001\002" +
    "\000\010\042\uff90\063\uff90\066\uff90\001\002\000\004\045" +
    "\264\001\002\000\032\005\061\012\104\013\062\025\042" +
    "\050\077\052\076\055\057\056\056\060\071\061\063\064" +
    "\053\065\065\001\002\000\034\005\061\012\104\013\062" +
    "\025\042\046\266\050\077\052\076\055\057\056\056\060" +
    "\071\061\063\064\053\065\065\001\002\000\006\053\270" +
    "\054\267\001\002\000\004\045\303\001\002\000\004\041" +
    "\274\001\002\000\034\005\uffcc\012\uffcc\013\uffcc\025\uffcc" +
    "\046\uffcc\050\uffcc\052\uffcc\055\uffcc\056\uffcc\060\uffcc\061" +
    "\uffcc\064\uffcc\065\uffcc\001\002\000\034\005\uffcd\012\uffcd" +
    "\013\uffcd\025\uffcd\046\uffcd\050\uffcd\052\uffcd\055\uffcd\056" +
    "\uffcd\060\uffcd\061\uffcd\064\uffcd\065\uffcd\001\002\000\034" +
    "\005\uffce\012\uffce\013\uffce\025\uffce\046\uffce\050\uffce\052" +
    "\uffce\055\uffce\056\uffce\060\uffce\061\uffce\064\uffce\065\uffce" +
    "\001\002\000\006\024\136\045\140\001\002\000\004\042" +
    "\276\001\002\000\004\045\277\001\002\000\032\005\061" +
    "\012\104\013\062\025\042\050\077\052\076\055\057\056" +
    "\056\060\071\061\063\064\053\065\065\001\002\000\034" +
    "\005\061\012\104\013\062\025\042\046\301\050\077\052" +
    "\076\055\057\056\056\060\071\061\063\064\053\065\065" +
    "\001\002\000\006\053\270\054\267\001\002\000\034\005" +
    "\uffcb\012\uffcb\013\uffcb\025\uffcb\046\uffcb\050\uffcb\052\uffcb" +
    "\055\uffcb\056\uffcb\060\uffcb\061\uffcb\064\uffcb\065\uffcb\001" +
    "\002\000\032\005\061\012\104\013\062\025\042\050\077" +
    "\052\076\055\057\056\056\060\071\061\063\064\053\065" +
    "\065\001\002\000\034\005\061\012\104\013\062\025\042" +
    "\046\305\050\077\052\076\055\057\056\056\060\071\061" +
    "\063\064\053\065\065\001\002\000\004\066\306\001\002" +
    "\000\034\005\uffca\012\uffca\013\uffca\025\uffca\046\uffca\050" +
    "\uffca\052\uffca\055\uffca\056\uffca\060\uffca\061\uffca\064\uffca" +
    "\065\uffca\001\002\000\034\005\uffe8\012\uffe8\013\uffe8\025" +
    "\uffe8\046\uffe8\050\uffe8\052\uffe8\055\uffe8\056\uffe8\060\uffe8" +
    "\061\uffe8\064\uffe8\065\uffe8\001\002\000\044\004\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\042" +
    "\uffbe\046\uffbe\066\uffbe\001\002\000\004\066\uffea\001\002" +
    "\000\004\066\uffe9\001\002\000\044\004\uffc1\005\uffc1\006" +
    "\uffc1\007\uffc1\010\uffc1\011\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\042\uffc1\046" +
    "\uffc1\066\uffc1\001\002\000\004\025\315\001\002\000\004" +
    "\042\316\001\002\000\004\066\uffc7\001\002\000\044\004" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\042\uffbd\046\uffbd\066\uffbd\001\002\000\024\024\136" +
    "\033\121\034\117\035\115\036\114\037\113\040\116\041" +
    "\145\045\140\001\002\000\006\063\uffd1\066\uffd1\001\002" +
    "\000\006\063\uffcf\066\uffcf\001\002\000\006\063\uffd0\066" +
    "\uffd0\001\002\000\004\050\326\001\002\000\004\063\331" +
    "\001\002\000\014\026\020\027\023\030\024\031\025\032" +
    "\021\001\002\000\004\025\330\001\002\000\006\062\uffd3" +
    "\063\uffd3\001\002\000\006\024\136\045\140\001\002\000" +
    "\004\063\333\001\002\000\006\012\104\013\062\001\002" +
    "\000\004\042\336\001\002\000\004\025\313\001\002\000" +
    "\004\045\337\001\002\000\032\005\061\012\104\013\062" +
    "\025\042\050\077\052\076\055\057\056\056\060\071\061" +
    "\063\064\053\065\065\001\002\000\034\005\061\012\104" +
    "\013\062\025\042\046\341\050\077\052\076\055\057\056" +
    "\056\060\071\061\063\064\053\065\065\001\002\000\004" +
    "\066\342\001\002\000\034\005\uffc8\012\uffc8\013\uffc8\025" +
    "\uffc8\046\uffc8\050\uffc8\052\uffc8\055\uffc8\056\uffc8\060\uffc8" +
    "\061\uffc8\064\uffc8\065\uffc8\001\002\000\032\005\061\012" +
    "\104\013\062\025\042\050\077\052\076\055\057\056\056" +
    "\060\071\061\063\064\053\065\065\001\002\000\034\005" +
    "\061\012\104\013\062\025\042\046\345\050\077\052\076" +
    "\055\057\056\056\060\071\061\063\064\053\065\065\001" +
    "\002\000\004\057\346\001\002\000\004\041\347\001\002" +
    "\000\006\024\136\045\140\001\002\000\004\042\351\001" +
    "\002\000\004\066\352\001\002\000\034\005\uffc9\012\uffc9" +
    "\013\uffc9\025\uffc9\046\uffc9\050\uffc9\052\uffc9\055\uffc9\056" +
    "\uffc9\060\uffc9\061\uffc9\064\uffc9\065\uffc9\001\002\000\012" +
    "\025\354\035\355\036\360\037\357\001\002\000\004\042" +
    "\uff77\001\002\000\004\042\uff7a\001\002\000\004\042\361" +
    "\001\002\000\004\042\uff78\001\002\000\004\042\uff79\001" +
    "\002\000\004\066\uffc6\001\002\000\006\035\363\040\365" +
    "\001\002\000\010\044\uff7c\063\uff7c\066\uff7c\001\002\000" +
    "\004\066\uffda\001\002\000\010\044\uff7b\063\uff7b\066\uff7b" +
    "\001\002\000\004\043\372\001\002\000\004\035\370\001" +
    "\002\000\004\044\371\001\002\000\006\062\uffdb\066\uffdb" +
    "\001\002\000\006\035\363\040\365\001\002\000\006\044" +
    "\uffdd\063\376\001\002\000\004\044\375\001\002\000\004" +
    "\066\uffd9\001\002\000\006\035\363\040\365\001\002\000" +
    "\004\044\uffdc\001\002\000\006\042\ufff4\063\ufff4\001\002" +
    "\000\004\045\u0104\001\002\000\014\026\020\027\023\030" +
    "\024\031\025\032\021\001\002\000\006\042\ufff2\063\ufff2" +
    "\001\002\000\032\005\061\012\104\013\062\025\042\050" +
    "\077\052\076\055\057\056\056\060\071\061\063\064\053" +
    "\065\065\001\002\000\034\005\061\012\104\013\062\025" +
    "\042\046\u0106\050\077\052\076\055\057\056\056\060\071" +
    "\061\063\064\053\065\065\001\002\000\004\051\ufff7\001" +
    "\002\000\032\005\061\012\104\013\062\025\042\050\077" +
    "\052\076\055\057\056\056\060\071\061\063\064\053\065" +
    "\065\001\002\000\034\005\061\012\104\013\062\025\042" +
    "\046\u0109\050\077\052\076\055\057\056\056\060\071\061" +
    "\063\064\053\065\065\001\002\000\004\002\ufffa\001\002" +
    "\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\006\004\004\104\003\001\001\000\016\005" +
    "\013\006\006\007\011\010\014\011\012\012\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\u0109\006\006\007\011\010\014" +
    "\011\012\012\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\031\007\011\011\012" +
    "\012\030\001\001\000\004\002\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\034\013\033\014" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\017\046\020\077\022" +
    "\047\023\044\024\065\026\101\027\100\030\057\032\067" +
    "\035\054\036\073\037\074\040\053\041\063\043\066\044" +
    "\043\045\042\046\071\047\050\050\051\051\040\064\072" +
    "\101\104\102\102\103\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\311\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\017\046\020\077\022\047" +
    "\023\044\024\065\026\101\027\100\030\057\032\067\035" +
    "\054\036\073\037\074\040\053\041\063\043\066\044\043" +
    "\045\042\046\071\047\050\050\051\051\040\064\072\101" +
    "\106\103\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\110\015" +
    "\121\016\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\110\015\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\062\136\063\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\056" +
    "\177\072\260\001\001\000\004\106\140\001\001\000\044" +
    "\017\152\020\077\043\066\044\043\045\042\046\071\047" +
    "\050\050\051\051\143\053\157\054\156\057\160\060\155" +
    "\061\146\062\154\065\142\070\141\001\001\000\006\055" +
    "\163\071\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\105\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\017\205\020\077\043\066\044" +
    "\043\045\042\046\071\047\050\050\051\051\143\053\157" +
    "\054\156\057\207\065\203\070\141\001\001\000\002\001" +
    "\001\000\006\056\177\072\201\001\001\000\002\001\001" +
    "\000\006\055\163\071\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\017\174\020\077\043\066\044\043\045\042\046\071\047" +
    "\050\050\051\051\143\053\175\054\156\070\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\017\152" +
    "\020\077\043\066\044\043\045\042\046\071\047\050\050" +
    "\051\051\143\053\157\054\156\057\160\060\155\061\202" +
    "\062\154\065\142\070\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\017\152\020\077\043\066\044\043\045\042\046\071\047" +
    "\050\050\051\051\143\053\157\054\156\057\160\060\155" +
    "\061\210\062\154\065\142\070\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\017\174\020\077\043\066\044\043\045\042\046" +
    "\071\047\050\050\051\051\143\052\215\053\220\054\156" +
    "\066\217\067\216\070\214\001\001\000\002\001\001\000" +
    "\006\073\226\074\227\001\001\000\004\100\251\001\001" +
    "\000\014\073\237\074\236\075\242\076\241\077\235\001" +
    "\001\000\006\073\221\074\224\001\001\000\040\017\174" +
    "\020\077\043\066\044\043\045\042\046\071\047\050\050" +
    "\051\051\143\052\232\053\220\054\156\066\217\067\216" +
    "\070\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\017\174\020\077\043\066\044\043\045\042\046\071" +
    "\047\050\050\051\051\143\052\225\053\220\054\156\066" +
    "\217\067\216\070\214\001\001\000\006\073\226\074\227" +
    "\001\001\000\040\017\174\020\077\043\066\044\043\045" +
    "\042\046\071\047\050\050\051\051\143\052\231\053\220" +
    "\054\156\066\217\067\216\070\214\001\001\000\040\017" +
    "\174\020\077\043\066\044\043\045\042\046\071\047\050" +
    "\050\051\051\143\052\230\053\220\054\156\066\217\067" +
    "\216\070\214\001\001\000\006\073\226\074\227\001\001" +
    "\000\006\073\226\074\227\001\001\000\006\073\226\074" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\017\174\020\077\043\066\044\043\045\042\046\071\047" +
    "\050\050\051\051\143\053\244\054\156\066\250\067\216" +
    "\070\214\001\001\000\036\017\174\020\077\043\066\044" +
    "\043\045\042\046\071\047\050\050\051\051\143\053\244" +
    "\054\156\066\247\067\216\070\214\001\001\000\036\017" +
    "\174\020\077\043\066\044\043\045\042\046\071\047\050" +
    "\050\051\051\143\053\244\054\156\066\246\067\216\070" +
    "\214\001\001\000\002\001\001\000\036\017\174\020\077" +
    "\043\066\044\043\045\042\046\071\047\050\050\051\051" +
    "\143\053\244\054\156\066\245\067\216\070\214\001\001" +
    "\000\036\017\174\020\077\043\066\044\043\045\042\046" +
    "\071\047\050\050\051\051\143\053\244\054\156\066\243" +
    "\067\216\070\214\001\001\000\010\075\242\076\241\077" +
    "\235\001\001\000\002\001\001\000\010\075\242\076\241" +
    "\077\235\001\001\000\010\075\242\076\241\077\235\001" +
    "\001\000\010\075\242\076\241\077\235\001\001\000\010" +
    "\075\242\076\241\077\235\001\001\000\034\017\174\020" +
    "\077\043\066\044\043\045\042\046\071\047\050\050\051" +
    "\051\143\053\244\054\156\067\253\070\214\001\001\000" +
    "\002\001\001\000\004\100\251\001\001\000\002\001\001" +
    "\000\032\017\174\020\077\043\066\044\043\045\042\046" +
    "\071\047\050\050\051\051\143\053\257\054\156\070\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\062" +
    "\136\063\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\017\046\020\077\022\047\023\044\024\065\026" +
    "\101\027\100\030\057\032\067\035\054\036\073\037\074" +
    "\040\053\041\063\043\066\044\043\045\042\046\071\047" +
    "\050\050\051\051\040\064\072\101\104\102\264\103\045" +
    "\001\001\000\062\017\046\020\077\022\047\023\044\024" +
    "\065\026\101\027\100\030\057\032\067\035\054\036\073" +
    "\037\074\040\053\041\063\043\066\044\043\045\042\046" +
    "\071\047\050\050\051\051\040\064\072\101\106\103\045" +
    "\001\001\000\010\031\270\033\272\034\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\062\136\063\274\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\017\046" +
    "\020\077\022\047\023\044\024\065\026\101\027\100\030" +
    "\057\032\067\035\054\036\073\037\074\040\053\041\063" +
    "\043\066\044\043\045\042\046\071\047\050\050\051\051" +
    "\040\064\072\101\104\102\277\103\045\001\001\000\062" +
    "\017\046\020\077\022\047\023\044\024\065\026\101\027" +
    "\100\030\057\032\067\035\054\036\073\037\074\040\053" +
    "\041\063\043\066\044\043\045\042\046\071\047\050\050" +
    "\051\051\040\064\072\101\106\103\045\001\001\000\010" +
    "\031\301\033\272\034\271\001\001\000\002\001\001\000" +
    "\064\017\046\020\077\022\047\023\044\024\065\026\101" +
    "\027\100\030\057\032\067\035\054\036\073\037\074\040" +
    "\053\041\063\043\066\044\043\045\042\046\071\047\050" +
    "\050\051\051\040\064\072\101\104\102\303\103\045\001" +
    "\001\000\062\017\046\020\077\022\047\023\044\024\065" +
    "\026\101\027\100\030\057\032\067\035\054\036\073\037" +
    "\074\040\053\041\063\043\066\044\043\045\042\046\071" +
    "\047\050\050\051\051\040\064\072\101\106\103\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\320\053\322\062" +
    "\136\063\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\324\030\057\001\001\000" +
    "\002\001\001\000\004\002\326\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\062\136\063\331\001\001\000" +
    "\002\001\001\000\006\043\334\045\333\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\017" +
    "\046\020\077\022\047\023\044\024\065\026\101\027\100" +
    "\030\057\032\067\035\054\036\073\037\074\040\053\041" +
    "\063\043\066\044\043\045\042\046\071\047\050\050\051" +
    "\051\040\064\072\101\104\102\337\103\045\001\001\000" +
    "\062\017\046\020\077\022\047\023\044\024\065\026\101" +
    "\027\100\030\057\032\067\035\054\036\073\037\074\040" +
    "\053\041\063\043\066\044\043\045\042\046\071\047\050" +
    "\050\051\051\040\064\072\101\106\103\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\017\046\020\077" +
    "\022\047\023\044\024\065\026\101\027\100\030\057\032" +
    "\067\035\054\036\073\037\074\040\053\041\063\043\066" +
    "\044\043\045\042\046\071\047\050\050\051\051\040\064" +
    "\072\101\104\102\343\103\045\001\001\000\062\017\046" +
    "\020\077\022\047\023\044\024\065\026\101\027\100\030" +
    "\057\032\067\035\054\036\073\037\074\040\053\041\063" +
    "\043\066\044\043\045\042\046\071\047\050\050\051\051" +
    "\040\064\072\101\106\103\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\062\136\063\347\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\355\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\363\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\373\025\372\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\376\025\372\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\034\014\u0102\001\001\000\002\001\001\000\064\017" +
    "\046\020\077\022\047\023\044\024\065\026\101\027\100" +
    "\030\057\032\067\035\054\036\073\037\074\040\053\041" +
    "\063\043\066\044\043\045\042\046\071\047\050\050\051" +
    "\051\040\064\072\101\104\102\u0104\103\045\001\001\000" +
    "\062\017\046\020\077\022\047\023\044\024\065\026\101" +
    "\027\100\030\057\032\067\035\054\036\073\037\074\040" +
    "\053\041\063\043\066\044\043\045\042\046\071\047\050" +
    "\050\051\051\040\064\072\101\106\103\045\001\001\000" +
    "\002\001\001\000\064\017\046\020\077\022\047\023\044" +
    "\024\065\026\101\027\100\030\057\032\067\035\054\036" +
    "\073\037\074\040\053\041\063\043\066\044\043\045\042" +
    "\046\071\047\050\050\051\051\040\064\072\101\104\102" +
    "\u0107\103\045\001\001\000\062\017\046\020\077\022\047" +
    "\023\044\024\065\026\101\027\100\030\057\032\067\035" +
    "\054\036\073\037\074\040\053\041\063\043\066\044\043" +
    "\045\042\046\071\047\050\050\051\051\040\064\072\101" +
    "\106\103\045\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    Lexer lex;

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex=lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }

    //Funcion para manejar errores sintacticos
    public void syntax_error(Symbol s){
        System.out.println("Error Sintáctico: " + "\""+ s.value + "\"" + " Linea: "+(s.left+1)+" Columna: "+(s.right+1) + "\n");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //Nombre y lista de identificadores de la funcion
    HashMap<String, ArrayList<String>> listaTablasSimbolos = new HashMap<String, ArrayList<String>>();
    //Funcion actual
    String currentHash;

    //Funcion para imprimir tabla de simbolos
    public void imprimirTablaSimbolos(){
        for (String key: listaTablasSimbolos.keySet()){
            System.out.println("Tabla de simbolo : " + key);
            System.out.println("Valores : ");
            for (String item : listaTablasSimbolos.get(key)){
                System.out.println(item);
            }
            System.out.println("");
        }
    }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

        System.out.println("-------Inicio Fase Sintactica-------");
        System.out.println(" ");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // navidad ::= NT$0 navidadAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.out.println("****** Cargando Tabla de Simbolos ******");
        System.out.println(" ");
        imprimirTablaSimbolos();
        System.out.println("-------Fin Fase Sintactica-------");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // navidadAux ::= mainNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidadAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // navidadAux ::= bolsanavidena mainNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidadAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // navidadAux ::= error navidadAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidadAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mainNavidadAux ::= FUNCTION MAIN ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		
                //System.out.println("NuevaFuncion");
                String tipoTabla = "tipo:main";
                ArrayList<String> funcionMain = new ArrayList<String>();
                currentHash = "main";
                funcionMain.add(tipoTabla);
                listaTablasSimbolos.put(currentHash, funcionMain);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainNavidadAux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // mainNavidad ::= mainNavidadAux ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainNavidad",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bolsaAux ::= FUNCTION tsantaclaus PERSONA 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //System.out.println("NuevaFuncion");
                String tipoTabla = "";
                tipoTabla = "tipo:funcion:"+tsc.toString();
                ArrayList<String> funcionMain = new ArrayList<String>();
                currentHash = per.toString();
                funcionMain.add(tipoTabla);
                listaTablasSimbolos.put(currentHash, funcionMain);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsaAux",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bolsanavidenaAux ::= bolsaAux ABRECUENTO CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenaAux",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bolsanavidenaAux ::= bolsaAux ABRECUENTO listaDeRegalos CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenaAux",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bolsanavidena ::= bolsanavidenaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidena",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bolsanavidena ::= bolsanavidena bolsanavidenaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidena",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listaDeRegalosAux ::= tsantaclaus PERSONA 
            {
              Object RESULT =null;
		int tsanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsanright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tsan = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                listaTablasSimbolos.get(currentHash).add("tipo:Param:"+per.toString()+":"+tsan.toString());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalosAux",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listaDeRegalos ::= listaDeRegalosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listaDeRegalos ::= listaDeRegalos BASTON listaDeRegalosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // adornoAux ::= llamadaASanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // adornoAux ::= infoTrineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // adornoAux ::= decorarGalleta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // adornoAux ::= leerCarta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // adornoAux ::= escribirCarta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // adornoAux ::= decoracionesNav 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // adornoAux ::= CORTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // adornoAux ::= ENVIA PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // adornoAux ::= ENVIA tlsantaclaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adornoAux",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // adorno ::= adornoAux FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // adorno ::= luces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // villancicos ::= adorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("villancicos",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // villancicos ::= villancicos adorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("villancicos",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PersonaAux ::= PERSONA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PersonaAux",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // llamadaASanta ::= PersonaAux ABRECUENTO listaDeTamales CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaASanta",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // llamadaASanta ::= PersonaAux ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaASanta",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listaDeTamalesAux ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamalesAux",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listaDeTamalesAux ::= tlsantaclaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamalesAux",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listaDeTamales ::= listaDeTamalesAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listaDeTamales ::= listaDeTamales BASTON listaDeTamalesAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamales",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listaAmigos ::= SantaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaAmigos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listaAmigos ::= SantaArreglo BASTON listaAmigos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaAmigos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // acceso_trineo ::= PERSONA ABREEMPAQUE l_SANTA_CLAUS CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_trineo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // llenar_trineo ::= acceso_trineo ENTREGA SantaArreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llenar_trineo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // colocar_trineo ::= PERSONA ENTREGA ABREEMPAQUE listaAmigos CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("colocar_trineo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // trineo ::= LOCAL tsantaclaus PERSONA ABREEMPAQUE l_SANTA_CLAUS CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tsanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tsanright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tsan = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                listaTablasSimbolos.get(currentHash).add("tipo:LocalArray:"+per.toString()+":"+tsan.toString());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trineo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // infoTrineo ::= trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // infoTrineo ::= llenar_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // infoTrineo ::= acceso_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // infoTrineo ::= colocar_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ayudanteDeGalleta ::= LOCAL tsantaclaus PERSONA 
            {
              Object RESULT =null;
		int tsanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsanright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tsan = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                listaTablasSimbolos.get(currentHash).add("tipo:Local:"+per.toString()+":"+tsan.toString());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudanteDeGalleta",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // decorarGalleta ::= ayudanteDeGalleta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // decorarGalleta ::= ayudanteDeGalleta ENTREGA tlsantaclaus 
            {
              Object RESULT =null;
		int tlsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(tls);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // decorarGalleta ::= ayudanteDeGalleta ENTREGA whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // decorarGalleta ::= ayudanteDeGalleta ENTREGA gingerBread 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ponerLuces ::= elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ponerLuces",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ponerLuces ::= else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ponerLuces",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // if ::= ELFO ABRECUENTO gingerBread CIERRACUENTO ABREREGALO villancicos CIERRAREGALO ponerLuces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // elif ::= HADA ABRECUENTO gingerBread CIERRACUENTO ABREREGALO villancicos CIERRAREGALO ponerLuces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // else ::= DUENDE ABREREGALO villancicos CIERRAREGALO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // do_until ::= HACE ABREREGALO villancicos CIERRAREGALO REVISA ABRECUENTO gingerBread CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_until",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // for ::= ENVUELVE ABRECUENTO decorarGalleta BASTON gingerBread BASTON decoracion CIERRACUENTO ABREREGALO villancicos CIERRAREGALO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // leerCarta ::= ESCUCHA ABRECUENTO PERSONA CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leerCarta",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // escribirCarta ::= NARRA ABRECUENTO mensaje CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribirCarta",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // decoracionesNav ::= decoracionesF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesNav",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // decoracionesNav ::= decoracionI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesNav",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // decoracionesF ::= decoracionF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesF",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // decoracionesF ::= decoracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesF",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // decoracion ::= ornamentosUnicos PERSONA 
            {
              Object RESULT =null;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object om = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(om); System.out.println(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // decoracionIAux ::= ornamentosUnicos 
            {
              Object RESULT =null;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object om = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(om);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionIAux",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // decoracionIAux ::= TURENO 
            {
              Object RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(tr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionIAux",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // decoracionI ::= decoracionIAux l_SANTA_CLAUS 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(ls);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionI",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // decoracionF ::= TURENO l_PAPA_NOEL 
            {
              Object RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(tr); System.out.println(lp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionF",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // rodolfoAux ::= RODOLFO 
            {
              Object RESULT =null;
		int rdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(rd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rodolfoAux",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // turenoAux ::= TURENO 
            {
              Object RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(tr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turenoAux",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cometaAux ::= COMETA 
            {
              Object RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(cm);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cometaAux",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // dasherAux ::= DASHER 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(ds);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dasherAux",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // dancerAux ::= DANCER 
            {
              Object RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(dc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dancerAux",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // prancerAux ::= PRANCER 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(pr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prancerAux",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CindyLuWho ::= CindyLuWho rodolfoAux CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CindyLuWho ::= CindyLuWhoS rodolfoAux CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CindyLuWho ::= whoVille rodolfoAux CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CindyLuWho ::= CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CindyLuWho ::= CindyLuWho turenoAux CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CindyLuWho ::= CindyLuWhoS turenoAux CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CindyLuWho ::= whoVille turenoAux CindyLuWho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWho",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CindyLuWhoS ::= CindyLuWhoS cometaAux CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CindyLuWhoS ::= CindyLuWhoS dasherAux CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CindyLuWhoS ::= CindyLuWhoS dancerAux CindyLuWhoS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CindyLuWhoS ::= CindyLuWhoT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoS",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CindyLuWhoT ::= CindyLuWhoT prancerAux CindyLuWhoT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoT",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CindyLuWhoT ::= SantaMateAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoT",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CindyLuWhoT ::= whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CindyLuWhoT",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$1 ::= 
            {
              Object RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println(ac);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // whoVille ::= ABRECUENTO NT$1 CindyLuWho CIERRACUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(cc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whoVille",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SantaMateAux ::= SantaMate 
            {
              Object RESULT =null;
		int smleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(sm);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMateAux",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // workshopAux ::= workshop 
            {
              Object RESULT =null;
		int wkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wkright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object wk = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(wk);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshopAux",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // yellowSnowAux ::= yellowSnow 
            {
              Object RESULT =null;
		int ysleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ysright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ys = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(ys);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("yellowSnowAux",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sugar ::= SantaMateAux workshopAux SantaMateAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sugar ::= whoVille workshopAux SantaMateAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sugar ::= SantaMateAux workshopAux whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sugar ::= whoVille workshopAux whoVille 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sugar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // candy ::= sugar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // candy ::= BALTAZAR sugar 
            {
              Object RESULT =null;
		int bzleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bzright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bz = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(bz);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // candy ::= PERSONA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // candy ::= BALTAZAR PERSONA 
            {
              Object RESULT =null;
		int bzleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bzright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bz = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(bz); System.out.println(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // candy ::= naughtyOrNice 
            {
              Object RESULT =null;
		int nnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(nn);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // candy ::= BALTAZAR naughtyOrNice 
            {
              Object RESULT =null;
		int bzleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bzright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bz = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(bz); System.out.println(nn);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // candy ::= llamadaASanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // candy ::= BALTAZAR llamadaASanta 
            {
              Object RESULT =null;
		int bzleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bzright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bz = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println(bz);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // candy ::= candyBox 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candy",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // candyCane ::= candy 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyCane",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // candyCane ::= candy yellowSnowAux candyCane 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyCane",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$2 ::= 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println(ar);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // candyBox ::= ABREREGALO NT$2 candyCane CIERRAREGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int crleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int crright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(cr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyBox",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // candyBox ::= BALTAZAR ABREREGALO candyCane CIERRAREGALO 
            {
              Object RESULT =null;
		int bzleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bzright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object bz = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int crleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int crright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(bz);  System.out.println(ar);  System.out.println(cr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("candyBox",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // gingerBread ::= candyBox 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gingerBread",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // gingerBread ::= candyBox yellowSnowAux gingerBread 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gingerBread",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // luces ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // luces ::= do_until 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // luces ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tsantaclaus ::= FATHER_CHRISTMAS 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tsantaclaus ::= SANTA_CLAUS 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tsantaclaus ::= PAPA_NOEL 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // tsantaclaus ::= SAN_NICOLAS 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // tsantaclaus ::= SANTA 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tsc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // tlsantaclaus ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;
		int tlsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // tlsantaclaus ::= l_PAPA_NOEL 
            {
              Object RESULT =null;
		int tlsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // tlsantaclaus ::= l_SANTA 
            {
              Object RESULT =null;
		int tlsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tlsantaclaus ::= l_TFATHER_CHRISTMAS 
            {
              Object RESULT =null;
		int tlsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tlsantaclaus ::= l_FFATHER_CHRISTMAS 
            {
              Object RESULT =null;
		int tlsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tlsantaclaus ::= l_SAN_NICOLAS 
            {
              Object RESULT =null;
		int tlsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tls;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SantaMate ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SantaMate ::= l_PAPA_NOEL 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SantaMate ::= PERSONA 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SantaMate ::= decoracionesNav 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SantaMate ::= llamadaASanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaMate",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SantaArreglo ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaArreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SantaArreglo ::= l_SANTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SantaArreglo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // mensaje ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // mensaje ::= l_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // mensaje ::= l_SAN_NICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // mensaje ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ornamentosUnicos ::= QUIEN 
            {
              Object RESULT =null;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object om = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = om;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentosUnicos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ornamentosUnicos ::= GRINCH 
            {
              Object RESULT =null;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object om = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = om;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentosUnicos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // workshop ::= SUGARPLUM 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // workshop ::= SNOWBALL 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // workshop ::= WUNORSE 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // workshop ::= BUSHY 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // workshop ::= PEPPER 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // workshop ::= SHINNY 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("workshop",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // yellowSnow ::= MELCHOR 
            {
              Object RESULT =null;
		int ysleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ysright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ys = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ys;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("yellowSnow",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // yellowSnow ::= GASPAR 
            {
              Object RESULT =null;
		int ysleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ysright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ys = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ys;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("yellowSnow",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // naughtyOrNice ::= l_FFATHER_CHRISTMAS 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("naughtyOrNice",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // naughtyOrNice ::= l_TFATHER_CHRISTMAS 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("naughtyOrNice",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
