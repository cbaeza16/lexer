
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.p1;

import java_cup.runtime.*;
import java.lang.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\004\003\000\002\004" +
    "\004\000\002\005\011\000\002\007\012\000\002\007\013" +
    "\000\002\006\003\000\002\006\004\000\002\011\004\000" +
    "\002\010\003\000\002\010\005\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\004\000\002\012\003\000" +
    "\002\012\004\000\002\016\006\000\002\014\003\000\002" +
    "\014\003\000\002\015\003\000\002\015\005\000\002\017" +
    "\003\000\002\017\005\000\002\020\006\000\002\021\007" +
    "\000\002\022\007\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\024\005\000\002" +
    "\024\007\000\002\024\005\000\002\025\003\000\002\025" +
    "\003\000\002\026\011\000\002\027\011\000\002\030\006" +
    "\000\002\031\012\000\002\032\013\000\002\034\007\000" +
    "\002\035\007\000\002\040\003\000\002\040\003\000\002" +
    "\041\003\000\002\041\003\000\002\042\004\000\002\043" +
    "\003\000\002\043\003\000\002\044\004\000\002\045\004" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\037\003\000\002" +
    "\037\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\004\052\010\001\002\000\004\052\ufffb\001" +
    "\002\000\004\002\000\001\002\000\004\002\240\001\002" +
    "\000\004\052\010\001\002\000\016\027\011\030\014\031" +
    "\017\032\016\033\015\050\013\001\002\000\004\026\uffc4" +
    "\001\002\000\004\026\216\001\002\000\004\042\020\001" +
    "\002\000\004\026\uffc3\001\002\000\004\026\uffc0\001\002" +
    "\000\004\026\uffc1\001\002\000\004\026\uffc2\001\002\000" +
    "\004\043\021\001\002\000\004\046\022\001\002\000\060" +
    "\006\051\013\072\014\052\026\024\027\011\030\014\031" +
    "\017\032\016\033\015\034\041\035\045\036\034\037\035" +
    "\040\036\041\023\051\066\053\065\056\047\057\044\061" +
    "\060\062\053\065\040\066\055\001\002\000\072\006\uffbd" +
    "\013\uffbd\014\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\043\uffbd\045\uffbd\047\uffbd\051\uffbd\053\uffbd\056" +
    "\uffbd\057\uffbd\061\uffbd\062\uffbd\064\uffbd\065\uffbd\066\uffbd" +
    "\067\uffbd\001\002\000\006\042\204\044\203\001\002\000" +
    "\062\006\uffef\013\uffef\014\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\041\uffef\047\uffef\051\uffef\053\uffef\056\uffef" +
    "\057\uffef\061\uffef\062\uffef\065\uffef\066\uffef\001\002\000" +
    "\062\006\uffcd\013\uffcd\014\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\047\uffcd\051\uffcd\053\uffcd\056\uffcd" +
    "\057\uffcd\061\uffcd\062\uffcd\065\uffcd\066\uffcd\001\002\000" +
    "\062\006\uffdf\013\uffdf\014\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\047\uffdf\051\uffdf\053\uffdf\056\uffdf" +
    "\057\uffdf\061\uffdf\062\uffdf\065\uffdf\066\uffdf\001\002\000" +
    "\062\006\ufff5\013\ufff5\014\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037" +
    "\ufff5\040\ufff5\041\ufff5\047\ufff5\051\ufff5\053\ufff5\056\ufff5" +
    "\057\ufff5\061\ufff5\062\ufff5\065\ufff5\066\ufff5\001\002\000" +
    "\062\006\ufff6\013\ufff6\014\ufff6\026\ufff6\027\ufff6\030\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\041\ufff6\047\ufff6\051\ufff6\053\ufff6\056\ufff6" +
    "\057\ufff6\061\ufff6\062\ufff6\065\ufff6\066\ufff6\001\002\000" +
    "\062\006\ufff0\013\ufff0\014\ufff0\026\ufff0\027\ufff0\030\ufff0" +
    "\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\047\ufff0\051\ufff0\053\ufff0\056\ufff0" +
    "\057\ufff0\061\ufff0\062\ufff0\065\ufff0\066\ufff0\001\002\000" +
    "\064\006\uffde\013\uffde\014\uffde\026\uffde\027\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\047\uffde\051\uffde\053\uffde\056\uffde" +
    "\057\uffde\061\uffde\062\uffde\063\177\065\uffde\066\uffde\001" +
    "\002\000\072\006\uffbf\013\uffbf\014\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf\045\uffbf\047\uffbf" +
    "\051\uffbf\053\uffbf\056\uffbf\057\uffbf\061\uffbf\062\uffbf\064" +
    "\uffbf\065\uffbf\066\uffbf\067\uffbf\001\002\000\072\006\uffbe" +
    "\013\uffbe\014\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\043\uffbe\045\uffbe\047\uffbe\051\uffbe\053\uffbe\056" +
    "\uffbe\057\uffbe\061\uffbe\062\uffbe\064\uffbe\065\uffbe\066\uffbe" +
    "\067\uffbe\001\002\000\072\006\uffba\013\uffba\014\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\043\uffba\045" +
    "\uffba\047\uffba\051\uffba\053\uffba\056\uffba\057\uffba\061\uffba" +
    "\062\uffba\064\uffba\065\uffba\066\uffba\067\uffba\001\002\000" +
    "\062\006\uffce\013\uffce\014\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\041\uffce\047\uffce\051\uffce\053\uffce\056\uffce" +
    "\057\uffce\061\uffce\062\uffce\065\uffce\066\uffce\001\002\000" +
    "\004\042\167\001\002\000\072\006\uffbb\013\uffbb\014\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\043\uffbb" +
    "\045\uffbb\047\uffbb\051\uffbb\053\uffbb\056\uffbb\057\uffbb\061" +
    "\uffbb\062\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\001\002" +
    "\000\062\006\ufff3\013\ufff3\014\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3" +
    "\037\ufff3\040\ufff3\041\ufff3\047\ufff3\051\ufff3\053\ufff3\056" +
    "\ufff3\057\ufff3\061\ufff3\062\ufff3\065\ufff3\066\ufff3\001\002" +
    "\000\066\006\uffe5\013\uffe5\014\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\041\uffe5\045\uffe5\047\uffe5\051\uffe5\053" +
    "\uffe5\056\uffe5\057\uffe5\061\uffe5\062\uffe5\064\165\065\uffe5" +
    "\066\uffe5\001\002\000\004\046\156\001\002\000\072\006" +
    "\uffbc\013\uffbc\014\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\043\uffbc\045\uffbc\047\uffbc\051\uffbc\053\uffbc" +
    "\056\uffbc\057\uffbc\061\uffbc\062\uffbc\064\uffbc\065\uffbc\066" +
    "\uffbc\067\uffbc\001\002\000\062\006\uffc6\013\uffc6\014\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\047\uffc6" +
    "\051\uffc6\053\uffc6\056\uffc6\057\uffc6\061\uffc6\062\uffc6\065" +
    "\uffc6\066\uffc6\001\002\000\004\042\146\001\002\000\004" +
    "\026\145\001\002\000\006\036\uffca\037\144\001\002\000" +
    "\006\026\uffb4\036\uffb4\001\002\000\062\006\uffee\013\uffee" +
    "\014\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033" +
    "\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee" +
    "\047\uffee\051\uffee\053\uffee\056\uffee\057\uffee\061\uffee\062" +
    "\uffee\065\uffee\066\uffee\001\002\000\062\006\ufff2\013\ufff2" +
    "\014\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\047\ufff2\051\ufff2\053\ufff2\056\ufff2\057\ufff2\061\ufff2\062" +
    "\ufff2\065\ufff2\066\ufff2\001\002\000\004\042\140\001\002" +
    "\000\006\026\137\036\uffcb\001\002\000\062\006\uffc7\013" +
    "\uffc7\014\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\047\uffc7\051\uffc7\053\uffc7\056\uffc7\057\uffc7\061\uffc7" +
    "\062\uffc7\065\uffc7\066\uffc7\001\002\000\004\026\136\001" +
    "\002\000\004\036\135\001\002\000\062\006\uffdd\013\uffdd" +
    "\014\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\047\uffdd\051\uffdd\053\uffdd\056\uffdd\057\uffdd\061\uffdd\062" +
    "\uffdd\065\uffdd\066\uffdd\001\002\000\062\006\uffc5\013\uffc5" +
    "\014\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\047\uffc5\051\uffc5\053\uffc5\056\uffc5\057\uffc5\061\uffc5\062" +
    "\uffc5\065\uffc5\066\uffc5\001\002\000\062\006\ufff1\013\ufff1" +
    "\014\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1" +
    "\047\ufff1\051\ufff1\053\ufff1\056\ufff1\057\ufff1\061\ufff1\062" +
    "\ufff1\065\ufff1\066\ufff1\001\002\000\004\042\112\001\002" +
    "\000\014\027\011\030\014\031\017\032\016\033\015\001" +
    "\002\000\062\006\ufff4\013\ufff4\014\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\041\ufff4\047\ufff4\051\ufff4\053\ufff4" +
    "\056\ufff4\057\ufff4\061\ufff4\062\ufff4\065\ufff4\066\ufff4\001" +
    "\002\000\062\006\uffe0\013\uffe0\014\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\041\uffe0\047\uffe0\051\uffe0\053\uffe0" +
    "\056\uffe0\057\uffe0\061\uffe0\062\uffe0\065\uffe0\066\uffe0\001" +
    "\002\000\062\006\051\013\072\014\052\026\024\027\011" +
    "\030\014\031\017\032\016\033\015\034\041\035\045\036" +
    "\034\037\035\040\036\041\023\047\074\051\066\053\065" +
    "\056\047\057\044\061\060\062\053\065\040\066\055\001" +
    "\002\000\006\026\uffb5\036\uffb5\001\002\000\062\006\uffec" +
    "\013\uffec\014\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\041\uffec\047\uffec\051\uffec\053\uffec\056\uffec\057\uffec\061" +
    "\uffec\062\uffec\065\uffec\066\uffec\001\002\000\004\002\ufffe" +
    "\001\002\000\062\006\uffeb\013\uffeb\014\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\041\uffeb\047\uffeb\051\uffeb\053" +
    "\uffeb\056\uffeb\057\uffeb\061\uffeb\062\uffeb\065\uffeb\066\uffeb" +
    "\001\002\000\004\026\106\001\002\000\006\063\102\067" +
    "\103\001\002\000\004\067\101\001\002\000\064\006\uffda" +
    "\013\uffda\014\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\041\uffda\043\uffda\047\uffda\051\uffda\053\uffda\056\uffda\057" +
    "\uffda\061\uffda\062\uffda\065\uffda\066\uffda\001\002\000\016" +
    "\034\041\035\045\036\034\037\035\040\036\041\023\001" +
    "\002\000\064\006\uffdc\013\uffdc\014\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\043\uffdc\047\uffdc\051\uffdc" +
    "\053\uffdc\056\uffdc\057\uffdc\061\uffdc\062\uffdc\065\uffdc\066" +
    "\uffdc\001\002\000\004\067\105\001\002\000\064\006\uffdb" +
    "\013\uffdb\014\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\043\uffdb\047\uffdb\051\uffdb\053\uffdb\056\uffdb\057" +
    "\uffdb\061\uffdb\062\uffdb\065\uffdb\066\uffdb\001\002\000\010" +
    "\044\107\063\ufff9\067\ufff9\001\002\000\004\036\110\001" +
    "\002\000\004\045\111\001\002\000\064\006\uffe1\013\uffe1" +
    "\014\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\047\uffe1\051\uffe1\053\uffe1\056\uffe1\057\uffe1\061\uffe1\062" +
    "\uffe1\065\uffe1\066\uffe1\067\uffe1\001\002\000\004\043\113" +
    "\001\002\000\004\046\114\001\002\000\060\006\051\013" +
    "\072\014\052\026\024\027\011\030\014\031\017\032\016" +
    "\033\015\034\041\035\045\036\034\037\035\040\036\041" +
    "\023\051\066\053\065\056\047\057\044\061\060\062\053" +
    "\065\040\066\055\001\002\000\062\006\051\013\072\014" +
    "\052\026\024\027\011\030\014\031\017\032\016\033\015" +
    "\034\041\035\045\036\034\037\035\040\036\041\023\047" +
    "\116\051\066\053\065\056\047\057\044\061\060\062\053" +
    "\065\040\066\055\001\002\000\006\054\120\055\117\001" +
    "\002\000\004\046\132\001\002\000\004\042\124\001\002" +
    "\000\062\006\uffd7\013\uffd7\014\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\040\uffd7\041\uffd7\047\uffd7\051\uffd7\053\uffd7\056" +
    "\uffd7\057\uffd7\061\uffd7\062\uffd7\065\uffd7\066\uffd7\001\002" +
    "\000\062\006\uffd8\013\uffd8\014\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\047\uffd8\051\uffd8\053\uffd8\056" +
    "\uffd8\057\uffd8\061\uffd8\062\uffd8\065\uffd8\066\uffd8\001\002" +
    "\000\062\006\uffd9\013\uffd9\014\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\047\uffd9\051\uffd9\053\uffd9\056" +
    "\uffd9\057\uffd9\061\uffd9\062\uffd9\065\uffd9\066\uffd9\001\002" +
    "\000\004\043\125\001\002\000\004\046\126\001\002\000" +
    "\060\006\051\013\072\014\052\026\024\027\011\030\014" +
    "\031\017\032\016\033\015\034\041\035\045\036\034\037" +
    "\035\040\036\041\023\051\066\053\065\056\047\057\044" +
    "\061\060\062\053\065\040\066\055\001\002\000\062\006" +
    "\051\013\072\014\052\026\024\027\011\030\014\031\017" +
    "\032\016\033\015\034\041\035\045\036\034\037\035\040" +
    "\036\041\023\047\130\051\066\053\065\056\047\057\044" +
    "\061\060\062\053\065\040\066\055\001\002\000\006\054" +
    "\120\055\117\001\002\000\062\006\uffd6\013\uffd6\014\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\047\uffd6" +
    "\051\uffd6\053\uffd6\056\uffd6\057\uffd6\061\uffd6\062\uffd6\065" +
    "\uffd6\066\uffd6\001\002\000\060\006\051\013\072\014\052" +
    "\026\024\027\011\030\014\031\017\032\016\033\015\034" +
    "\041\035\045\036\034\037\035\040\036\041\023\051\066" +
    "\053\065\056\047\057\044\061\060\062\053\065\040\066" +
    "\055\001\002\000\062\006\051\013\072\014\052\026\024" +
    "\027\011\030\014\031\017\032\016\033\015\034\041\035" +
    "\045\036\034\037\035\040\036\041\023\047\134\051\066" +
    "\053\065\056\047\057\044\061\060\062\053\065\040\066" +
    "\055\001\002\000\062\006\uffd5\013\uffd5\014\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\047\uffd5\051\uffd5" +
    "\053\uffd5\056\uffd5\057\uffd5\061\uffd5\062\uffd5\065\uffd5\066" +
    "\uffd5\001\002\000\062\006\uffc9\013\uffc9\014\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\047\uffc9\051\uffc9" +
    "\053\uffc9\056\uffc9\057\uffc9\061\uffc9\062\uffc9\065\uffc9\066" +
    "\uffc9\001\002\000\062\006\uffed\013\uffed\014\uffed\026\uffed" +
    "\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035" +
    "\uffed\036\uffed\037\uffed\040\uffed\041\uffed\047\uffed\051\uffed" +
    "\053\uffed\056\uffed\057\uffed\061\uffed\062\uffed\065\uffed\066" +
    "\uffed\001\002\000\062\006\uffcc\013\uffcc\014\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\047\uffcc\051\uffcc" +
    "\053\uffcc\056\uffcc\057\uffcc\061\uffcc\062\uffcc\065\uffcc\066" +
    "\uffcc\001\002\000\004\026\141\001\002\000\004\043\142" +
    "\001\002\000\004\067\143\001\002\000\062\006\uffd2\013" +
    "\uffd2\014\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041" +
    "\uffd2\047\uffd2\051\uffd2\053\uffd2\056\uffd2\057\uffd2\061\uffd2" +
    "\062\uffd2\065\uffd2\066\uffd2\001\002\000\062\006\uffc8\013" +
    "\uffc8\014\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\047\uffc8\051\uffc8\053\uffc8\056\uffc8\057\uffc8\061\uffc8" +
    "\062\uffc8\065\uffc8\066\uffc8\001\002\000\004\044\107\001" +
    "\002\000\004\051\066\001\002\000\004\051\066\001\002" +
    "\000\004\043\151\001\002\000\004\046\152\001\002\000" +
    "\060\006\051\013\072\014\052\026\024\027\011\030\014" +
    "\031\017\032\016\033\015\034\041\035\045\036\034\037" +
    "\035\040\036\041\023\051\066\053\065\056\047\057\044" +
    "\061\060\062\053\065\040\066\055\001\002\000\062\006" +
    "\051\013\072\014\052\026\024\027\011\030\014\031\017" +
    "\032\016\033\015\034\041\035\045\036\034\037\035\040" +
    "\036\041\023\047\154\051\066\053\065\056\047\057\044" +
    "\061\060\062\053\065\040\066\055\001\002\000\004\067" +
    "\155\001\002\000\062\006\uffd3\013\uffd3\014\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\047\uffd3\051\uffd3" +
    "\053\uffd3\056\uffd3\057\uffd3\061\uffd3\062\uffd3\065\uffd3\066" +
    "\uffd3\001\002\000\060\006\051\013\072\014\052\026\024" +
    "\027\011\030\014\031\017\032\016\033\015\034\041\035" +
    "\045\036\034\037\035\040\036\041\023\051\066\053\065" +
    "\056\047\057\044\061\060\062\053\065\040\066\055\001" +
    "\002\000\062\006\051\013\072\014\052\026\024\027\011" +
    "\030\014\031\017\032\016\033\015\034\041\035\045\036" +
    "\034\037\035\040\036\041\023\047\160\051\066\053\065" +
    "\056\047\057\044\061\060\062\053\065\040\066\055\001" +
    "\002\000\004\060\161\001\002\000\004\042\162\001\002" +
    "\000\004\043\163\001\002\000\004\067\164\001\002\000" +
    "\062\006\uffd4\013\uffd4\014\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\047\uffd4\051\uffd4\053\uffd4\056\uffd4" +
    "\057\uffd4\061\uffd4\062\uffd4\065\uffd4\066\uffd4\001\002\000" +
    "\016\034\041\035\045\036\034\037\035\040\036\041\023" +
    "\001\002\000\064\006\uffe4\013\uffe4\014\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\045\uffe4\047\uffe4\051" +
    "\uffe4\053\uffe4\056\uffe4\057\uffe4\061\uffe4\062\uffe4\065\uffe4" +
    "\066\uffe4\001\002\000\012\026\170\036\171\037\174\040" +
    "\173\001\002\000\004\043\uffb6\001\002\000\004\043\uffb9" +
    "\001\002\000\004\043\175\001\002\000\004\043\uffb7\001" +
    "\002\000\004\043\uffb8\001\002\000\004\067\176\001\002" +
    "\000\062\006\uffd1\013\uffd1\014\uffd1\026\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\047\uffd1\051\uffd1\053\uffd1\056" +
    "\uffd1\057\uffd1\061\uffd1\062\uffd1\065\uffd1\066\uffd1\001\002" +
    "\000\004\044\200\001\002\000\016\034\041\035\045\036" +
    "\034\037\035\040\036\041\023\001\002\000\004\045\202" +
    "\001\002\000\062\006\uffe2\013\uffe2\014\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\047\uffe2\051\uffe2\053" +
    "\uffe2\056\uffe2\057\uffe2\061\uffe2\062\uffe2\065\uffe2\066\uffe2" +
    "\001\002\000\004\036\214\001\002\000\020\026\206\034" +
    "\041\035\045\036\034\037\035\040\036\041\023\001\002" +
    "\000\006\043\uffe8\064\uffe8\001\002\000\006\043\uffe9\064" +
    "\uffe9\001\002\000\006\043\211\064\212\001\002\000\006" +
    "\043\uffe7\064\uffe7\001\002\000\062\006\uffea\013\uffea\014" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\047" +
    "\uffea\051\uffea\053\uffea\056\uffea\057\uffea\061\uffea\062\uffea" +
    "\065\uffea\066\uffea\001\002\000\020\026\206\034\041\035" +
    "\045\036\034\037\035\040\036\041\023\001\002\000\006" +
    "\043\uffe6\064\uffe6\001\002\000\004\045\215\001\002\000" +
    "\064\006\uffe3\013\uffe3\014\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\041\uffe3\047\uffe3\051\uffe3\053\uffe3\056\uffe3" +
    "\057\uffe3\061\uffe3\062\uffe3\063\uffe3\065\uffe3\066\uffe3\001" +
    "\002\000\004\042\217\001\002\000\016\027\011\030\014" +
    "\031\017\032\016\033\015\043\223\001\002\000\006\043" +
    "\230\064\231\001\002\000\004\026\227\001\002\000\006" +
    "\043\ufff8\064\ufff8\001\002\000\004\046\224\001\002\000" +
    "\060\006\051\013\072\014\052\026\024\027\011\030\014" +
    "\031\017\032\016\033\015\034\041\035\045\036\034\037" +
    "\035\040\036\041\023\051\066\053\065\056\047\057\044" +
    "\061\060\062\053\065\040\066\055\001\002\000\062\006" +
    "\051\013\072\014\052\026\024\027\011\030\014\031\017" +
    "\032\016\033\015\034\041\035\045\036\034\037\035\040" +
    "\036\041\023\047\226\051\066\053\065\056\047\057\044" +
    "\061\060\062\053\065\040\066\055\001\002\000\004\052" +
    "\ufffd\001\002\000\006\043\ufff9\064\ufff9\001\002\000\004" +
    "\046\233\001\002\000\014\027\011\030\014\031\017\032" +
    "\016\033\015\001\002\000\006\043\ufff7\064\ufff7\001\002" +
    "\000\060\006\051\013\072\014\052\026\024\027\011\030" +
    "\014\031\017\032\016\033\015\034\041\035\045\036\034" +
    "\037\035\040\036\041\023\051\066\053\065\056\047\057" +
    "\044\061\060\062\053\065\040\066\055\001\002\000\062" +
    "\006\051\013\072\014\052\026\024\027\011\030\014\031" +
    "\017\032\016\033\015\034\041\035\045\036\034\037\035" +
    "\040\036\041\023\047\235\051\066\053\065\056\047\057" +
    "\044\061\060\062\053\065\040\066\055\001\002\000\004" +
    "\052\ufffc\001\002\000\004\052\ufffa\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\012\004\005\005\004\006\006\007\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\236\007\235\001\001\000\004\002\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\002\047\003\042\012\070\013\072\016\030\017\061\020" +
    "\032\021\026\022\067\023\027\024\066\026\056\031\045" +
    "\032\062\033\063\034\041\035\053\037\055\041\024\042" +
    "\025\043\060\044\031\045\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\075\011\076\022" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\002\047\003\042\013\074\016\030\017\061\020\032\021" +
    "\026\022\067\023\027\024\066\026\056\031\045\032\062" +
    "\033\063\034\041\035\053\037\055\041\024\042\025\043" +
    "\060\044\031\045\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\002\047\003\042\012\114\013\072" +
    "\016\030\017\061\020\032\021\026\022\067\023\027\024" +
    "\066\026\056\031\045\032\062\033\063\034\041\035\053" +
    "\037\055\041\024\042\025\043\060\044\031\045\036\001" +
    "\001\000\056\002\047\003\042\013\074\016\030\017\061" +
    "\020\032\021\026\022\067\023\027\024\066\026\056\031" +
    "\045\032\062\033\063\034\041\035\053\037\055\041\024" +
    "\042\025\043\060\044\031\045\036\001\001\000\010\025" +
    "\120\027\122\030\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\002\047" +
    "\003\042\012\126\013\072\016\030\017\061\020\032\021" +
    "\026\022\067\023\027\024\066\026\056\031\045\032\062" +
    "\033\063\034\041\035\053\037\055\041\024\042\025\043" +
    "\060\044\031\045\036\001\001\000\056\002\047\003\042" +
    "\013\074\016\030\017\061\020\032\021\026\022\067\023" +
    "\027\024\066\026\056\031\045\032\062\033\063\034\041" +
    "\035\053\037\055\041\024\042\025\043\060\044\031\045" +
    "\036\001\001\000\010\025\130\027\122\030\121\001\001" +
    "\000\002\001\001\000\060\002\047\003\042\012\132\013" +
    "\072\016\030\017\061\020\032\021\026\022\067\023\027" +
    "\024\066\026\056\031\045\032\062\033\063\034\041\035" +
    "\053\037\055\041\024\042\025\043\060\044\031\045\036" +
    "\001\001\000\056\002\047\003\042\013\074\016\030\017" +
    "\061\020\032\021\026\022\067\023\027\024\066\026\056" +
    "\031\045\032\062\033\063\034\041\035\053\037\055\041" +
    "\024\042\025\043\060\044\031\045\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\146\001\001\000\004\024\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\002\047\003\042\012" +
    "\152\013\072\016\030\017\061\020\032\021\026\022\067" +
    "\023\027\024\066\026\056\031\045\032\062\033\063\034" +
    "\041\035\053\037\055\041\024\042\025\043\060\044\031" +
    "\045\036\001\001\000\056\002\047\003\042\013\074\016" +
    "\030\017\061\020\032\021\026\022\067\023\027\024\066" +
    "\026\056\031\045\032\062\033\063\034\041\035\053\037" +
    "\055\041\024\042\025\043\060\044\031\045\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\002\047\003" +
    "\042\012\156\013\072\016\030\017\061\020\032\021\026" +
    "\022\067\023\027\024\066\026\056\031\045\032\062\033" +
    "\063\034\041\035\053\037\055\041\024\042\025\043\060" +
    "\044\031\045\036\001\001\000\056\002\047\003\042\013" +
    "\074\016\030\017\061\020\032\021\026\022\067\023\027" +
    "\024\066\026\056\031\045\032\062\033\063\034\041\035" +
    "\053\037\055\041\024\042\025\043\060\044\031\045\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\042" +
    "\017\165\001\001\000\002\001\001\000\004\036\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\042\017\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\204\014\207\015\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\204\014\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\220\010\217\011\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\002\047\003\042\012\224\013\072" +
    "\016\030\017\061\020\032\021\026\022\067\023\027\024" +
    "\066\026\056\031\045\032\062\033\063\034\041\035\053" +
    "\037\055\041\024\042\025\043\060\044\031\045\036\001" +
    "\001\000\056\002\047\003\042\013\074\016\030\017\061" +
    "\020\032\021\026\022\067\023\027\024\066\026\056\031" +
    "\045\032\062\033\063\034\041\035\053\037\055\041\024" +
    "\042\025\043\060\044\031\045\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\220" +
    "\011\231\001\001\000\002\001\001\000\060\002\047\003" +
    "\042\012\233\013\072\016\030\017\061\020\032\021\026" +
    "\022\067\023\027\024\066\026\056\031\045\032\062\033" +
    "\063\034\041\035\053\037\055\041\024\042\025\043\060" +
    "\044\031\045\036\001\001\000\056\002\047\003\042\013" +
    "\074\016\030\017\061\020\032\021\026\022\067\023\027" +
    "\024\066\026\056\031\045\032\062\033\063\034\041\035" +
    "\053\037\055\041\024\042\025\043\060\044\031\045\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    Lexer lex;

    @SuppressWarnings("deprecation")
    public parser(Lexer lex){
        this.lex=lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    public void hola(){
        System.out.println("Hola");
    }
    public void adios(){
            System.out.println("Adios");
        }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // navidad ::= mainNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // navidad ::= bolsanavidena mainNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mainNavidad ::= FUNCTION MAIN ABRECUENTO CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainNavidad",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bolsanavidenaAux ::= FUNCTION tsantaclaus PERSONA ABRECUENTO CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenaAux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bolsanavidenaAux ::= FUNCTION tsantaclaus PERSONA ABRECUENTO listaDeRegalos CIERRACUENTO ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenaAux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bolsanavidena ::= bolsanavidenaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidena",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bolsanavidena ::= bolsanavidena bolsanavidenaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidena",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaDeRegalosAux ::= tsantaclaus PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalosAux",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listaDeRegalos ::= listaDeRegalosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listaDeRegalos ::= listaDeRegalos BASTON listaDeRegalosAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeRegalos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // adorno ::= llamadaASanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // adorno ::= infoTrineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // adorno ::= decorarGalleta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // adorno ::= leerCarta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // adorno ::= escribirCarta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // adorno ::= luces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // adorno ::= decoracionI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // adorno ::= decoracionesF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // adorno ::= CORTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // adorno ::= ENVIA PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("adorno",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // villancicos ::= adorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("villancicos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // villancicos ::= villancicos adorno 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("villancicos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // llamadaASanta ::= PERSONA ABRECUENTO listaDeTamales CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaASanta",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listaDeTamalesAux ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamalesAux",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listaDeTamalesAux ::= tlsantaclaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamalesAux",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listaDeTamales ::= listaDeTamalesAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listaDeTamales ::= listaDeTamales BASTON listaDeTamalesAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeTamales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listaAmigos ::= tlsantaclaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaAmigos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listaAmigos ::= tlsantaclaus BASTON listaAmigos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaAmigos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // acceso_trineo ::= PERSONA ABREEMPAQUE l_SANTA_CLAUS CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso_trineo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // llenar_trineo ::= acceso_trineo ENTREGA ABREEMPAQUE listaAmigos CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llenar_trineo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // trineo ::= tsantaclaus PERSONA ABREEMPAQUE l_SANTA_CLAUS CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("trineo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // infoTrineo ::= trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // infoTrineo ::= llenar_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // infoTrineo ::= acceso_trineo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // infoTrineo ::= listaAmigos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTrineo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // decorarGalleta ::= LOCAL listaDeRegalosAux FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // decorarGalleta ::= LOCAL listaDeRegalosAux ENTREGA tlsantaclaus FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // decorarGalleta ::= LOCAL trineo FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decorarGalleta",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ponerLuces ::= elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ponerLuces",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ponerLuces ::= else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ponerLuces",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // if ::= ELFO ABRECUENTO CIERRACUENTO ABREREGALO villancicos CIERRAREGALO ponerLuces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // elif ::= HADA ABRECUENTO CIERRACUENTO ABREREGALO villancicos CIERRAREGALO ponerLuces 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elif",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // else ::= DUENDE ABREREGALO villancicos CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // do_until ::= HACE ABREREGALO villancicos CIERRAREGALO REVISA ABRECUENTO CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_until",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // for ::= ENVUELVE ABRECUENTO decorarGalleta decorarGalleta CIERRACUENTO ABREREGALO villancicos CIERRAREGALO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // leerCarta ::= ESCUCHA ABRECUENTO PERSONA CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("leerCarta",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // escribirCarta ::= NARRA ABRECUENTO mensaje CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escribirCarta",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // decoracionesI ::= decoracionI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesI",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // decoracionesI ::= decoracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesI",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // decoracionesF ::= decoracionF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesF",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // decoracionesF ::= decoracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionesF",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // decoracion ::= ornamentosUnicos PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // decoracionIAux ::= ornamentosUnicos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionIAux",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // decoracionIAux ::= TURENO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionIAux",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // decoracionI ::= decoracionIAux l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionI",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // decoracionF ::= TURENO l_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decoracionF",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // luces ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // luces ::= do_until 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // luces ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("luces",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tsantaclaus ::= FATHER_CHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tsantaclaus ::= SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tsantaclaus ::= PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tsantaclaus ::= SAN_NICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tsantaclaus ::= SANTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tsantaclaus",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tlsantaclaus ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tlsantaclaus ::= l_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tlsantaclaus ::= l_SANTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tlsantaclaus ::= l_TFATHER_CHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tlsantaclaus ::= l_FFATHER_CHRISTMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tlsantaclaus ::= l_SAN_NICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tlsantaclaus",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // mensaje ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // mensaje ::= l_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // mensaje ::= l_SAN_NICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // mensaje ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mensaje",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ornamentosUnicos ::= QUIEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentosUnicos",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ornamentosUnicos ::= GRINCH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentosUnicos",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ornamentos ::= RODOLFO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentos",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ornamentos ::= TURENO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentos",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ornamentos ::= COMETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentos",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ornamentos ::= DASHER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentos",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ornamentos ::= DANCER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentos",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ornamentos ::= PRANCER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ornamentos",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
